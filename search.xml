<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>OJ判题项目-初始化(二)</title>
      <link href="/2023/09/10/%E9%A1%B9%E7%9B%AE%E7%BB%8F%E9%AA%8C/oj%E5%88%A4%E9%A2%98/oj%E5%88%A4%E9%A2%98%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91-2/"/>
      <url>/2023/09/10/%E9%A1%B9%E7%9B%AE%E7%BB%8F%E9%AA%8C/oj%E5%88%A4%E9%A2%98/oj%E5%88%A4%E9%A2%98%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91-2/</url>
      
        <content type="html"><![CDATA[<h2 id="后端项目初始化"><a href="#后端项目初始化" class="headerlink" title="后端项目初始化"></a>后端项目初始化</h2><ul><li><p>克隆代码仓库中的后端模板</p></li><li><p>修改项目的名称、包名等一些文件命名</p></li><li><p>修改项目的 yml 文件，端口号，数据库链接 url、username、password 等</p></li><li><p>修改完成后的项目结构如下</p><p><img src="https://cdn.jsdelivr.net/gh/keependeavour/picgo/img/20230911151019.png" alt=""></p></li><li><p>修改完配置项后，启动项目并进入后端的接口文档如下</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/keependeavour/picgo/img/20230911151321.png" alt=""></p><h2 id="前端项目初始化"><a href="#前端项目初始化" class="headerlink" title="前端项目初始化"></a>前端项目初始化</h2><ul><li>安装 vue-cli 脚手架<br>执行命令<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue create chenoj-frontend</span><br></pre></td></tr></table></figure></li><li>项目创建完成后，进入项目安装 arco design 组件库<br>执行命令<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev @arco-design/web-vue</span><br></pre></td></tr></table></figure></li><li><p>安装完成后 配置 main.js</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&quot;./App.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ArcoVue</span> <span class="keyword">from</span> <span class="string">&quot;@arco-design/web-vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;@arco-design/web-vue/dist/arco.css&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&quot;./router&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&quot;./store&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;@/access&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">createApp</span>(<span class="title class_">App</span>).<span class="title function_">use</span>(<span class="title class_">ArcoVue</span>).<span class="title function_">use</span>(store).<span class="title function_">use</span>(router).<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p>编写路由控制，权限控制，基本的登录页注册页<br><img src="https://cdn.jsdelivr.net/gh/keependeavour/picgo/img/20230911152012.png" alt=""></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 项目经验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OJ判题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OJ判题项目-介绍(一)</title>
      <link href="/2023/09/09/%E9%A1%B9%E7%9B%AE%E7%BB%8F%E9%AA%8C/oj%E5%88%A4%E9%A2%98/oj%E5%88%A4%E9%A2%98%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91-1/"/>
      <url>/2023/09/09/%E9%A1%B9%E7%9B%AE%E7%BB%8F%E9%AA%8C/oj%E5%88%A4%E9%A2%98/oj%E5%88%A4%E9%A2%98%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91-1/</url>
      
        <content type="html"><![CDATA[<h2 id="项目简介"><a href="#项目简介" class="headerlink" title="项目简介"></a>项目简介</h2><ul><li>OJ = Online judge 在线判题测评系统</li><li>用户可以选择题目，在线做题，编写代码并提交代码</li><li>系统会对用户提交的代码，根据系统设定的答案，来判断用户的提交结果是否正确</li><li>OJ 判题系统的最大难点在于如何判题，也就是如何设计判题系统，并在开发结束后提供开发 API</li><li>此次的代码沙箱通过自己来实现</li></ul><h2 id="项目特点"><a href="#项目特点" class="headerlink" title="项目特点"></a>项目特点</h2><blockquote><p>目前网上并无此类型项目的教程，即使有也不是从 0-&gt;1 的完成进度，对于此次项目能够应用到 Spring Cloud，Docker 代码沙箱，虚拟机等这些。<br>此次系统会将前后端的大部分技术栈都应用到项目之中，并进行前端从 0-&gt;1 的搭建，后端依旧使用万能模板进行初始化，必要的一些增啥改查（用户） 完成 session 域登录。</p></blockquote><h2 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h2><ul><li><h3 id="后端技术"><a href="#后端技术" class="headerlink" title="后端技术"></a>后端技术</h3><blockquote><ul><li>Spring Boot</li><li>AOP 切面编程</li><li>Spring Cloud 微服务</li><li>Docker 代码沙箱</li><li>JVM 部分涉及</li><li>Rabbitmq 消息队列</li><li>mybatis-plus 持久层</li><li>mysql 数据库</li><li>设计模式</li></ul></blockquote></li><li><h3 id="前端技术"><a href="#前端技术" class="headerlink" title="前端技术"></a>前端技术</h3><blockquote><ul><li>Vue3</li><li>Arco Design 组件库</li><li>axios 请求库</li><li>openAPI 第三方生成接口</li><li>typescript</li></ul></blockquote></li><li><h3 id="功能模块"><a href="#功能模块" class="headerlink" title="功能模块"></a>功能模块</h3></li></ul><ol><li>题目模块<blockquote><p>a. 创建题目（admin）<br>b. 删除题目（admin）<br>c. 修改题目（admin）<br>d. 搜索题目（用户）<br>e. 在线做题（用户）<br>f. 提交题目代码（用户）</p></blockquote></li><li>用户模块<blockquote><p>a.注册<br>b.登录</p></blockquote></li><li>判题模块<blockquote><p>a.提交判题（结果判断是否正确和错误）<br>b.错误处理（内存溢出、安全性、超时）<br>b.自主实现代码沙箱（安全沙箱，运行用户代码）<br>b.开放接口（提供独立的新服务）</p></blockquote></li></ol><h2 id="从项目中学习到的实践知识"><a href="#从项目中学习到的实践知识" class="headerlink" title="从项目中学习到的实践知识"></a>从项目中学习到的实践知识</h2><blockquote><ol><li>此次依旧是跟随鱼皮大大全程直播听讲，参与项目完整的开发流程，能够独立开发上线项目。</li><li>在上一个项目中已经初使用 rabbitmq 到项目中，此项目会再次使用，熟悉 rabbitmq 的使用。</li><li>初次学习 java 进程控制、java 安全管理器、部分 JVM 知识点、虚拟机（云服务器）、Docker(代码沙箱) Spring Cloud 微服务、设计模式</li><li>本项目的选材新颖，打破网上统一的项目经验如外卖系统，别人做外卖，我做 OJ。</li><li>此项目还能够将所学的前后端知识进行一个综合应用，也是对技术学习掌握的如何的考验。</li><li>最主要的难点就是自主实现代码沙箱，目前我对于这个还是一个模糊的状态，希望通过本项目的学习能够一定的了解并使用 Docker 代码沙箱</li></ol></blockquote><h2 id="个人对项目见解"><a href="#个人对项目见解" class="headerlink" title="个人对项目见解"></a>个人对项目见解</h2><blockquote><p>第一次学习关于 java 项目的安全性问题，比如内存溢出，运行用户代码等等。最主要是针对于用户的代码，要在一个安全纯净的环境进行执行，还要过滤恶意代码防止攻击系统，造成系统瘫痪，将判题运行用户代码的操作进行解耦，收到用户代码时候，将代码放到安全沙箱中进行执行，最后让沙箱返回用户代码的执行结果，后端系统只需要将代码给沙箱，沙箱运行并返回结果，系统进行判断结果符合为正确即可，隔离了代码的执行环境，如果代码存在木马或者是恶意代码，在沙箱中执行，并不会影响到系统的运行。这样保证了系统的安全性，也对应用服务进行了解耦，增大了接口的响应效率，前端提交代码后，看到的是任务的执行状态，稍等后，后端修改任务状态正确就返回 succeed 错误就返回其他在沙箱中运行错误，或者是结果不符合错误。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 项目经验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OJ判题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>智能BI项目-引入RabbitMQ(七)</title>
      <link href="/2023/08/28/%E9%A1%B9%E7%9B%AE%E7%BB%8F%E9%AA%8C/%E6%99%BA%E8%83%BDBI/%E6%99%BA%E8%83%BDBI%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91-7/"/>
      <url>/2023/08/28/%E9%A1%B9%E7%9B%AE%E7%BB%8F%E9%AA%8C/%E6%99%BA%E8%83%BDBI/%E6%99%BA%E8%83%BDBI%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91-7/</url>
      
        <content type="html"><![CDATA[<h2 id="往期开发-已经完成"><a href="#往期开发-已经完成" class="headerlink" title="往期开发(已经完成)"></a>往期开发(已经完成)</h2><ul><li><a href="/2023/08/21/项目经验/智能BI/智能BI项目开发-1/">智能 BI 项目-介绍(一)</a></li><li><a href="/2023/08/22/项目经验/智能BI/智能BI项目开发-2/">智能 BI 项目-初始化(二)</a></li><li><a href="/2023/08/23/项目经验/智能BI/智能BI项目开发-3/">智能 BI 项目-初学 AI 分析(三)</a></li><li><a href="/2023/08/24/项目经验/智能BI/智能BI项目开发-4/">智能 BI 项目-AI 接口调用(四)</a></li><li><a href="/2023/08/25/项目经验/智能BI/智能BI项目开发-5/">智能 BI 项目-接口优化(五)</a></li><li><a href="/2023/08/26/项目经验/智能BI/智能BI项目开发-6/">智能 BI 项目-接口的异步化(六)</a></li><li><a href="/2023/08/28/项目经验/智能BI/智能BI项目开发-7/">智能 BI 项目-引入 RabbitMQ(七)</a></li></ul><h2 id="今日后端开发"><a href="#今日后端开发" class="headerlink" title="今日后端开发"></a>今日后端开发</h2><ul><li><h3 id="分析目前系统现状"><a href="#分析目前系统现状" class="headerlink" title="分析目前系统现状"></a>分析目前系统现状</h3><p>现状： 目前实现异步的方式是通过本地的从线程池实现的</p><blockquote><ol><li><p>无法集中的去限制，只能够单机限制<br>假设 AI 服务限制只能有 2-3 个用户同时去调用，目前可以通过设置线程池最大核心线程数为 2-3 来实现。<br>假设系统用量极具增大，要求将系统进行分布式改造，多台服务器，每个服务器都要有两个最大核心线程数 2-3<br>就会有 2N-3N 个线程数这样总数加起来就超过 AI 服务最大的限制<br>解决方案：将所有的服务统一的发送到一个消息管理地方，然后统一的把任务分发给各个分布式系统（集中地去存储并分发要执行的项目）</p></li><li><p>通过本地线城池实现的异步化，由于任务是放在内存中执行的，丢失的可能性非常大，假设系统宕机就会导致系统丢失本次任务<br>虽然任务会丢失，但是可以通过人工手段，从数据库中取出，通过某些手段，重新执行此任务，但是开发维护成本非常高<br>以上就是很经典的重试场景，可以通过定时任务去解决，是不需要我们开发者过于关心任务丢失重试的场景<br>解决方案：把任务存储到一个持久化的存储硬盘来进行存储。</p></li><li><p>优化<br>如果系统功能的越来越多，长耗时任务越来越长，系统越来越复杂，例如要开多个线程池，资源可能会出现资源竞争的情况<br>此时我们可以把系统进行拆分，也就是服务拆分，把长耗时任务，消耗很多资源的任务，单独的抽成一个程序，不影响主业务的执行<br>解决方案:可以使用一个中间件(中间人)，让中间件去帮我们去连接俩个系统(程序)，比如核心系统和智能生成业务</p></li></ol></blockquote></li><li><h3 id="引入中间件-RabbitMQ"><a href="#引入中间件-RabbitMQ" class="headerlink" title="引入中间件(RabbitMQ)"></a>引入中间件(RabbitMQ)</h3><p>连接多个系统的桥梁，或者帮助多个系统进行通信、协作<br>例如 Redis、消息队列、分布式存储 Etcd</p><p><img src="https://cdn.jsdelivr.net/gh/keependeavour/picgo/img/asdaswqewq.png" alt="样例图"></p><ul><li><h4 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h4></li></ul><blockquote><ol><li>概念:存储消息的队列</li><li>关键字:存储、消息、队列</li><li>存储:存储数据</li><li>消息:某种数据结构，比如字符串、对象、JSON 字符串、二进制数据等等</li><li>队列:先进先出的数据结构</li><li>见解:消息队列是一种特殊的数据库吗？应该是可以这样理解吧</li><li>应用场景<br>在多个不同的系统，或者是应用之间实现消息的传输，也可以进行存储<br>不需要考虑传输应用的编程语言、系统、框架等。可以对应用进行解耦</li></ol></blockquote><ul><li><h4 id="消息队列的模型"><a href="#消息队列的模型" class="headerlink" title="消息队列的模型"></a>消息队列的模型</h4></li></ul><blockquote><ol><li>生产者:Producer,可以比作是快递员，发送消息的人(客户端)</li><li>消费者:Consumer,可以比作是取快递的人，接受读取消息的人(客户端)</li><li>消息:Message,可以比作是快递，就是快递员派送的快递也是给消费者传递的消息</li><li>消息队列:Queue,可以比作是快递用快递车来进行派送，存储到车里面进行派送，消息派送的队列</li></ol></blockquote><p>为什么不直接进行传输，而要用消息队列？<br>这是因为生产者不需要消费者什么时候去消息，要不要消费，生产者只需要把东西给消息队列，业务就完成了<br>这就将生产者和消费者进行了解耦，俩者互相不影响，自己完成任务即可</p><p><img src="https://cdn.jsdelivr.net/gh/keependeavour/picgo/img/mq.png" alt="过程图"></p><ul><li><h4 id="为什么使用消息队列"><a href="#为什么使用消息队列" class="headerlink" title="为什么使用消息队列"></a>为什么使用消息队列</h4><ul><li><p>异步处理</p><blockquote><ol><li>生产者发送完消息之后，就可以继续去接受其他任务，不需要等待，</li><li>消费者想什么时候去取出这个消息去消费都可以，不会产生堵塞</li></ol></blockquote></li><li><p>削峰填谷</p><blockquote><ol><li>先把用户请求，让生产者发送到消息队列中，消费者可以按照自己的需求，慢慢的去取消息</li><li>例如：某一时刻来了十万个请求，原本情况下十万个请求要直接到内部进行处理，很快系统就扛不住压力就会宕机了</li><li>解决：请求进来时候，先把消息放到消息队列中，系统按照自己最大的处理能力，去定量的取出消息恒定速率的去处理消息，从而降低了系统的压力，稳定的去处理</li></ol></blockquote></li><li><p>消息队列的优势</p><blockquote><ol><li>数据持久化：可以把消息几种的存储到硬盘里，服务器重启也不会丢失</li><li>可扩展性：可以根据需求，随时的增加或者减少节点，继续保持稳定的服务</li><li>应用解耦：可以连接各个不同语言、框架开发系统，让这些系统能够灵活的传输读取数据等等。</li></ol></blockquote></li><li><p>应用解耦的优点</p><blockquote><ol><li>最早的开发是把所有的功能都放到同一个项目中，调用多个子系统是，一个环节出错或者导致系统挂掉，系统整体就要出错</li><li>使用消息队列进行解耦。一个系统挂了就不会影响另一个系统的运行</li><li>系统挂了在后续恢复之后，仍然可以继续取出消息，重试之前的业务逻辑</li><li>生产者把消息发送到消息队列，就可以立即返回，不用同步调用所有系统，性能也会提高</li></ol></blockquote></li><li><p>订阅模式</p><blockquote><ol><li>如果一个非常大的系统要给其他子系统发送通知，最简单的方式就是一个个的去通知子系统，调用相关的系统去通知。</li><li>这样会产生很大的问题：每次更新发通知就要一个个调用，效率很低，速度还慢，还一直在占用资源。还有可能通知过程中有的调用失败没有通知到</li><li>解决方案：大的核心系统每次通知把消息只发送到一个地方，其他的系统都去订阅这个地方也就是消息队列，去读取这个消息队列的通知信息</li></ol></blockquote></li><li><p>消息队列的缺点</p><blockquote><p>俗话说没有绝对完美的设计，总归这么多好处的消息队列，也有它的缺点<br>如果要给系统引入额外的消息中间件，系统就会变得更加复杂，庞大，而且还要花费成本去维护这个中间件，额外的费用去部署<br>还要面临，消息丢失，处理的顺序，重复消费，数据的一致性，也就是分布式系统要考虑的问题</p></blockquote></li></ul></li><li><h4 id="主流的消息队列选型"><a href="#主流的消息队列选型" class="headerlink" title="主流的消息队列选型"></a>主流的消息队列选型</h4><ul><li><p>主流技术</p><blockquote><ol><li>activemq</li><li>rabbitmq</li><li>kafka</li><li>rocketmq</li><li>zeromq</li><li>pulsar</li><li>Apache Inlong (Tube)</li></ol></blockquote></li><li><p>技术的选型指标</p><blockquote><ol><li>吞吐量：IO、并发</li><li>时效性：类似延迟、消息的发送、到达时间</li><li>可用性：系统可用的比率 宕机的可能性</li><li>可靠性：消息不丢失，功能正常完成</li></ol></blockquote><p><img src="https://cdn.jsdelivr.net/gh/keependeavour/picgo/img/J80AR7%40SFY%259N_UUJ3BWGS.png" alt="选型图"></p></li></ul></li><li><h4 id="RabbitMQ-入门实战"><a href="#RabbitMQ-入门实战" class="headerlink" title="RabbitMQ 入门实战"></a>RabbitMQ 入门实战</h4><ul><li><h5 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h5><blockquote><p>生态好、好学习、易于理解、时效性强、支持很多不同语言的客户端、可扩展性、可用性都不错。<br>学习性价比高的消息队列，适用于绝大多数中小规模的分布式系统<br>官网:<a href="https://www.rabbitmq.com">https://www.rabbitmq.com</a></p></blockquote></li><li><h5 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h5><p>AMQP 协议: <a href="https://www.rabbitmq.com/tutorials/amqp-concepts.html">https://www.rabbitmq.com/tutorials/amqp-concepts.html</a><br>高级消息队列协议 (Advanced Message Queue Protocol)</p><blockquote><ol><li>生产者:发消息到某个交换机</li><li>消费者: 从某个队列中取消息</li><li>交换机 (Exchange): 负责把消息 转发到对应的队列</li><li>队列 (Queue) : 存储消息的</li><li>路由(Routes): 转发，就是怎么把消息从一个地方转到另一个地方 (比如从生产者转发到某个队列)</li></ol></blockquote><p><img src="https://cdn.jsdelivr.net/gh/keependeavour/picgo/img/C8%60%602%40JWA~YAN7GK8~V.png" alt="mq"></p><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.rabbitmq/amqp-client --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.rabbitmq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>amqp-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.17.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><h5 id="单向发送"><a href="#单向发送" class="headerlink" title="单向发送"></a>单向发送</h5><p>一个生产者给一个队列发送消息，一个消费者从这个队列中取消息 1&lt;-&gt;1</p><p><img src="https://cdn.jsdelivr.net/gh/keependeavour/picgo/img/V0XDHQDADF%60SP~RZR54V.png" alt="1-1"></p><ul><li>生产者代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.bi.spring.demomq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Producer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">QUEUE_NAME</span> <span class="operator">=</span> <span class="string">&quot;hello_mq&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        factory.setHost(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 从工厂中创建连接</span></span><br><span class="line">            <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">            <span class="comment">// 获取通信通道</span></span><br><span class="line">            <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line">            <span class="comment">// 声明一个队列</span></span><br><span class="line">            channel.queueDeclare(QUEUE_NAME, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;Hello,World&quot;</span>;</span><br><span class="line">            <span class="comment">// 发送消息</span></span><br><span class="line">            channel.basicPublish(<span class="string">&quot;&quot;</span>, QUEUE_NAME, <span class="literal">null</span>, message.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">            <span class="comment">// 打印信息</span></span><br><span class="line">            System.out.println(<span class="string">&quot;Producer send message: &quot;</span> + message);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;创建链接失败！E:&quot;</span> + e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Channel 频道：可以理解为消息队列的 Client（比如 jdbcClient，redisClient），提供了和消息队列简历 server 建立的通信的传输方法为了复用链接，提高传输效率。程序通过操作 Channel 来操作 rabbitmq（收发消息操作）</p><p>创建消息队列的参数</p><blockquote><ol><li>queueName:消息队列名称 同名称和参数的消息队列只能创建一次</li><li>durabale:消息队列重启后，消息是否丢失</li><li>exclusive:是否只允许当前创建的消息队列的连接操作消息队列</li><li>autoDelete:没有任何东西使用消息队列后，是否要删除队列</li></ol></blockquote><ul><li>消费者代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bi.spring.demomq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Consumer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">QUEUE_NAME</span> <span class="operator">=</span> <span class="string">&quot;hello_mq&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        factory.setHost(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 从工厂中创建连接</span></span><br><span class="line">            <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">            <span class="comment">// 获取通信通道</span></span><br><span class="line">            <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line">            <span class="comment">// 声明一个队列 没有就会创建 有的话就不再创建</span></span><br><span class="line">            channel.queueDeclare(QUEUE_NAME, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;Consumer waiting for producer to send message&quot;</span>);</span><br><span class="line">            <span class="comment">// 定义如何处理消息 这个是函数式接口</span></span><br><span class="line">            <span class="type">DeliverCallback</span> <span class="variable">deliverCallback</span> <span class="operator">=</span> (consumerTag, delivery) -&gt; &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(delivery.getBody(), StandardCharsets.UTF_8);</span><br><span class="line">                System.out.println(<span class="string">&quot;Consumer received message from producer,message:&quot;</span> + message);</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="comment">// 消费消息</span></span><br><span class="line">            channel.basicConsume(QUEUE_NAME, <span class="literal">true</span>, deliverCallback, consumer -&gt; &#123;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;创建链接失败！E:&quot;</span> + e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h5 id="多消费者"><a href="#多消费者" class="headerlink" title="多消费者"></a>多消费者</h5><p>场景：多个系统同时去接受并处理任务，尤其是每个系统的处理能力有限<br>一个生产者给一个队列发消息，多个消费者从这个队列取消息。1&lt;-&gt;n</p><p><img src="https://cdn.jsdelivr.net/gh/keependeavour/picgo/img/O%5D~70%5DN%5BPJGDJH1IX~_IW56.png" alt="1-n"></p><ul><li>队列持久化</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">channel.queueDeclare(TASK_QUEUE_NAME, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br></pre></td></tr></table></figure><ul><li>消息持久化<br>指定 MessageProperties.PERSISTENT_TEXT_PLAIN 参数</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">channel.basicPublish(<span class="string">&quot;&quot;</span>, QUEUE_NAME, MessageProperties.PERSISTENT_TEXT_PLAIN,</span><br><span class="line">message.getBytes(StandardCharsets.UTF_8));</span><br></pre></td></tr></table></figure><ul><li>生产者代码</li></ul><p>使用 Scanner 来模拟多次输入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bi.spring.demomq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.MessageProperties;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MultiProducer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">QUEUE_NAME</span> <span class="operator">=</span> <span class="string">&quot;multi_queue&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        factory.setHost(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 从工厂中创建连接</span></span><br><span class="line">            <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">            <span class="comment">// 获取通信通道</span></span><br><span class="line">            <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line">            <span class="comment">// 声明一个队列</span></span><br><span class="line">            channel.queueDeclare(QUEUE_NAME, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">            <span class="comment">// 声明一个输入对象</span></span><br><span class="line">            <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="comment">// 输入信息</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">                <span class="comment">// 发送消息</span></span><br><span class="line">                channel.basicPublish(<span class="string">&quot;&quot;</span>, QUEUE_NAME, MessageProperties.PERSISTENT_TEXT_PLAIN, message.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">                <span class="comment">// 打印信息</span></span><br><span class="line">                System.out.println(<span class="string">&quot;Producer send message: &quot;</span> + message);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;创建链接失败！E:&quot;</span> + e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>消费者代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bi.spring.demomq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.DeliverCallback;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MultiConsumer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">QUEUE_NAME</span> <span class="operator">=</span> <span class="string">&quot;multi_queue&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">            factory.setHost(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">            <span class="comment">// 从工厂中创建连接</span></span><br><span class="line">            <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">            <span class="comment">// 循环创建</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">                <span class="comment">// 获取通信通道</span></span><br><span class="line">                <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line">                <span class="comment">// 声明一个队列 没有就会创建 有的话就不再创建</span></span><br><span class="line">                channel.queueDeclare(QUEUE_NAME, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;Consumer waiting for producer to send message&quot;</span>);</span><br><span class="line">                <span class="comment">// 定义如何处理消息 这个是函数式接口</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">finalI1</span> <span class="operator">=</span> i;</span><br><span class="line">                <span class="type">DeliverCallback</span> <span class="variable">deliverCallback</span> <span class="operator">=</span> (consumerTag, delivery) -&gt; &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(delivery.getBody(), StandardCharsets.UTF_8);</span><br><span class="line">                        System.out.println(<span class="string">&quot;Consumer received message from producer,message:&quot;</span> + message + <span class="string">&quot;-编号&quot;</span> + finalI1);</span><br><span class="line">                        <span class="comment">// 确认消息</span></span><br><span class="line">                        channel.basicAck(delivery.getEnvelope().getDeliveryTag(), <span class="literal">false</span>);</span><br><span class="line">                        <span class="comment">// 模拟处理能力</span></span><br><span class="line">                        Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                        <span class="comment">// 消息失败策略</span></span><br><span class="line">                        channel.basicNack(delivery.getEnvelope().getDeliveryTag(), <span class="literal">false</span>, <span class="literal">false</span>);</span><br><span class="line">                    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;Consumer is Done!&quot;</span>);</span><br><span class="line">                        <span class="comment">// 如果没有失败最终都要确认消息</span></span><br><span class="line">                        channel.basicAck(delivery.getEnvelope().getDeliveryTag(), <span class="literal">false</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;;</span><br><span class="line">                <span class="comment">// 消费消息</span></span><br><span class="line">                channel.basicConsume(QUEUE_NAME, <span class="literal">true</span>, deliverCallback, consumer -&gt; &#123;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;创建链接失败！E:&quot;</span> + e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制单个消费的处理任务的积压数，每个消费者最多同时处理的任务数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">channel.basicQos(<span class="number">1</span>);</span><br></pre></td></tr></table></figure></li><li><h5 id="交换机"><a href="#交换机" class="headerlink" title="交换机"></a>交换机</h5><p>一个生产者给多个队列发送消息，一个生产者 -&gt; 多个队列<br>交换机的作用：提供消息转发功能，类似与网络路由器<br>问题：怎么把消息转发到不同的队列上，好让消费者从不同的队列消费</p><p>绑定：交换机可以与队列进行关联，通过路由 key 进行绑定</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">channel.queueBind(QUEUE_NAME,EXCHANGE_NAME,<span class="string">&quot;key&quot;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/keependeavour/picgo/img/XAM629Q%7BH%5BYMV%25B~%60_JG_30.png" alt="交换机"></p><ul><li><p>fanout 扇出、广播</p><p>特点：消息会被转发到所有绑定到该交换机的队列<br>场景：很适用于发布订阅的场景。比如写日志，可以多个系统间共享<br>注意点：生产者和消费者需要绑定同一个交换机，并且要先创建队列，才能绑定</p><p><img src="https://cdn.jsdelivr.net/gh/keependeavour/picgo/img/20230906221402.png" alt="fanout"></p><ul><li>生产者代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bi.spring.demomq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.MessageProperties;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FanoutProducer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">EXCHANGE_NAME</span> <span class="operator">=</span> <span class="string">&quot;fanout-exchange&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        factory.setHost(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 从工厂中创建连接</span></span><br><span class="line">            <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">            <span class="comment">// 获取通信通道</span></span><br><span class="line">            <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line">            <span class="comment">// 声明一个交换机</span></span><br><span class="line">            channel.exchangeDeclare(EXCHANGE_NAME, <span class="string">&quot;fanout&quot;</span>);</span><br><span class="line">            <span class="comment">// 声明一个输入对象</span></span><br><span class="line">            <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">            <span class="keyword">while</span> (scanner.hasNext()) &#123;</span><br><span class="line">                <span class="comment">// 输入信息</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">                <span class="comment">// 发送消息</span></span><br><span class="line">                channel.basicPublish(EXCHANGE_NAME, <span class="string">&quot;&quot;</span>, MessageProperties.PERSISTENT_TEXT_PLAIN, message.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">                <span class="comment">// 打印信息</span></span><br><span class="line">                System.out.println(<span class="string">&quot;Producer send message: &quot;</span> + message);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;创建链接失败！E:&quot;</span> + e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>消费者代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bi.spring.demomq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.DeliverCallback;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FanoutConsumer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">EXCHANGE_NAME</span> <span class="operator">=</span> <span class="string">&quot;fanout-exchange&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">QUEUE_NAME1</span> <span class="operator">=</span> <span class="string">&quot;fanout-queue-one&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">QUEUE_NAME2</span> <span class="operator">=</span> <span class="string">&quot;fanout-queue-two&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">            factory.setHost(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">            <span class="comment">// 从工厂中创建连接</span></span><br><span class="line">            <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">            <span class="comment">// 创建频道</span></span><br><span class="line">            <span class="type">Channel</span> <span class="variable">channel1</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line">            <span class="type">Channel</span> <span class="variable">channel2</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line">            <span class="comment">// 声明交换机</span></span><br><span class="line">            channel1.exchangeDeclare(EXCHANGE_NAME, <span class="string">&quot;fanout&quot;</span>);</span><br><span class="line">            <span class="comment">// 创建队列 1</span></span><br><span class="line">            channel1.queueDeclare(QUEUE_NAME1, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">            channel1.queueBind(QUEUE_NAME1, EXCHANGE_NAME, <span class="string">&quot;&quot;</span>);</span><br><span class="line">            <span class="comment">// 创建队列2</span></span><br><span class="line">            channel2.queueDeclare(QUEUE_NAME2, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">            channel2.queueBind(QUEUE_NAME2, EXCHANGE_NAME, <span class="string">&quot;&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;Consumer waiting for producer to send message&quot;</span>);</span><br><span class="line">            <span class="comment">// 声明消息处理回调函数1</span></span><br><span class="line">            <span class="type">DeliverCallback</span> <span class="variable">deliverCallback1</span> <span class="operator">=</span> (consumerTag, delivery) -&gt; &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(delivery.getBody(), StandardCharsets.UTF_8);</span><br><span class="line">                System.out.println(<span class="string">&quot;[1] Received &quot;</span> + message);</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="comment">// 声明消息处理回调函数2</span></span><br><span class="line">            <span class="type">DeliverCallback</span> <span class="variable">deliverCallback2</span> <span class="operator">=</span> (consumerTag, delivery) -&gt; &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(delivery.getBody(), StandardCharsets.UTF_8);</span><br><span class="line">                System.out.println(<span class="string">&quot;[2] Received &quot;</span> + message);</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 开启消费监听1</span></span><br><span class="line">            channel1.basicConsume(QUEUE_NAME1, <span class="literal">true</span>, deliverCallback1, consumerTag -&gt; &#123;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="comment">// 开启消费监听2</span></span><br><span class="line">            channel2.basicConsume(QUEUE_NAME2, <span class="literal">true</span>, deliverCallback2, consumerTag -&gt; &#123;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;创建链接失败！E:&quot;</span> + e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>效果:所有的消费者都能够接收到消息</p></li><li><p>direct 交给特定的队列</p><p>routingkey：可以让交换机和队列进行关联，可以指定让交换机给那个队列发送消息，路由键，控制消息要给那个队列</p><p>特点：消息会根据路由键转发到指定的队列<br>场景：特定的消息只交给特定的系统来处理<br>绑定关系：完全匹配字符串</p><p><img src="https://cdn.jsdelivr.net/gh/keependeavour/picgo/img/20230906222840.png" alt="direct"></p><p>多个队列可以绑定同一个路由键</p><p><img src="https://cdn.jsdelivr.net/gh/keependeavour/picgo/img/20230906223039.png" alt="directT"></p><ul><li>生产者代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bi.spring.demomq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.MessageProperties;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DirectProducer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">EXCHANGE_NAME</span> <span class="operator">=</span> <span class="string">&quot;direct-exchange&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        factory.setHost(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 从工厂中创建连接</span></span><br><span class="line">            <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">            <span class="comment">// 获取通信通道</span></span><br><span class="line">            <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line">            <span class="comment">// 声明一个交换机</span></span><br><span class="line">            channel.exchangeDeclare(EXCHANGE_NAME, <span class="string">&quot;direct&quot;</span>);</span><br><span class="line">            <span class="comment">// 声明一个输入对象</span></span><br><span class="line">            <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">            <span class="keyword">while</span> (scanner.hasNext()) &#123;</span><br><span class="line">                <span class="comment">// 输入信息</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">userInput</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">                String[] s = userInput.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">                <span class="comment">// 消息</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> s[<span class="number">0</span>];</span><br><span class="line">                <span class="comment">// 路由键</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">routingKey</span> <span class="operator">=</span> s[<span class="number">1</span>];</span><br><span class="line">                <span class="comment">// 发送消息</span></span><br><span class="line">                channel.basicPublish(EXCHANGE_NAME, routingKey, MessageProperties.PERSISTENT_TEXT_PLAIN, message.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">                <span class="comment">// 打印信息</span></span><br><span class="line">                System.out.println(<span class="string">&quot;Producer send message: &quot;</span> + message + <span class="string">&quot;- routingKey&quot;</span> + routingKey);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;创建链接失败！E:&quot;</span> + e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>消费者代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bi.spring.demomq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.DeliverCallback;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DirectConsumer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">EXCHANGE_NAME</span> <span class="operator">=</span> <span class="string">&quot;direct-exchange&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">QUEUE_NAME1</span> <span class="operator">=</span> <span class="string">&quot;direct-queue-one&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">QUEUE_NAME2</span> <span class="operator">=</span> <span class="string">&quot;direct-queue-two&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">            factory.setHost(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">            <span class="comment">// 从工厂中创建连接</span></span><br><span class="line">            <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">            <span class="comment">// 创建频道</span></span><br><span class="line">            <span class="type">Channel</span> <span class="variable">channel1</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line">            <span class="type">Channel</span> <span class="variable">channel2</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line">            <span class="comment">// 声明交换机</span></span><br><span class="line">            channel1.exchangeDeclare(EXCHANGE_NAME, <span class="string">&quot;fanout&quot;</span>);</span><br><span class="line">            <span class="comment">// 创建队列 1</span></span><br><span class="line">            channel1.queueDeclare(QUEUE_NAME1, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">            <span class="comment">// 绑定路由键1</span></span><br><span class="line">            channel1.queueBind(QUEUE_NAME1, EXCHANGE_NAME, <span class="string">&quot;routing_key_one&quot;</span>);</span><br><span class="line">            <span class="comment">// 创建队列2</span></span><br><span class="line">            channel2.queueDeclare(QUEUE_NAME2, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">            <span class="comment">// 绑定路由键2</span></span><br><span class="line">            channel2.queueBind(QUEUE_NAME2, EXCHANGE_NAME, <span class="string">&quot;routing_key_two&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;Consumer waiting for producer to send message&quot;</span>);</span><br><span class="line">            <span class="comment">// 声明消息处理回调函数1</span></span><br><span class="line">            <span class="type">DeliverCallback</span> <span class="variable">deliverCallback1</span> <span class="operator">=</span> (consumerTag, delivery) -&gt; &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(delivery.getBody(), StandardCharsets.UTF_8);</span><br><span class="line">                System.out.println(<span class="string">&quot;[1] Received &quot;</span> + message);</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="comment">// 声明消息处理回调函数2</span></span><br><span class="line">            <span class="type">DeliverCallback</span> <span class="variable">deliverCallback2</span> <span class="operator">=</span> (consumerTag, delivery) -&gt; &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(delivery.getBody(), StandardCharsets.UTF_8);</span><br><span class="line">                System.out.println(<span class="string">&quot;[2] Received &quot;</span> + message);</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 开启消费监听1</span></span><br><span class="line">            channel1.basicConsume(QUEUE_NAME1, <span class="literal">true</span>, deliverCallback1, consumerTag -&gt; &#123;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="comment">// 开启消费监听2</span></span><br><span class="line">            channel2.basicConsume(QUEUE_NAME2, <span class="literal">true</span>, deliverCallback2, consumerTag -&gt; &#123;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;创建链接失败！E:&quot;</span> + e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>topic 会模糊发送特定的队列</p><p>特点:消息会根据一个模糊的路由键转发到指定的队列<br>场景:特定的一类的消息可以交给特定的一类系统来处理<br>绑定关系:可以模糊匹配多个绑定</p><blockquote><ol><li>*：匹配一个单词，比如 *.orange，可匹配项有 a.orange、b.orange 缺点就是必须要有匹配项不然匹配不到</li><li>#: 匹配零个或者多个单词，比如 a.#，可匹配项有 a.a、a.b、a.a.a 也可以不匹配，缺点就是太过灵活</li></ol></blockquote><p><img src="https://cdn.jsdelivr.net/gh/keependeavour/picgo/img/20230906225021.png" alt="topic"></p><p>示例图<br><img src="https://cdn.jsdelivr.net/gh/keependeavour/picgo/img/20230906225254.png" alt=""></p><ul><li>生产者代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bi.spring.demomq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.MessageProperties;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TopicProducer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">EXCHANGE_NAME</span> <span class="operator">=</span> <span class="string">&quot;topic-exchange&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        factory.setHost(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 从工厂中创建连接</span></span><br><span class="line">            <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">            <span class="comment">// 获取通信通道</span></span><br><span class="line">            <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line">            <span class="comment">// 声明一个交换机</span></span><br><span class="line">            channel.exchangeDeclare(EXCHANGE_NAME, <span class="string">&quot;topic&quot;</span>);</span><br><span class="line">            <span class="comment">// 声明一个输入对象</span></span><br><span class="line">            <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">            <span class="keyword">while</span> (scanner.hasNext()) &#123;</span><br><span class="line">                <span class="comment">// 输入信息</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">userInput</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">                String[] s = userInput.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">                <span class="keyword">if</span> (s.length &lt; <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 消息</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> s[<span class="number">0</span>];</span><br><span class="line">                <span class="comment">// 路由键</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">routingKey</span> <span class="operator">=</span> s[<span class="number">1</span>];</span><br><span class="line">                <span class="comment">// 发送消息</span></span><br><span class="line">                channel.basicPublish(EXCHANGE_NAME, routingKey, MessageProperties.PERSISTENT_TEXT_PLAIN, message.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">                <span class="comment">// 打印信息</span></span><br><span class="line">                System.out.println(<span class="string">&quot;Producer send message: &quot;</span> + message + <span class="string">&quot;- routingKey&quot;</span> + routingKey);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;创建链接失败！E:&quot;</span> + e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>消费者代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.bi.spring.demomq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.DeliverCallback;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TopicConsumer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">EXCHANGE_NAME</span> <span class="operator">=</span> <span class="string">&quot;topic-exchange&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">QUEUE_NAME1</span> <span class="operator">=</span> <span class="string">&quot;topic-queue-one&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">QUEUE_NAME2</span> <span class="operator">=</span> <span class="string">&quot;topic-queue-two&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">QUEUE_NAME3</span> <span class="operator">=</span> <span class="string">&quot;topic-queue-three&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">            factory.setHost(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">            <span class="comment">// 从工厂中创建连接</span></span><br><span class="line">            <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">            <span class="comment">// 创建频道</span></span><br><span class="line">            <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line">            <span class="comment">// 声明交换机</span></span><br><span class="line">            channel.exchangeDeclare(EXCHANGE_NAME, <span class="string">&quot;topic&quot;</span>);</span><br><span class="line">            <span class="comment">// 创建队列 1</span></span><br><span class="line">            channel.queueDeclare(QUEUE_NAME1, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">            <span class="comment">// 绑定路由键1</span></span><br><span class="line">            channel.queueBind(QUEUE_NAME1, EXCHANGE_NAME, <span class="string">&quot;#.队列1.#&quot;</span>);</span><br><span class="line">            <span class="comment">// 创建队列2</span></span><br><span class="line">            channel.queueDeclare(QUEUE_NAME2, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">            <span class="comment">// 绑定路由键2</span></span><br><span class="line">            channel.queueBind(QUEUE_NAME2, EXCHANGE_NAME, <span class="string">&quot;#.队列2.#&quot;</span>);</span><br><span class="line">            <span class="comment">// 创建队列3</span></span><br><span class="line">            channel.queueDeclare(QUEUE_NAME3, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">            <span class="comment">// 绑定路由键3</span></span><br><span class="line">            channel.queueBind(QUEUE_NAME3, EXCHANGE_NAME, <span class="string">&quot;#.队列3.#&quot;</span>);</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;Consumer waiting for producer to send message&quot;</span>);</span><br><span class="line">            <span class="comment">// 声明消息处理回调函数1</span></span><br><span class="line">            <span class="type">DeliverCallback</span> <span class="variable">deliverCallback1</span> <span class="operator">=</span> (consumerTag, delivery) -&gt; &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(delivery.getBody(), StandardCharsets.UTF_8);</span><br><span class="line">                System.out.println(<span class="string">&quot;[1] Received &quot;</span> + message);</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="comment">// 声明消息处理回调函数2</span></span><br><span class="line">            <span class="type">DeliverCallback</span> <span class="variable">deliverCallback2</span> <span class="operator">=</span> (consumerTag, delivery) -&gt; &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(delivery.getBody(), StandardCharsets.UTF_8);</span><br><span class="line">                System.out.println(<span class="string">&quot;[2] Received &quot;</span> + message);</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="comment">// 声明消息处理回调函数2</span></span><br><span class="line">            <span class="type">DeliverCallback</span> <span class="variable">deliverCallback3</span> <span class="operator">=</span> (consumerTag, delivery) -&gt; &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(delivery.getBody(), StandardCharsets.UTF_8);</span><br><span class="line">                System.out.println(<span class="string">&quot;[3] Received &quot;</span> + message);</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 开启消费监听1</span></span><br><span class="line">            channel.basicConsume(QUEUE_NAME1, <span class="literal">true</span>, deliverCallback1, consumerTag -&gt; &#123;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="comment">// 开启消费监听2</span></span><br><span class="line">            channel.basicConsume(QUEUE_NAME2, <span class="literal">true</span>, deliverCallback2, consumerTag -&gt; &#123;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="comment">// 开启消费监听3</span></span><br><span class="line">            channel.basicConsume(QUEUE_NAME3, <span class="literal">true</span>, deliverCallback3, consumerTag -&gt; &#123;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;创建链接失败！E:&quot;</span> + e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>headers 了解即可</p><p>类似主题和直接交换机，可以根据 headers 中的内容来指定发送到那个队列<br>由于性能较差且复杂 不作使用</p></li></ul></li><li><h5 id="核心特性"><a href="#核心特性" class="headerlink" title="核心特性"></a>核心特性</h5><ul><li><p>消息过期机制</p><p>可以给每条消息指定一个有效期，一段时间内未被消费者处理，就过期了</p><p>使用场景：清理过期数据、模拟延迟队列的实现，专门让某个程序去处理过期请求</p><p>给队列中的所有消息指定过期时间</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建队列，指定消息过期参数</span></span><br><span class="line">Map&lt;String,Object&gt; args = <span class="keyword">new</span> <span class="title class_">HasMap</span>&lt;&gt;();</span><br><span class="line">args.put(<span class="string">&quot;x-message-ttl&quot;</span>,<span class="number">5000</span>);</span><br><span class="line"><span class="comment">// args指定参数</span></span><br><span class="line">channel.queueDeclare(QUEUE_NAME,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">false</span>,args);</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/keependeavour/picgo/img/20230906230730.png" alt=""></p><p>如果在过期时间内，还未收到消费者来取消息，消息才会过期<br>如果消息已经接收到，但是没有确认，是不会过期的</p><blockquote><p>如果消息处于待消费状态并且到达过期时间后，消息将会被标记为过期。但是，如果消息已经被消费者消费，并且正在被处理中，即使过期时间到了，消息依旧会被正常处理</p></blockquote><p>消费者代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bi.spring.demomq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.DeliverCallback;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TtlConsumer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">QUEUE_NAME</span> <span class="operator">=</span> <span class="string">&quot;ttl_queue&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        factory.setHost(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 从工厂中创建连接</span></span><br><span class="line">            <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">            <span class="comment">// 获取通信通道</span></span><br><span class="line">            <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line">            Map&lt;String, Object&gt; canshu = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">            canshu.put(<span class="string">&quot;x-message-ttl&quot;</span>, <span class="number">5000</span>);</span><br><span class="line">            <span class="comment">// 声明一个队列 没有就会创建 有的话就不再创建 放入参数</span></span><br><span class="line">            channel.queueDeclare(QUEUE_NAME, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, canshu);</span><br><span class="line">            System.out.println(<span class="string">&quot;Consumer waiting for producer to send message&quot;</span>);</span><br><span class="line">            <span class="comment">// 定义如何处理消息 这个是函数式接口</span></span><br><span class="line">            <span class="type">DeliverCallback</span> <span class="variable">deliverCallback</span> <span class="operator">=</span> (consumerTag, delivery) -&gt; &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(delivery.getBody(), StandardCharsets.UTF_8);</span><br><span class="line">                System.out.println(<span class="string">&quot;Consumer received message from producer,message:&quot;</span> + message);</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="comment">// 消费消息</span></span><br><span class="line">            channel.basicConsume(QUEUE_NAME, <span class="literal">true</span>, deliverCallback, consumer -&gt; &#123;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;创建链接失败！E:&quot;</span> + e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>生产者代码就正常取出消息消费即可，不作代码演示。</p></li><li><p>给某条消息指定过期时间</p><p>语法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">AMQP.<span class="type">BasicProperties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AMQP</span>.BasicProperties().builder().expiration(<span class="string">&quot;1000&quot;</span>).build();</span><br><span class="line">   channel.basicPublish(<span class="string">&quot;&quot;</span>, QUEUE_NAME, properties, message.getBytes(StandardCharsets.UTF_8));</span><br></pre></td></tr></table></figure></li><li><p>消息确认机制</p><p>为了保证消息成功被消费，rabbitMQ 提供了消息确认机制，当消费者接收到消息后，要给予反馈：</p><blockquote><p>ack:消费成功<br>nack:消费失败<br>reject:拒绝</p></blockquote><p>只有告诉 rabbitMQ 服务器消费成功，服务器才会放心的移除消息<br>支持配置 autoack，会自动执行 ack 命令，接收到消息就立刻成功<br>一般情况下 建议 autoack 设置为 false 要根据实际情况，去手动确认</p><p>指定确认某条消息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">channel.basicAck(delivery.getEnvelope().getDeliveryTag(),<span class="literal">false</span>);</span><br></pre></td></tr></table></figure><p>指定拒绝某条消息<br>第三个参数表示是否要重试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">channel.basicNack(delivery.getEnvelope().getDeliveryTag(),<span class="literal">false</span>,<span class="literal">false</span>);</span><br></pre></td></tr></table></figure></li><li><p>死信队列</p><p>官方文档: <a href="https://www.rabbitmq.com/dlx.html">https://www.rabbitmq.com/dlx.html</a></p><p>为了保证消息的可靠性，比如每条消息都成功消费，需要提供一个容错机制，即: 失败的消息怎么处理?</p><p>死信: 过期的消息、拒收的消息、消息队列满了、处理失败的消息的统称死信队列:专门处理死信的队列</p><p>死信队列:专门处理死信的队列(注意，它就是一个普队列，只不过是专门用来处理死信的，你甚至可以理解这个队列的名称叫“死信队列”)</p><p>死信交换机:专门给死信队列转发消息的交换机(注意，它就是一个普通交换机，只不过是专门给死信队列发消息而已，理解为这个交换机的名称就叫 “死信交换机”)。也存在路由绑定</p><p>死信可以通过死信交换机绑定到死信队列。</p><p><img src="https://cdn.jsdelivr.net/gh/keependeavour/picgo/img/20230906233954.png" alt=""></p><ul><li><p>1.创建死信交换机并绑定关系</p></li><li><p>2.给失败之后需要容错处理的消息队列绑定死信交换机</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 指定死信队列参数</span></span><br><span class="line">Map&lt;String，Object&gt; args = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"><span class="comment">// 要绑定到哪个交换机 等于额外绑定一个死信队列 处理特殊情况</span></span><br><span class="line">args.put(<span class="string">&quot;x-dead-letter-exchange&quot;</span>，DEAD EXCHANGE NAME);</span><br><span class="line"><span class="comment">// 指定死信要转发到哪个死信队列</span></span><br><span class="line">args.put(<span class="string">&quot;x-dead-letter-routing-key&quot;</span>，<span class="string">&quot;sixin_key&quot;</span>);</span><br><span class="line"><span class="comment">// 创建队列，随机分配一个队列名称</span></span><br><span class="line"><span class="type">String</span> <span class="variable">queueName</span> <span class="operator">=</span> <span class="string">&quot;sixi_queue&quot;</span>;</span><br><span class="line">channel.queueDeclare(queueName， <span class="literal">true</span>， <span class="literal">false</span>, <span class="literal">false</span>, args);</span><br><span class="line">channel.queueBind(queueName， EXCHANGE NAME，<span class="string">&quot;sixinkey_1&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li>3.可以给要容错的队列指定死信之后的转发规则，死信应该再换发到那个死信队列</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">args.put(<span class="string">&quot;x-dead-letter-routing-key&quot;</span>,<span class="string">&quot;sixin_de_queue&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li>4.可以通过程序来读取死信队列中的消息，从而进行处理</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">   <span class="comment">// 获取通信通道</span></span><br><span class="line">   <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line">   <span class="comment">// 声明死信交换机</span></span><br><span class="line">   channel.exchangeDeclare(DEAD_EXCHANGE_NAME, <span class="string">&quot;direct&quot;</span>);</span><br><span class="line">   <span class="comment">// 创建死信队列</span></span><br><span class="line">   channel.queueDeclare(DEAD_QUEUE_NAME1, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">   <span class="comment">// 将死信队列绑定到死信交换机并授予routingKey</span></span><br><span class="line">   channel.queueBind(DEAD_QUEUE_NAME1, DEAD_EXCHANGE_NAME, <span class="string">&quot;routing-key-dead-queue-one&quot;</span>);</span><br><span class="line">   <span class="comment">// 创建死信队列2</span></span><br><span class="line">   channel.queueDeclare(DEAD_QUEUE_NAME2, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">   <span class="comment">// 将死信队列绑定到死信交换机并授予routingKey 2</span></span><br><span class="line">   channel.queueBind(DEAD_QUEUE_NAME2, DEAD_EXCHANGE_NAME, <span class="string">&quot;routing-key-dead-queue-two&quot;</span>);</span><br><span class="line">   <span class="comment">// 开启死信队列的消费监听 1</span></span><br><span class="line">   <span class="type">DeliverCallback</span> <span class="variable">deliverCallback1</span> <span class="operator">=</span> (consumerTag, delivery) -&gt; &#123;</span><br><span class="line">       <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(delivery.getBody(), StandardCharsets.UTF_8);</span><br><span class="line">       <span class="comment">// 拒绝消息</span></span><br><span class="line">       channel.basicNack(delivery.getEnvelope().getDeliveryTag(), <span class="literal">false</span>, <span class="literal">false</span>);</span><br><span class="line">       <span class="comment">// 打印接收消息</span></span><br><span class="line">       System.out.println(<span class="string">&quot;[1] Dead receive message:&quot;</span> + message + <span class="string">&quot;-key:&quot;</span> + delivery.getEnvelope().getRoutingKey());</span><br><span class="line">   &#125;;</span><br><span class="line">   channel.basicConsume(DEAD_QUEUE_NAME1, <span class="literal">false</span>, deliverCallback1, consumerTag -&gt; &#123;</span><br><span class="line">   &#125;);</span><br><span class="line">   <span class="comment">// 开启死信队列的消费监听 2</span></span><br><span class="line">   <span class="type">DeliverCallback</span> <span class="variable">deliverCallback2</span> <span class="operator">=</span> (consumerTag, delivery) -&gt; &#123;</span><br><span class="line">       <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(delivery.getBody(), StandardCharsets.UTF_8);</span><br><span class="line">       <span class="comment">// 拒绝消息</span></span><br><span class="line">       channel.basicNack(delivery.getEnvelope().getDeliveryTag(), <span class="literal">false</span>, <span class="literal">false</span>);</span><br><span class="line">       <span class="comment">// 打印接收消息</span></span><br><span class="line">       System.out.println(<span class="string">&quot;[2] Dead receive message:&quot;</span> + message + <span class="string">&quot;-key:&quot;</span> + delivery.getEnvelope().getRoutingKey());</span><br><span class="line">   &#125;;</span><br><span class="line">   channel.basicConsume(DEAD_QUEUE_NAME2, <span class="literal">false</span>, deliverCallback2, consumerTag -&gt; &#123;</span><br><span class="line">   &#125;);</span><br></pre></td></tr></table></figure><ul><li>5.生产者代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bi.spring.demomq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DlxDirectProducer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DEAD_EXCHANGE_NAME</span> <span class="operator">=</span> <span class="string">&quot;dlx-direct-exchange&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DEAD_QUEUE_NAME1</span> <span class="operator">=</span> <span class="string">&quot;dlx-one-queue&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DEAD_QUEUE_NAME2</span> <span class="operator">=</span> <span class="string">&quot;dlx-two-queue&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">WORK_EXCHANGE_NAME</span> <span class="operator">=</span> <span class="string">&quot;work-direct-exchange&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        factory.setHost(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 从工厂中创建连接</span></span><br><span class="line">            <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">            <span class="comment">// 获取通信通道</span></span><br><span class="line">            <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line">            <span class="comment">// 声明死信交换机</span></span><br><span class="line">            channel.exchangeDeclare(DEAD_EXCHANGE_NAME, <span class="string">&quot;direct&quot;</span>);</span><br><span class="line">            <span class="comment">// 创建死信队列</span></span><br><span class="line">            channel.queueDeclare(DEAD_QUEUE_NAME1, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">            <span class="comment">// 将死信队列绑定到死信交换机并授予routingKey</span></span><br><span class="line">            channel.queueBind(DEAD_QUEUE_NAME1, DEAD_EXCHANGE_NAME, <span class="string">&quot;routing-key-dead-queue-one&quot;</span>);</span><br><span class="line">            <span class="comment">// 创建死信队列2</span></span><br><span class="line">            channel.queueDeclare(DEAD_QUEUE_NAME2, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">            <span class="comment">// 将死信队列绑定到死信交换机并授予routingKey 2</span></span><br><span class="line">            channel.queueBind(DEAD_QUEUE_NAME2, DEAD_EXCHANGE_NAME, <span class="string">&quot;routing-key-dead-queue-two&quot;</span>);</span><br><span class="line">            <span class="comment">// 开启死信队列的消费监听 1</span></span><br><span class="line">            <span class="type">DeliverCallback</span> <span class="variable">deliverCallback1</span> <span class="operator">=</span> (consumerTag, delivery) -&gt; &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(delivery.getBody(), StandardCharsets.UTF_8);</span><br><span class="line">                <span class="comment">// 拒绝消息</span></span><br><span class="line">                channel.basicNack(delivery.getEnvelope().getDeliveryTag(), <span class="literal">false</span>, <span class="literal">false</span>);</span><br><span class="line">                <span class="comment">// 打印接收消息</span></span><br><span class="line">                System.out.println(<span class="string">&quot;[1] Dead receive message:&quot;</span> + message + <span class="string">&quot;-key:&quot;</span> + delivery.getEnvelope().getRoutingKey());</span><br><span class="line">            &#125;;</span><br><span class="line">            channel.basicConsume(DEAD_QUEUE_NAME1, <span class="literal">false</span>, deliverCallback1, consumerTag -&gt; &#123;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="comment">// 开启死信队列的消费监听 2</span></span><br><span class="line">            <span class="type">DeliverCallback</span> <span class="variable">deliverCallback2</span> <span class="operator">=</span> (consumerTag, delivery) -&gt; &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(delivery.getBody(), StandardCharsets.UTF_8);</span><br><span class="line">                <span class="comment">// 拒绝消息</span></span><br><span class="line">                channel.basicNack(delivery.getEnvelope().getDeliveryTag(), <span class="literal">false</span>, <span class="literal">false</span>);</span><br><span class="line">                <span class="comment">// 打印接收消息</span></span><br><span class="line">                System.out.println(<span class="string">&quot;[2] Dead receive message:&quot;</span> + message + <span class="string">&quot;-key:&quot;</span> + delivery.getEnvelope().getRoutingKey());</span><br><span class="line">            &#125;;</span><br><span class="line">            channel.basicConsume(DEAD_QUEUE_NAME2, <span class="literal">false</span>, deliverCallback2, consumerTag -&gt; &#123;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="comment">// 生产消息</span></span><br><span class="line">            <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">            <span class="keyword">while</span> (scanner.hasNext()) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">userInput</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">                String[] s = userInput.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">                <span class="keyword">if</span> (s.length &lt; <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> s[<span class="number">0</span>];</span><br><span class="line">                <span class="type">String</span> <span class="variable">routingKey</span> <span class="operator">=</span> s[<span class="number">1</span>];</span><br><span class="line">                channel.basicPublish(WORK_EXCHANGE_NAME, routingKey, <span class="literal">null</span>, message.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">                System.out.println(<span class="string">&quot;[x] Send message:&quot;</span> + message + <span class="string">&quot; with routingKey:&quot;</span> + routingKey);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;创建链接失败！E:&quot;</span> + e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>6.消费者代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bi.spring.demomq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.DeliverCallback;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DlxDirectConsumer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DEAD_EXCHANGE_NAME</span> <span class="operator">=</span> <span class="string">&quot;dlx-direct-exchange&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">WORK_QUEUE_NAME1</span> <span class="operator">=</span> <span class="string">&quot;work-dlx-one-queue&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">WORK_QUEUE_NAME2</span> <span class="operator">=</span> <span class="string">&quot;work-dlx-two-queue&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">WORK_EXCHANGE_NAME</span> <span class="operator">=</span> <span class="string">&quot;work-direct-exchange&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        factory.setHost(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 从工厂中创建连接</span></span><br><span class="line">            <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">            <span class="comment">// 获取通信通道</span></span><br><span class="line">            <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line">            <span class="comment">// 声明工作交换机</span></span><br><span class="line">            channel.exchangeDeclare(WORK_EXCHANGE_NAME, <span class="string">&quot;direct&quot;</span>);</span><br><span class="line">            <span class="comment">// 指定死信队列参数</span></span><br><span class="line">            Map&lt;String, Object&gt; parameter = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">            <span class="comment">// 绑定交换机</span></span><br><span class="line">            parameter.put(<span class="string">&quot;x-dead-letter-exchange&quot;</span>, DEAD_EXCHANGE_NAME);</span><br><span class="line">            <span class="comment">// 指定死信要转发到那个队列</span></span><br><span class="line">            parameter.put(<span class="string">&quot;x-dead-letter-routing-key&quot;</span>, <span class="string">&quot;routing-key-dead-queue-one&quot;</span>);</span><br><span class="line">            <span class="comment">// 创建队列1 以参数形式多绑定一个死信交换机</span></span><br><span class="line">            channel.queueDeclare(WORK_QUEUE_NAME1, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, parameter);</span><br><span class="line">            channel.queueBind(WORK_QUEUE_NAME1, WORK_EXCHANGE_NAME, <span class="string">&quot;work-queue-one&quot;</span>);</span><br><span class="line">            <span class="comment">// 同样也给2进行绑定</span></span><br><span class="line">            Map&lt;String, Object&gt; parameter2 = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">            parameter2.put(<span class="string">&quot;x-dead-letter-exchange&quot;</span>, DEAD_EXCHANGE_NAME);</span><br><span class="line">            parameter2.put(<span class="string">&quot;x-dead-letter-routing-key&quot;</span>, <span class="string">&quot;routing-key-dead-queue-two&quot;</span>);</span><br><span class="line">            <span class="comment">// 创建队列2 以参数形式多绑定一个死信交换机</span></span><br><span class="line">            channel.queueDeclare(WORK_QUEUE_NAME2, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, parameter);</span><br><span class="line">            channel.queueBind(WORK_QUEUE_NAME2, WORK_EXCHANGE_NAME, <span class="string">&quot;work-queue-two&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;Consumer waiting for producer to send message&quot;</span>);</span><br><span class="line">            <span class="comment">// 开启工作队列的消费监听 1</span></span><br><span class="line">            <span class="type">DeliverCallback</span> <span class="variable">deliverCallback1</span> <span class="operator">=</span> (consumerTag, delivery) -&gt; &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(delivery.getBody(), StandardCharsets.UTF_8);</span><br><span class="line">                <span class="comment">// 拒绝消息</span></span><br><span class="line">                channel.basicNack(delivery.getEnvelope().getDeliveryTag(), <span class="literal">false</span>, <span class="literal">false</span>);</span><br><span class="line">                <span class="comment">// 打印接收消息</span></span><br><span class="line">                System.out.println(<span class="string">&quot;[1] Dead receive message:&quot;</span> + message + <span class="string">&quot;-key:&quot;</span> + delivery.getEnvelope().getRoutingKey());</span><br><span class="line">            &#125;;</span><br><span class="line">            channel.basicConsume(WORK_QUEUE_NAME1, <span class="literal">false</span>, deliverCallback1, consumerTag -&gt; &#123;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="comment">// 开启工作队列的消费监听 2</span></span><br><span class="line">            <span class="type">DeliverCallback</span> <span class="variable">deliverCallback2</span> <span class="operator">=</span> (consumerTag, delivery) -&gt; &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(delivery.getBody(), StandardCharsets.UTF_8);</span><br><span class="line">                <span class="comment">// 拒绝消息</span></span><br><span class="line">                channel.basicNack(delivery.getEnvelope().getDeliveryTag(), <span class="literal">false</span>, <span class="literal">false</span>);</span><br><span class="line">                <span class="comment">// 打印接收消息</span></span><br><span class="line">                System.out.println(<span class="string">&quot;[2] Dead receive message:&quot;</span> + message + <span class="string">&quot;-key:&quot;</span> + delivery.getEnvelope().getRoutingKey());</span><br><span class="line">            &#125;;</span><br><span class="line">            channel.basicConsume(WORK_QUEUE_NAME2, <span class="literal">false</span>, deliverCallback2, consumerTag -&gt; &#123;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;创建链接失败！E:&quot;</span> + e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li><li><h5 id="rabbit-重点知识"><a href="#rabbit-重点知识" class="headerlink" title="rabbit 重点知识"></a>rabbit 重点知识</h5><ul><li><p>消息队列的概念、模型、应用场景</p></li><li><p>交换机的类别、路由绑定关系</p></li><li><p>消息可靠性</p><blockquote><p>消息确认机制(ack、nack、reject)<br>消息持久化(durable)<br>消息过期机制<br>死信队列</p></blockquote></li><li><p>延迟队列 类似于 死信队列</p></li><li><p>顺序消费、消费幂等性(做了解)</p></li><li><p>可扩展性</p><blockquote><p>集群<br>故障的回复机制<br>镜像</p></blockquote></li><li><p>运维监控告警(做了解)</p></li></ul></li></ul></li><li><h3 id="RabbitMQ-项目实战"><a href="#RabbitMQ-项目实战" class="headerlink" title="RabbitMQ 项目实战"></a>RabbitMQ 项目实战</h3><ul><li><h4 id="项目中如何使用-RabbitMQ"><a href="#项目中如何使用-RabbitMQ" class="headerlink" title="项目中如何使用 RabbitMQ?"></a>项目中如何使用 RabbitMQ?</h4><ul><li>使用官方的客户端</li></ul><blockquote><p>优点：兼容性好，换语言成本低，比较灵活<br>缺点：太灵活，要自己去做一些限制或者是一些事情。比如要自己维护管理连接等等。</p></blockquote><ul><li>使用封装好的客户端，比如 Spring Boot RabbitMQ Starter</li></ul><blockquote><p>优点：简单易用，直接配置直接用，更方便地去管理连接<br>缺点：封装的太好了，没基础知识很难去使用或者是配置</p></blockquote></li><li><h4 id="基础实战"><a href="#基础实战" class="headerlink" title="基础实战"></a>基础实战</h4><ul><li><p>引入依赖</p><p>引入时候一定要选择与自己当前使用的 Spring Boot 版本一致</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-amqp --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在 yml 中进行配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbmit:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">guest</span></span><br><span class="line">    <span class="attr">passowrd:</span> <span class="string">guest</span></span><br></pre></td></tr></table></figure></li><li><p>创建交换机和队列</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bi.spring.bizmq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bi.spring.config.RabbitMQConfig;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 用于创建测试程序用到的交换机和队列（只用在程序启动前执行一次）</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MqInitMain</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">EXCHANGE_NAME</span> <span class="operator">=</span> <span class="string">&quot;bi-exchange&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 创建连接</span></span><br><span class="line">            <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">            <span class="comment">// 设置连接属性</span></span><br><span class="line">            factory.setHost(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">            <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">            <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line">            channel.exchangeDeclare(EXCHANGE_NAME, <span class="string">&quot;direct&quot;</span>);</span><br><span class="line">            <span class="comment">// 创建队列，随机分配一个队列名称</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">queueName</span> <span class="operator">=</span> <span class="string">&quot;test_queue&quot;</span>;</span><br><span class="line">            channel.queueDeclare(queueName, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">            channel.queueBind(queueName, EXCHANGE_NAME, <span class="string">&quot;bi-queue-key&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;初始化失败：&quot;</span> + e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>生产者代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bi.spring.bizmq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyMessageProducer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendMessage</span><span class="params">(String exchange, String routingKey, String message)</span> &#123;</span><br><span class="line">        rabbitTemplate.convertAndSend(exchange, routingKey, message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>消费者代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bi.spring.bizmq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> lombok.SneakyThrows;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.support.AmqpHeaders;</span><br><span class="line"><span class="keyword">import</span> org.springframework.messaging.handler.annotation.Header;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyMessageConsumer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 指定程序监听的消息队列和确认机制</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> channel</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> deliveryTag</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &#123;&quot;bi_queue&quot;&#125;, ackMode = &quot;MANUAL&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receiveMessage</span><span class="params">(String message, Channel channel, <span class="meta">@Header(AmqpHeaders.DELIVERY_TAG)</span> <span class="type">long</span> deliveryTag)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;receiveMessage message = &#123;&#125;&quot;</span>, message);</span><br><span class="line">        <span class="comment">// 确认收到消息</span></span><br><span class="line">        channel.basicAck(deliveryTag, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>单元测试</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bi.spring.bizmq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyMessageConsumerTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MyMessageProducer myMessageProducer;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">receiveMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        myMessageProducer.sendMessage(<span class="string">&quot;bi-exchange&quot;</span>, <span class="string">&quot;bi-queue-key&quot;</span>, <span class="string">&quot;消息进来了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>测试结果</li></ul><p><img src="https://cdn.jsdelivr.net/gh/keependeavour/picgo/img/20230907104245.png" alt=""></p></li></ul></li><li><h4 id="智能-BI-改造"><a href="#智能-BI-改造" class="headerlink" title="智能 BI 改造"></a>智能 BI 改造</h4><p>按照上一期的做法，是把用户提交的任务放入本地线程池中，在线程池内排队，但是程序如果中断了，任务就会丢失，就丢了，并且还不会去修改状态。</p><ul><li><h5 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h5><ul><li><p>创建交换机和队列 程序启动前要先启动一次初始化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bi.spring.bizmq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 初始化MQ</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BiInitMain</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">            factory.setHost(<span class="string">&quot;xxxx&quot;</span>);</span><br><span class="line">            factory.setPort(xxxx);</span><br><span class="line">            factory.setUsername(<span class="string">&quot;xxxx&quot;</span>);</span><br><span class="line">            factory.setPassword(<span class="string">&quot;xxxx&quot;</span>);</span><br><span class="line">            <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">            <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line">            <span class="comment">// 声明交换机 类型为直接交换机</span></span><br><span class="line">            channel.exchangeDeclare(BiMqConstant.BI_EXCHANGE_NAME, <span class="string">&quot;direct&quot;</span>);</span><br><span class="line">            <span class="comment">// 声明队列</span></span><br><span class="line">            channel.queueDeclare(BiMqConstant.BI_QUEUE_NAME, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">            <span class="comment">// 绑定队列到交换机</span></span><br><span class="line">            channel.queueBind(BiMqConstant.BI_QUEUE_NAME, BiMqConstant.BI_EXCHANGE_NAME, BiMqConstant.BI_ROUTING_KEY);</span><br><span class="line">            <span class="comment">// 限制任务数</span></span><br><span class="line">            channel.basicQos(<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;MQ初始化失败！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/keependeavour/picgo/img/20230907145706.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/keependeavour/picgo/img/20230907145751.png" alt=""></p></li><li><p>重构 async 接口为新的 API</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> BiMessageProducer biMessageProducer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* AI异步（消息队列）对话分析</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> multipartFile</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> genChartByAiRequest</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/gen/async/mq&quot;)</span></span><br><span class="line"><span class="keyword">public</span> BaseResponse&lt;String&gt; <span class="title function_">genChartByAIUseAsyncMQ</span><span class="params">(<span class="meta">@RequestPart(&quot;file&quot;)</span> MultipartFile multipartFile,</span></span><br><span class="line"><span class="params">                                                GenChartByAiRequest genChartByAiRequest, HttpServletRequest request)</span> &#123;</span><br><span class="line">    <span class="comment">// 参数获取</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">goal</span> <span class="operator">=</span> genChartByAiRequest.getGoal();</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> genChartByAiRequest.getName();</span><br><span class="line">    <span class="type">String</span> <span class="variable">chartType</span> <span class="operator">=</span> genChartByAiRequest.getChartType();</span><br><span class="line">    <span class="comment">// 参数校验</span></span><br><span class="line">    ThrowUtils.throwIf(StringUtils.isEmpty(goal), ErrorCode.PARAMS_ERROR, <span class="string">&quot;目标不能为空&quot;</span>);</span><br><span class="line">    ThrowUtils.throwIf(StringUtils.isEmpty(chartType), ErrorCode.PARAMS_ERROR, <span class="string">&quot;类型不能为空&quot;</span>);</span><br><span class="line">    ThrowUtils.throwIf(StringUtils.isEmpty(name), ErrorCode.PARAMS_ERROR, <span class="string">&quot;图表名称不能为空&quot;</span>);</span><br><span class="line">    <span class="comment">// 文件校验</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">size</span> <span class="operator">=</span> multipartFile.getSize();</span><br><span class="line">    <span class="type">String</span> <span class="variable">originalFilename</span> <span class="operator">=</span> multipartFile.getOriginalFilename();</span><br><span class="line">    ThrowUtils.throwIf(size &gt; MAX_FILE_SIZE, ErrorCode.PARAMS_ERROR, <span class="string">&quot;文件过大不得超过1MB&quot;</span>);</span><br><span class="line">    ThrowUtils.throwIf(!FILE_NAME_LIST.contains(FileUtil.getSuffix(originalFilename)), ErrorCode.PARAMS_ERROR, <span class="string">&quot;不支持此文件&quot;</span>);</span><br><span class="line">    <span class="comment">// 判断是否登录</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">loginUser</span> <span class="operator">=</span> userService.getLoginUser(request);</span><br><span class="line">    ThrowUtils.throwIf(Objects.isNull(loginUser), ErrorCode.NOT_LOGIN_ERROR);</span><br><span class="line">    <span class="comment">// 对用户进行限流</span></span><br><span class="line">    redisLimiterManager.doRateLimit(<span class="string">&quot;genChartByAI_&quot;</span> + loginUser.getId());</span><br><span class="line">    <span class="comment">// 用户消息拼接</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">dataStr</span> <span class="operator">=</span> ExcelUtils.excelToCsv(multipartFile);</span><br><span class="line">    <span class="comment">// 先保存任务到数据库中</span></span><br><span class="line">    <span class="type">Chart</span> <span class="variable">chart</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Chart</span>();</span><br><span class="line">    chart.setName(name);</span><br><span class="line">    chart.setGoal(goal);</span><br><span class="line">    chart.setChartData(dataStr);</span><br><span class="line">    chart.setChartType(chartType);</span><br><span class="line">    chart.setStatus(<span class="string">&quot;wait&quot;</span>);</span><br><span class="line">    chart.setExecMessage(<span class="string">&quot;任务等待中&quot;</span>);</span><br><span class="line">    chart.setUserId(loginUser.getId());</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">firstChartSave</span> <span class="operator">=</span> chartService.save(chart);</span><br><span class="line">    ThrowUtils.throwIf(!firstChartSave, ErrorCode.PARAMS_ERROR, <span class="string">&quot;任务提交失败&quot;</span>);</span><br><span class="line">    <span class="comment">// 任务如果保存成功 将ID步入消息队列中</span></span><br><span class="line">    biMessageProducer.sendMessage(String.valueOf(chart.getId()));</span><br><span class="line">    <span class="keyword">return</span> ResultUtils.success(<span class="string">&quot;任务提交成功！&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>将线程池中的代码进行重构</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 监听消息消费</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> channel</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> deliverTag</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@RabbitListener(queues = &#123;BiMqConstant.BI_QUEUE_NAME&#125;, ackMode = &quot;MANUAL&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receiveMessage</span><span class="params">(String message, Channel channel, <span class="meta">@Header(AmqpHeaders.DELIVERY_TAG)</span> <span class="type">long</span> deliverTag)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;receiveMessage: &#123;&#125;&quot;</span>, message);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(message)) &#123;</span><br><span class="line">            <span class="comment">// 参数 消息的tag 是否要全部拒绝 false为只拒绝当前  是否要重入队列 false为不入</span></span><br><span class="line">            channel.basicNack(deliverTag, <span class="literal">false</span>, <span class="literal">false</span>);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(ErrorCode.SYSTEM_ERROR);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">id</span> <span class="operator">=</span> Long.parseLong(message);</span><br><span class="line">        <span class="type">Chart</span> <span class="variable">chart</span> <span class="operator">=</span> chartService.getById(id);</span><br><span class="line">        <span class="keyword">if</span> (Objects.isNull(chart)) &#123;</span><br><span class="line">            channel.basicNack(deliverTag, <span class="literal">false</span>, <span class="literal">false</span>);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(ErrorCode.SYSTEM_ERROR);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 将任务转入任务队列中分配执行</span></span><br><span class="line">        CompletableFuture.runAsync(() -&gt; &#123;</span><br><span class="line">            <span class="type">Chart</span> <span class="variable">updateFirstChart</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Chart</span>();</span><br><span class="line">            updateFirstChart.setId(chart.getId());</span><br><span class="line">            updateFirstChart.setStatus(<span class="string">&quot;running&quot;</span>);</span><br><span class="line">            updateFirstChart.setExecMessage(<span class="string">&quot;任务正在执行中&quot;</span>);</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">isFirstUpdate</span> <span class="operator">=</span> chartService.updateById(updateFirstChart);</span><br><span class="line">            <span class="keyword">if</span> (!isFirstUpdate) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    channel.basicNack(deliverTag, <span class="literal">false</span>, <span class="literal">false</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    log.error(<span class="string">&quot;消息拒绝失败！&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                handleChartUpdateError(chart.getId());</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// AI接口服务</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> aiManager.doChat(buildUserMessage(chart));</span><br><span class="line">            String[] splits = content.split(<span class="string">&quot;【【【【【&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (splits.length != <span class="number">3</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    channel.basicNack(deliverTag, <span class="literal">false</span>, <span class="literal">false</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    log.error(<span class="string">&quot;消息拒绝失败！&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;AI 生成错误&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">Chart</span> <span class="variable">updateChartData</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Chart</span>();</span><br><span class="line">            updateChartData.setId(chart.getId());</span><br><span class="line">            updateChartData.setStatus(<span class="string">&quot;succeed&quot;</span>);</span><br><span class="line">            updateFirstChart.setExecMessage(<span class="string">&quot;任务已经完成&quot;</span>);</span><br><span class="line">            updateChartData.setGenResult(splits[<span class="number">2</span>].trim());</span><br><span class="line">            updateChartData.setGenChart(splits[<span class="number">1</span>].trim());</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">isUpdateChartData</span> <span class="operator">=</span> chartService.updateById(updateChartData);</span><br><span class="line">            <span class="keyword">if</span> (!isUpdateChartData) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    channel.basicNack(deliverTag, <span class="literal">false</span>, <span class="literal">false</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    log.error(<span class="string">&quot;消息拒绝失败！&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                handleChartUpdateError(chart.getId());</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, threadPoolExecutor);</span><br><span class="line">        <span class="comment">// 成功执行后确认消息</span></span><br><span class="line">        channel.basicAck(deliverTag, <span class="literal">false</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        log.error(<span class="string">&quot;消息消费失败！&quot;</span>);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(ErrorCode.SYSTEM_ERROR);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>代码中仍然存在缺陷，被拒绝的消息要进行处理，并要修改任务状态</p><p>修改初始化 MQ 代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bi.spring.bizmq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 初始化MQ</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BiInitMain</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">            factory.setHost(<span class="string">&quot;124.222.153.56&quot;</span>);</span><br><span class="line">            factory.setPort(<span class="number">5672</span>);</span><br><span class="line">            factory.setUsername(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">            factory.setPassword(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">            <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">            <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line">            <span class="comment">// 声明死信交换机 类型为直接交换机</span></span><br><span class="line">            channel.exchangeDeclare(BiMqConstant.BI_DEAD_EXCHANGE_NAME, <span class="string">&quot;direct&quot;</span>);</span><br><span class="line">            <span class="comment">// 声明死信队列</span></span><br><span class="line">            channel.queueDeclare(BiMqConstant.BI_DEAD_QUEUE_NAME, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">            <span class="comment">// 声明交换机 类型为直接交换机</span></span><br><span class="line">            channel.exchangeDeclare(BiMqConstant.BI_EXCHANGE_NAME, <span class="string">&quot;direct&quot;</span>);</span><br><span class="line">            <span class="comment">// 指定死信队列的参数</span></span><br><span class="line">            Map&lt;String, Object&gt; parameter = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">            parameter.put(<span class="string">&quot;x-dead-letter-exchange&quot;</span>, BiMqConstant.BI_DEAD_EXCHANGE_NAME);</span><br><span class="line">            parameter.put(<span class="string">&quot;x-dead-letter-routing-key&quot;</span>, BiMqConstant.BI_DEAD_ROUTING_KEY);</span><br><span class="line">            <span class="comment">// 指定过期时间</span></span><br><span class="line">            parameter.put(<span class="string">&quot;x-message-ttl&quot;</span>, <span class="number">3000L</span>);</span><br><span class="line">            <span class="comment">// 声明队列</span></span><br><span class="line">            channel.queueDeclare(BiMqConstant.BI_QUEUE_NAME, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, parameter);</span><br><span class="line">            <span class="comment">// 绑定队列到交换机</span></span><br><span class="line">            channel.queueBind(BiMqConstant.BI_QUEUE_NAME, BiMqConstant.BI_EXCHANGE_NAME, BiMqConstant.BI_ROUTING_KEY);</span><br><span class="line">            <span class="comment">// 绑定死信交换机和死信队列的routingKey</span></span><br><span class="line">            channel.queueBind(BiMqConstant.BI_DEAD_QUEUE_NAME, BiMqConstant.BI_DEAD_EXCHANGE_NAME, BiMqConstant.BI_DEAD_ROUTING_KEY);</span><br><span class="line">            <span class="comment">// 限制任务数</span></span><br><span class="line">            channel.basicQos(<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;MQ初始化失败！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>添加死信队列消费监听</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 处理因为某种情况没修改状态</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> channel</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> deliverTage</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="meta">@RabbitListener(queues = &#123;BiMqConstant.BI_DEAD_QUEUE_NAME&#125;, ackMode = &quot;MANUAL&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receiveDeadMessage</span><span class="params">(String message, Channel channel, <span class="meta">@Header(AmqpHeaders.DELIVERY_TAG)</span> <span class="type">long</span> deliverTage)</span> &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">          log.info(<span class="string">&quot;receiveMessage dead message:&#123;&#125;&quot;</span>, message);</span><br><span class="line">          <span class="keyword">if</span> (StringUtils.isBlank(message)) &#123;</span><br><span class="line">              channel.basicAck(deliverTage, <span class="literal">false</span>);</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="type">Chart</span> <span class="variable">chart</span> <span class="operator">=</span> chartService.getById(Long.parseLong(message));</span><br><span class="line">              <span class="keyword">if</span> (!Objects.isNull(chart)) &#123;</span><br><span class="line">                  chart.setStatus(<span class="string">&quot;failed&quot;</span>);</span><br><span class="line">                  chart.setExecMessage(<span class="string">&quot;更新图表状态失败！&quot;</span>);</span><br><span class="line">                  <span class="type">boolean</span> <span class="variable">save</span> <span class="operator">=</span> chartService.save(chart);</span><br><span class="line">                  <span class="keyword">if</span> (!save) &#123;</span><br><span class="line">                      <span class="comment">// 再次失败 就判定为系统异常</span></span><br><span class="line">                      log.error(<span class="string">&quot;更新图表失败状态失败&quot;</span> + chart.getId() + <span class="string">&quot;,&quot;</span> + <span class="string">&quot;更新图表状态失败！&quot;</span>);</span><br><span class="line">                      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(ErrorCode.SYSTEM_ERROR);</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          channel.basicAck(deliverTage, <span class="literal">false</span>);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">          log.error(<span class="string">&quot;死信消息消费失败！&quot;</span>);</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(ErrorCode.SYSTEM_ERROR);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><h5 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h5><p>验证发现，如果程序中断了，并且消息未被手动确认或者拒绝，也就是没有 ack 或者 nack 无任何反应</p><p>那么这条消息就会重新处于 ready 状态，系统恢复时消费者依然会监听到这条消息并重新消费。</p></li><li><h5 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h5><p>改造之后<br>写了一个专门来接受消息的程序，处理任务<br>如果程序中断了，消息未被确认，就会重发<br>消息集中的发到消息队列，可以部署多个后端，从同一个地方取出消息做处理，实现了分布式的负载均衡</p></li></ul></li><li><h3 id="今日后端收获"><a href="#今日后端收获" class="headerlink" title="今日后端收获"></a>今日后端收获</h3><blockquote><p>后端项目到此就完成了</p><ol><li>完成了 由 同步化-&gt;异步化-&gt;异步化（消息队列）的优化过程</li><li>学习了如何使用本地线程池来进行异步化接口，从而增强了接口的响应速度，熟悉了线程池参数的意义</li><li>学习了使用消息中间件 RbbitMQ 来作为消息队列，从原本的本地线程池导致数据丢失，生成状态由于程序的中断而导致丢失，卡状态无法反馈的问题。</li><li>此项目中收获最大的就是如何对业务进行解耦拆分，把核心处理业务和其他三方服务或者是耗时长的服务抽离，用户只需要提交任务，后端慢慢的去处理</li><li>初步的使用消息中间件接入项目中，从听理论到结尾、模糊到分析清楚，花费了大量时间。因此此项目对于我收获非常的巨大。</li><li>特别感谢鱼总能够分享技术，带领学习。</li></ol></blockquote></li></ul></li></ul></li><li><h2 id="今日前端开发"><a href="#今日前端开发" class="headerlink" title="今日前端开发"></a>今日前端开发</h2><ul><li><p>更新后端开发文档 执行 openAPI</p><p><img src="https://cdn.jsdelivr.net/gh/keependeavour/picgo/img/20230907160335.png" alt=""></p></li><li><p>创建新的页面 修改请求 API</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">onFinish</span> = <span class="keyword">async</span> (<span class="params">values: <span class="built_in">any</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (submitting) <span class="keyword">return</span>;</span><br><span class="line">  <span class="title function_">setSubmitting</span>(<span class="literal">true</span>);</span><br><span class="line">  <span class="keyword">const</span> params = &#123;</span><br><span class="line">    ...values,</span><br><span class="line">    <span class="attr">file</span>: <span class="literal">undefined</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">genChartByAIUseAsyncMQUsingPOST</span>(</span><br><span class="line">      params,</span><br><span class="line">      &#123;&#125;,</span><br><span class="line">      values?.<span class="property">file</span>[<span class="number">0</span>]?.<span class="property">originFileObj</span></span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">if</span> (res?.<span class="property">data</span>) &#123;</span><br><span class="line">      message.<span class="title function_">success</span>(res.<span class="property">data</span>);</span><br><span class="line">      form.<span class="title function_">resetFields</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (<span class="attr">e</span>: <span class="built_in">any</span>) &#123;</span><br><span class="line">    message.<span class="title function_">error</span>(<span class="string">&quot;分析失败！&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">setSubmitting</span>(<span class="literal">false</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>提交后 DEBUG 观察消息是否进入后端</p><p><img src="https://cdn.jsdelivr.net/gh/keependeavour/picgo/img/20230907161123.png" alt=""></p></li><li><p>到我的图表中观察状态</p><p><img src="https://cdn.jsdelivr.net/gh/keependeavour/picgo/img/20230907161136.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/keependeavour/picgo/img/20230907161144.png" alt=""></p></li><li><h4 id="今日前端收获"><a href="#今日前端收获" class="headerlink" title="今日前端收获"></a>今日前端收获</h4><blockquote><p>由于前端不是侧重点，最后一期主要是对于后端的开发和优化<br>页面架构都是前期搭建好的直接复制过来进行修改即可。</p></blockquote></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 项目经验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 智能BI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>智能BI项目-接口的异步化(六)</title>
      <link href="/2023/08/26/%E9%A1%B9%E7%9B%AE%E7%BB%8F%E9%AA%8C/%E6%99%BA%E8%83%BDBI/%E6%99%BA%E8%83%BDBI%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91-6/"/>
      <url>/2023/08/26/%E9%A1%B9%E7%9B%AE%E7%BB%8F%E9%AA%8C/%E6%99%BA%E8%83%BDBI/%E6%99%BA%E8%83%BDBI%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91-6/</url>
      
        <content type="html"><![CDATA[<h2 id="往期开发-已经完成"><a href="#往期开发-已经完成" class="headerlink" title="往期开发(已经完成)"></a>往期开发(已经完成)</h2><ul><li><a href="/2023/08/21/项目经验/智能BI/智能BI项目开发-1/">智能 BI 项目-介绍(一)</a></li><li><a href="/2023/08/22/项目经验/智能BI/智能BI项目开发-2/">智能 BI 项目-初始化(二)</a></li><li><a href="/2023/08/23/项目经验/智能BI/智能BI项目开发-3/">智能 BI 项目-初学 AI 分析(三)</a></li><li><a href="/2023/08/24/项目经验/智能BI/智能BI项目开发-4/">智能 BI 项目-AI 接口调用(四)</a></li><li><a href="/2023/08/25/项目经验/智能BI/智能BI项目开发-5/">智能 BI 项目-接口优化(五)</a></li><li><a href="/2023/08/26/项目经验/智能BI/智能BI项目开发-6/">智能 BI 项目-接口的异步化(六)</a></li><li><a href="/2023/08/28/项目经验/智能BI/智能BI项目开发-7/">智能 BI 项目-引入 RabbitMQ(七)</a></li></ul><h2 id="今日后端开发过程"><a href="#今日后端开发过程" class="headerlink" title="今日后端开发过程"></a>今日后端开发过程</h2><ul><li><h3 id="系统问题分析"><a href="#系统问题分析" class="headerlink" title="系统问题分析"></a>系统问题分析</h3><ul><li><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><blockquote><ol><li><p>用户等待的智能分析时间过长，由于要调用第三方 AI 服务 等待时间过长</p></li><li><p>业务服务器可能会有很多请求在处理，导致服务器资源紧张，压力过大时候会导致服务器宕机或者无法处理新的请求。</p></li><li><p>调用第三方 AI 服务，AI 处理能力是有限的，例如，每 3s 只能处理一个请求，会导致 AI 处理压力多大，处理不过来的情况，严重时候 AI 可能会对服务器系统拒绝服务</p></li></ol></blockquote></li><li><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>异步化接口，原来的同步化与异步化的区别</p><blockquote><ol><li><p>同步：一件事做完，才能继续做下件事情。比如加工需要等上一个零件弄完才能继续下一个</p></li><li><p>异步：不需要等待上一件事情做完，可以先做记录或者是保存当前任务，等待任务队列进行分配，此时可以做其他事情，等待这个事件做完，通知用户，可以继续做后续事情。</p></li></ol></blockquote></li></ul></li><li><h3 id="业务流程分析"><a href="#业务流程分析" class="headerlink" title="业务流程分析"></a>业务流程分析</h3><ul><li><h4 id="标准化分析"><a href="#标准化分析" class="headerlink" title="标准化分析"></a>标准化分析</h4><blockquote><ol><li><p>当用户要进行等待时间或是耗时很长的操作室，点击提交之后，不需要在页面进行等待，而是将此次任务提交到后端保存至数据库中。</p></li><li><p>用户点击提交新任务时:<br>a. 任务提交成功:<br>i . 如果程序中还有多余的空闲线程，可以立即去处理这个任务。<br>ii. 如果程序中的线程都在处理任务中，无法处理此任务，放到等待队列中。<br>b. 任务提交失败(所有的线程都在处理并且任务队列满了):<br>i . 拒绝掉这个任务，再也不去执行。<br>ii. 将此次任务保存到数据库中，来记录本次任务失败的情况，并在程序的线程空闲时候，可以把任务从数据库中取出再去执行。</p></li><li><p>程序的线程从任务队列中取出任务依次执行，每完成一件事情要修改一下任务的状态。</p></li><li><p>用户可以查询当前任务的执行状态，在任务执行成功或者失败时候可以收到通知(发送 email，系统的消息提示，手机短信等)，从而优化用户体验。</p></li><li><p>如果我们要执行的任务非常的复杂，包含很多个环节，在每个小任务完成时，程序需要记录一下任务执行的状态(进度)。</p></li></ol></blockquote></li><li><h4 id="智能-BI-业务分析"><a href="#智能-BI-业务分析" class="headerlink" title="智能 BI 业务分析"></a>智能 BI 业务分析</h4><blockquote><ol><li><p>用户点击提交按钮时候，先将要分析的信息保存到数据库中作为一个任务。</p></li><li><p>用户可以我的图表页面查看所有的图表（状态：已生成的。生成中、生成失败）的信息和状态。</p></li><li><p>用户可以修改生成失败的图表信息点击重新生成。</p></li></ol></blockquote><p>优化前的请求流程图:</p><p><img src="https://cdn.jsdelivr.net/gh/keependeavour/picgo/img/f0e8bab257fb4f41a8f742ba3a859d7.png" alt="优化前"></p><p>异步优化后的请求流程图:</p><p><img src="https://cdn.jsdelivr.net/gh/keependeavour/picgo/img/8f8fb69cf8aa31f9cfd64519f9bc597.png" alt="优化后"></p><blockquote><p>优化后出现新的问题：<br>a.任务队列的最大容量应该设置为多少？<br>b.程序如何从任务队列中取出任务去执行？<br>c.这个任务队列的流程如何在程序中实现？<br>d.如何保证程序中最多同时执行多少个任务？</p></blockquote></li><li><h4 id="解决方案-线程池"><a href="#解决方案-线程池" class="headerlink" title="解决方案-线程池"></a>解决方案-线程池</h4><ul><li><p>为什么要引入线程池?</p><blockquote><ol><li>线程的管理比较复杂（例如，何时增加线程，何时减少空闲线程）</li><li>任务存取比较复杂（何时接受任务，何时拒绝任务，如何保证执行时不抢到同一个任务）</li></ol></blockquote></li><li><p>线程池的作用</p><blockquote><ol><li>轻松帮助管理线程池</li><li>协调任务的执行和分配过程</li></ol></blockquote></li></ul><p>简单流程图如下</p><p><img src="https://cdn.jsdelivr.net/gh/keependeavour/picgo/img/0277928c8a90221dad4931916eaf5cb.png" alt="简单线程池"></p></li><li><h4 id="线程池的实现"><a href="#线程池的实现" class="headerlink" title="线程池的实现"></a>线程池的实现</h4><p>自行不用实现，如果是在 Spring 框架中可以使用 ThreadPoolTaskExecutor 配合注解@Async 来实现(不建议)。<br>如果是在 Java 中，可以使用 JUC 并发编程包中的 ThreadPoolExecutor 来实现非常灵活地自定义线程池，通用性更加高。</p><ul><li><h5 id="线程池的参数如何设置"><a href="#线程池的参数如何设置" class="headerlink" title="线程池的参数如何设置?"></a>线程池的参数如何设置?</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ThreadPoolExecutor</span><span class="params">(<span class="type">int</span> corePoolSize,</span></span><br><span class="line"><span class="params">                            <span class="type">int</span> maximumPoolSize,</span></span><br><span class="line"><span class="params">                            <span class="type">long</span> keepAliveTime,</span></span><br><span class="line"><span class="params">                            TimeUnit unit,</span></span><br><span class="line"><span class="params">                            BlockingQueue&lt;Runnable&gt; workQueue,</span></span><br><span class="line"><span class="params">                            ThreadFactory threadFactory,</span></span><br><span class="line"><span class="params">                            RejectedExecutionHandler handler)</span>&#123;...&#125;</span><br></pre></td></tr></table></figure><p>线程池参数理解</p><blockquote><ol><li>corePoolSize(核心线程数 -&gt; 可以当做是公司的正式员工，也就是常驻员工)：正常情况下，系统应该能保持同时工作的线程数（随时属于就绪状态）。</li><li>maximumPoolSize(最大线程数 -&gt; 可以当做是公司人手不够，最多能招的人数)：极端情况下，线程池最多能开启多少线程（包括正式员工和临时员工）。</li><li>keepAliveTime(空闲线程存活时间 -&gt; 可以当做是非正式员工的工作时间)：非核心线程在没有任务的情况下，过多久要删除（工作时长），释放无用线程资源。</li><li>TimeUnit(空闲线程的存活时间单位)：min、s</li><li>workQueue(任务队列)：用户存放给线程执行的任务队列，存在一个任务队列长度（一定要进行设置，不能让任务队列长度无限，不然则占用资源过大）</li><li>ThreadFactory(线程工厂)：控制每个线程的生成，以及线程的一些参数设置（比如定义线程名字）</li><li>RejectedExecutionHandler(拒绝策略)：当线程数最大且都在处理任务时任务队列此时也已经占满，如果再来任务就要采取措施，比如抛出异常，自定义处理策略等。</li></ol></blockquote><p>如何确定线程池的参数？需要结合具体的业务场景，不断的优化和设置。</p><blockquote><ol><li>假设 AI 生成能力的并发只允许 4 个任务同时执行，AI 能力允许 20 个任务去排队</li><li>corePoolSize(核心线程数 -&gt; 正式员工数)：正常情况下可是设置为 2 - 4</li><li>maximumPoolSize(极限线程数 -&gt; 正式员工数 + 临时员工数) 设置为 &lt;= 4</li><li>keepAliveTime(空闲线程存活时间): 一般设置为 min 级、s 级</li><li>TimeUnit(空闲线程存活时间单位): min、s</li><li>workQueue(工作队列)：结合实际情况设置，可以设置为 20</li><li>threadFactory(线程工厂)：线程的生成和属性的设置</li><li>rejectedExecutionHandler(拒绝策略)：抛出异常，标记数据库的任务状态为”任务满了已拒绝”</li></ol></blockquote><p>一般情况下，任务分为 IO 密集型和计算密集型（CPU 密集型）两种:</p><blockquote><p>计算密集型：CPU 性能，比如音频处理，图像处理，数学计算等，一般设置 corePoolSize 为 CPU 的核数 + 1，多出一恶搞是为了让每个线程都能利用好 CPU 的每个核，而且避免线程频繁切换（减少争抢，减少开销）<br>IO 密集型：吃带宽/内存/硬盘的读写资源，corePoolSize 可以设置大一些，一般是 2N 左右，但是建议以 IO 的能力为主。</p></blockquote></li><li><h5 id="线城池的工作机制-流程图"><a href="#线城池的工作机制-流程图" class="headerlink" title="线城池的工作机制(流程图)"></a>线城池的工作机制(流程图)</h5><ol><li>刚开始没有任何线程和任务<br><img src="https://cdn.jsdelivr.net/gh/keependeavour/picgo/img/20230826165943.png" alt="步骤1"></li><li>此时来了一个任务，公司发现正式员工还没有占满(corePoolSize = 2)，喊来一个正式员工（核心线程）来处理任务<br><img src="https://cdn.jsdelivr.net/gh/keependeavour/picgo/img/20230826165954.png" alt="步骤2"></li><li>此时又来了一个任务，公司发现正式员工还没有占满(corePoolSize = 2)，再喊来一个正式员工（核心线程）来处理任务<br><img src="https://cdn.jsdelivr.net/gh/keependeavour/picgo/img/20230826170000.png" alt="步骤3"></li><li>此时又来了两个任务，公司发现正式员工还已经占满(corePoolSize = 2)，但是并不会去招临时工（添加新的线程）来处理，而是先放入任务队列(workQueue.size=2)中。<br><img src="https://cdn.jsdelivr.net/gh/keependeavour/picgo/img/20230826170007.png" alt="步骤4"></li><li>此时又来了两个任务，公司发现正式员工还已经占满(corePoolSize = 2)，且任务队列已经占满了（当前线程数 &gt; workQueue.size = 2，队列中已有任务出=当前最大任务数），新增临时员工（最大线程 maximumPoolSize=4，未达到极限线程数）来处理新的任务，而不是丢弃任务<br><img src="https://cdn.jsdelivr.net/gh/keependeavour/picgo/img/20230826170019.png" alt="步骤5"></li><li>此时又来了一个任务，公司发现正式员工还已经占满(corePoolSize = 2)，且任务队列已经占满了（当前线程数 &gt; workQueue.size = 2，队列中已有任务出=当前最大任务数），并且此时 maximumPoolSize=4，已经达到了极限线程数，此时的任务要么被拒绝、要么自定义策略进行处理（RejectedExecutionHandler）<br><img src="https://cdn.jsdelivr.net/gh/keependeavour/picgo/img/20230826170025.png" alt="步骤6"></li><li>如果当线程数超过 corePoolSize（正式员工数），又没有新任务给他，那么等到 keepAliveTime 时间达到后会释放非核心线程（临时员工）</li></ol></li><li><h5 id="代码开发"><a href="#代码开发" class="headerlink" title="代码开发"></a>代码开发</h5><ul><li>自定义线程池</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadPoolExecutorConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ThreadPoolExecutor <span class="title function_">threadPoolExecutor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ThreadFactory</span> <span class="variable">threadFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadFactory</span>() &#123;</span><br><span class="line">            <span class="keyword">private</span> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Thread <span class="title function_">newThread</span><span class="params">(<span class="meta">@NotNull</span> Runnable r)</span> &#123;</span><br><span class="line">                <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(r);</span><br><span class="line">                thread.setName(<span class="string">&quot;线程&quot;</span> + count);</span><br><span class="line">                count++;</span><br><span class="line">                <span class="keyword">return</span> thread;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">RejectedExecutionHandler</span> <span class="variable">rejectedExecutionHandler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RejectedExecutionHandler</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rejectedExecution</span><span class="params">(Runnable r, ThreadPoolExecutor executor)</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(ErrorCode.TOO_MANY_REQUEST, <span class="string">&quot;网络繁忙，请稍后再提交任务&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">2</span>, <span class="number">4</span>, <span class="number">100</span>, TimeUnit.SECONDS,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="number">4</span>), threadFactory, rejectedExecutionHandler);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>定义 controller 进行测试</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> ThreadPoolExecutor threadPoolExecutor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;/add&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="meta">@RequestParam</span> String name)</span> &#123;</span><br><span class="line">    CompletableFuture.runAsync(() -&gt; &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;-任务执行中,当前线程为:&quot;</span> + Thread.currentThread().getName());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">600000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, threadPoolExecutor);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;/get&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> threadPoolExecutor.getQueue().size();</span><br><span class="line">    map.put(<span class="string">&quot;队列长度&quot;</span>, size);</span><br><span class="line">    <span class="type">long</span> <span class="variable">taskCount</span> <span class="operator">=</span> threadPoolExecutor.getTaskCount();</span><br><span class="line">    map.put(<span class="string">&quot;任务总数&quot;</span>, taskCount);</span><br><span class="line">    <span class="type">long</span> <span class="variable">completedTaskCount</span> <span class="operator">=</span> threadPoolExecutor.getCompletedTaskCount();</span><br><span class="line">    map.put(<span class="string">&quot;已完成任务数&quot;</span>, completedTaskCount);</span><br><span class="line">    <span class="type">int</span> <span class="variable">activeCount</span> <span class="operator">=</span> threadPoolExecutor.getActiveCount();</span><br><span class="line">    map.put(<span class="string">&quot;正在工作的线程数&quot;</span>, activeCount);</span><br><span class="line">    <span class="keyword">return</span> JSONUtil.toJsonStr(map);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="完整代码实现"><a href="#完整代码实现" class="headerlink" title="完整代码实现"></a>完整代码实现</h4><blockquote><ol><li>给表中添加新的字段，status-状态，以及 execMessage 消息</li><li>用户点击提交任务时，先把图表信息立即保存到数据库中，然后提交任务</li><li>用户提交任务之后，现将状态修改为“执行中”，执行成功之后修改为“已完成”，保存执行结果；执行失败后，状态修改为失败，记录任务失败信息</li></ol></blockquote></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * AI异步对话分析</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> multipartFile</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> genChartByAiRequest</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/gen/async&quot;)</span></span><br><span class="line"><span class="keyword">public</span> BaseResponse&lt;String&gt; <span class="title function_">genChartByAIUseAsync</span><span class="params">(<span class="meta">@RequestPart(&quot;file&quot;)</span> MultipartFile multipartFile,</span></span><br><span class="line"><span class="params">                                                GenChartByAiRequest genChartByAiRequest, HttpServletRequest request)</span> &#123;</span><br><span class="line">    <span class="comment">// 参数获取</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">goal</span> <span class="operator">=</span> genChartByAiRequest.getGoal();</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> genChartByAiRequest.getName();</span><br><span class="line">    <span class="type">String</span> <span class="variable">chartType</span> <span class="operator">=</span> genChartByAiRequest.getChartType();</span><br><span class="line">    <span class="comment">// 参数校验</span></span><br><span class="line">    ThrowUtils.throwIf(StringUtils.isEmpty(goal), ErrorCode.PARAMS_ERROR, <span class="string">&quot;目标不能为空&quot;</span>);</span><br><span class="line">    ThrowUtils.throwIf(StringUtils.isEmpty(chartType), ErrorCode.PARAMS_ERROR, <span class="string">&quot;类型不能为空&quot;</span>);</span><br><span class="line">    ThrowUtils.throwIf(StringUtils.isEmpty(name), ErrorCode.PARAMS_ERROR, <span class="string">&quot;图表名称不能为空&quot;</span>);</span><br><span class="line">    <span class="comment">// 文件校验</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">size</span> <span class="operator">=</span> multipartFile.getSize();</span><br><span class="line">    <span class="type">String</span> <span class="variable">originalFilename</span> <span class="operator">=</span> multipartFile.getOriginalFilename();</span><br><span class="line">    ThrowUtils.throwIf(size &gt; MAX_FILE_SIZE, ErrorCode.PARAMS_ERROR, <span class="string">&quot;文件过大不得超过1MB&quot;</span>);</span><br><span class="line">    ThrowUtils.throwIf(!FILE_NAME_LIST.contains(FileUtil.getSuffix(originalFilename)), ErrorCode.PARAMS_ERROR, <span class="string">&quot;不支持此文件&quot;</span>);</span><br><span class="line">    <span class="comment">// 判断是否登录</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">loginUser</span> <span class="operator">=</span> userService.getLoginUser(request);</span><br><span class="line">    ThrowUtils.throwIf(Objects.isNull(loginUser), ErrorCode.NOT_LOGIN_ERROR);</span><br><span class="line">    redisLimiterManager.doRateLimit(<span class="string">&quot;genChartByAI_&quot;</span> + loginUser.getId());</span><br><span class="line">    <span class="comment">// 用户消息拼接</span></span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">userMessageBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">    userMessageBuilder.append(<span class="string">&quot;分析需求:&quot;</span>).append(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">newGoal</span> <span class="operator">=</span> goal + <span class="string">&quot;,请使用&quot;</span> + chartType;</span><br><span class="line">    userMessageBuilder.append(newGoal).append(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    userMessageBuilder.append(<span class="string">&quot;原始数据:&quot;</span>).append(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">dataStr</span> <span class="operator">=</span> ExcelUtils.excelToCsv(multipartFile);</span><br><span class="line">    userMessageBuilder.append(dataStr);</span><br><span class="line">    <span class="comment">// 先保存任务到数据库中</span></span><br><span class="line">    <span class="type">Chart</span> <span class="variable">chart</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Chart</span>();</span><br><span class="line">    chart.setName(name);</span><br><span class="line">    chart.setGoal(goal);</span><br><span class="line">    chart.setChartData(dataStr);</span><br><span class="line">    chart.setChartType(chartType);</span><br><span class="line">    chart.setStatus(<span class="string">&quot;wait&quot;</span>);</span><br><span class="line">    chart.setExecMessage(<span class="string">&quot;任务等待中&quot;</span>);</span><br><span class="line">    chart.setUserId(loginUser.getId());</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">firstChartSave</span> <span class="operator">=</span> chartService.save(chart);</span><br><span class="line">    ThrowUtils.throwIf(!firstChartSave, ErrorCode.PARAMS_ERROR, <span class="string">&quot;任务提交失败&quot;</span>);</span><br><span class="line">    <span class="comment">// 将任务转入任务队列中分配执行</span></span><br><span class="line">    CompletableFuture.runAsync(() -&gt; &#123;</span><br><span class="line">        <span class="type">Chart</span> <span class="variable">updateFirstChart</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Chart</span>();</span><br><span class="line">        updateFirstChart.setId(chart.getId());</span><br><span class="line">        updateFirstChart.setStatus(<span class="string">&quot;running&quot;</span>);</span><br><span class="line">        updateFirstChart.setExecMessage(<span class="string">&quot;任务正在执行中&quot;</span>);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isFirstUpdate</span> <span class="operator">=</span> chartService.updateById(updateFirstChart);</span><br><span class="line">        <span class="keyword">if</span> (!isFirstUpdate) &#123;</span><br><span class="line">            handleChartUpdateError(chart.getId());</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// AI接口服务</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> aiManager.doChat(userMessageBuilder.toString());</span><br><span class="line">        String[] splits = content.split(<span class="string">&quot;【【【【【&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (splits.length != <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;AI 生成错误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Chart</span> <span class="variable">updateChartData</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Chart</span>();</span><br><span class="line">        updateChartData.setId(chart.getId());</span><br><span class="line">        updateChartData.setStatus(<span class="string">&quot;succeed&quot;</span>);</span><br><span class="line">        updateFirstChart.setExecMessage(<span class="string">&quot;任务已经完成&quot;</span>);</span><br><span class="line">        updateChartData.setGenResult(splits[<span class="number">2</span>].trim());</span><br><span class="line">        updateChartData.setGenChart(splits[<span class="number">1</span>].trim());</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isUpdateChartData</span> <span class="operator">=</span> chartService.updateById(updateChartData);</span><br><span class="line">        <span class="keyword">if</span> (!isUpdateChartData) &#123;</span><br><span class="line">            handleChartUpdateError(chart.getId());</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, threadPoolExecutor);</span><br><span class="line">    <span class="keyword">return</span> ResultUtils.success(<span class="string">&quot;任务提交成功！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">handleChartUpdateError</span><span class="params">(<span class="type">long</span> chartId)</span> &#123;</span><br><span class="line">    <span class="type">Chart</span> <span class="variable">updateChartResult</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Chart</span>();</span><br><span class="line">    updateChartResult.setId(chartId);</span><br><span class="line">    updateChartResult.setStatus(<span class="string">&quot;failed&quot;</span>);</span><br><span class="line">    updateChartResult.setExecMessage(<span class="string">&quot;更新图表状态失败！&quot;</span>);</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">updateResult</span> <span class="operator">=</span> chartService.updateById(updateChartResult);</span><br><span class="line">    <span class="keyword">if</span> (!updateResult) &#123;</span><br><span class="line">        log.error(<span class="string">&quot;更新图表失败状态失败&quot;</span> + chartId + <span class="string">&quot;,&quot;</span> + <span class="string">&quot;更新图表状态失败！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><h3 id="后端收获"><a href="#后端收获" class="headerlink" title="后端收获"></a>后端收获</h3></li></ul><blockquote><p>今天主要学习了 JUC 并发编程，使用线程池来解决接口响应时间较长，等待时间长的问题，由于以前的项目中很少使用线程，此次也是对线程池有了一个清晰的理解，以及线程池的简单使用，并写入到接口中，实际测试，相对于来说收获还是蛮多的，接触新的知识花的时间也多，为了就是更好的、更深入的学习并发编程的奥妙。</p></blockquote><h2 id="今日前端的开发"><a href="#今日前端的开发" class="headerlink" title="今日前端的开发"></a>今日前端的开发</h2><ul><li><ol><li>添加新的路由信息<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="attr">path</span>: <span class="string">&#x27;/chart-add/async&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;制作图表(异步)&#x27;</span>, <span class="attr">icon</span>: <span class="string">&#x27;lineChart&#x27;</span>, <span class="attr">component</span>: <span class="string">&#x27;./Chart/AsyncAddChart&#x27;</span> &#125;,</span><br></pre></td></tr></table></figure></li></ol></li><li><ol><li>优化原来的页面，接入新的接口，重新调用 openAPI 更新接口代码</li></ol></li><li><ol><li>前端的优化代码如下:</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">asyncAddChart</span>: <span class="title class_">React</span>.<span class="property">FC</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">const</span> [submitting, setSubmitting] = useState&lt;boolean&gt;(<span class="literal">false</span>);</span><br><span class="line"><span class="keyword">const</span> [form] = <span class="title function_">useForm</span>();</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">normFile</span> = (<span class="params">e: any</span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Upload event:&#x27;</span>, e);</span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(e)) &#123;</span><br><span class="line">    <span class="keyword">return</span> e;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> e?.<span class="property">fileList</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">onFinish</span> = <span class="keyword">async</span> (<span class="params">values: any</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (submitting) <span class="keyword">return</span>;</span><br><span class="line">    <span class="title function_">setSubmitting</span>(<span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">const</span> params = &#123;</span><br><span class="line">    ...values,</span><br><span class="line">    <span class="attr">file</span>: <span class="literal">undefined</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">genChartByAIUseAsyncUsingPOST</span>(params, &#123;&#125;, values?.<span class="property">file</span>[<span class="number">0</span>]?.<span class="property">originFileObj</span>);</span><br><span class="line">    <span class="keyword">if</span> (res?.<span class="property">data</span>) &#123;</span><br><span class="line">        message.<span class="title function_">success</span>(res.<span class="property">data</span>);</span><br><span class="line">        form.<span class="title function_">resetFields</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (<span class="attr">e</span>: any) &#123;</span><br><span class="line">    message.<span class="title function_">error</span>(<span class="string">&#x27;分析失败！&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">setSubmitting</span>(<span class="literal">false</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;async-add-chart&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Card</span> <span class="attr">title</span>=<span class="string">&#123;</span>&#x27;<span class="attr">智能分析</span>(<span class="attr">异步</span>)&#x27;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Form</span> <span class="attr">form</span>=<span class="string">&#123;form&#125;</span> <span class="attr">name</span>=<span class="string">&quot;addChart&quot;</span> <span class="attr">onFinish</span>=<span class="string">&#123;onFinish&#125;</span> <span class="attr">labelAlign</span>=<span class="string">&#123;</span>&#x27;<span class="attr">left</span>&#x27;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Form.Item</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">name</span>=<span class="string">&quot;name&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">label</span>=<span class="string">&quot;图表名称：&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">rules</span>=<span class="string">&#123;[&#123;</span> <span class="attr">required:</span> <span class="attr">true</span>, <span class="attr">message:</span> &#x27;<span class="attr">请输入图表的名称</span>&#x27; &#125;]&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Input</span> <span class="attr">placeholder</span>=<span class="string">&quot;请填写图表名称&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Form.Item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Form.Item</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">name</span>=<span class="string">&quot;goal&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">label</span>=<span class="string">&quot;分析诉求：&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">rules</span>=<span class="string">&#123;[&#123;</span> <span class="attr">required:</span> <span class="attr">true</span>, <span class="attr">message:</span> &#x27;<span class="attr">请输入诉求</span>&#x27; &#125;]&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">TextArea</span> <span class="attr">placeholder</span>=<span class="string">&quot;请填写您的诉求&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Form.Item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Form.Item</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">name</span>=<span class="string">&quot;chartType&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">label</span>=<span class="string">&quot;图表类型：&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">hasFeedback</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">rules</span>=<span class="string">&#123;[&#123;</span> <span class="attr">required:</span> <span class="attr">true</span>, <span class="attr">message:</span> &#x27;<span class="attr">请选择图表类型</span>&#x27; &#125;]&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Select</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">placeholder</span>=<span class="string">&quot;请选择图表类型&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">options</span>=<span class="string">&#123;[</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                &#123; <span class="attr">value:</span> &#x27;<span class="attr">折线图</span>&#x27;, <span class="attr">label:</span> &#x27;<span class="attr">折线图</span>&#x27; &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                &#123; <span class="attr">value:</span> &#x27;<span class="attr">柱状图</span>&#x27;, <span class="attr">label:</span> &#x27;<span class="attr">柱状图</span>&#x27; &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                &#123; <span class="attr">value:</span> &#x27;<span class="attr">堆叠图</span>&#x27;, <span class="attr">label:</span> &#x27;<span class="attr">堆叠图</span>&#x27; &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                &#123; <span class="attr">value:</span> &#x27;<span class="attr">饼图</span>&#x27;, <span class="attr">label:</span> &#x27;<span class="attr">饼图</span>&#x27; &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                &#123; <span class="attr">value:</span> &#x27;<span class="attr">雷达图</span>&#x27;, <span class="attr">label:</span> &#x27;<span class="attr">雷达图</span>&#x27; &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            ]&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &gt;</span><span class="tag">&lt;/<span class="name">Select</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Form.Item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Form.Item</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">rules</span>=<span class="string">&#123;[&#123;</span> <span class="attr">required:</span> <span class="attr">true</span>, <span class="attr">message:</span> &#x27;<span class="attr">请上传文件</span>&#x27; &#125;]&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">name</span>=<span class="string">&quot;file&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">label</span>=<span class="string">&quot;上传文件：&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">valuePropName</span>=<span class="string">&quot;fileList&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">getValueFromEvent</span>=<span class="string">&#123;normFile&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Upload</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Button</span> <span class="attr">icon</span>=<span class="string">&#123;</span>&lt;<span class="attr">UploadOutlined</span> /&gt;</span>&#125;&gt;数据文件<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">Upload</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Form.Item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Form.Item</span> <span class="attr">wrapperCol</span>=<span class="string">&#123;&#123;</span> <span class="attr">span:</span> <span class="attr">12</span>, <span class="attr">offset:</span> <span class="attr">3</span> &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Space</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">htmlType</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">loading</span>=<span class="string">&#123;submitting&#125;</span> <span class="attr">disabled</span>=<span class="string">&#123;submitting&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                &#123;submitting ? &#x27;分析中……&#x27; : &#x27;提交分析（异步）&#x27;&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Button</span> <span class="attr">htmlType</span>=<span class="string">&quot;reset&quot;</span> <span class="attr">disabled</span>=<span class="string">&#123;submitting&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                重置</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">Space</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Form.Item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Form</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Card</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> asyncAddChart;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>效果图如下</p><ol><li>填写图表<br><img src="https://cdn.jsdelivr.net/gh/keependeavour/picgo/img/~LNM3I~S%5DVHDAN2WPEIYWD1.png" alt="步骤一"></li><li>提交查看<br><img src="https://cdn.jsdelivr.net/gh/keependeavour/picgo/img/SHDG4GTM9KF1RSFNMVBFJ.png" alt="步骤二"></li><li>结果渲染<br><img src="https://cdn.jsdelivr.net/gh/keependeavour/picgo/img/X5%40BVG35M%7B65%40WPU64~PXUT.png" alt="步骤三"></li></ol></li><li>前端收获<blockquote><p>如何渲染异步化的组件显示，熟悉 ant design 组件库，“Result” 组件的使用。</p></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> 项目经验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 智能BI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>智能BI项目-接口优化(五)</title>
      <link href="/2023/08/25/%E9%A1%B9%E7%9B%AE%E7%BB%8F%E9%AA%8C/%E6%99%BA%E8%83%BDBI/%E6%99%BA%E8%83%BDBI%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91-5/"/>
      <url>/2023/08/25/%E9%A1%B9%E7%9B%AE%E7%BB%8F%E9%AA%8C/%E6%99%BA%E8%83%BDBI/%E6%99%BA%E8%83%BDBI%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91-5/</url>
      
        <content type="html"><![CDATA[<h2 id="往期开发-已经完成"><a href="#往期开发-已经完成" class="headerlink" title="往期开发(已经完成)"></a>往期开发(已经完成)</h2><ul><li><a href="/2023/08/21/项目经验/智能BI/智能BI项目开发-1/">智能 BI 项目-介绍(一)</a></li><li><a href="/2023/08/22/项目经验/智能BI/智能BI项目开发-2/">智能 BI 项目-初始化(二)</a></li><li><a href="/2023/08/23/项目经验/智能BI/智能BI项目开发-3/">智能 BI 项目-初学 AI 分析(三)</a></li><li><a href="/2023/08/24/项目经验/智能BI/智能BI项目开发-4/">智能 BI 项目-AI 接口调用(四)</a></li><li><a href="/2023/08/25/项目经验/智能BI/智能BI项目开发-5/">智能 BI 项目-接口优化(五)</a></li><li><a href="/2023/08/26/项目经验/智能BI/智能BI项目开发-6/">智能 BI 项目-接口的异步化(六)</a></li><li><a href="/2023/08/28/项目经验/智能BI/智能BI项目开发-7/">智能 BI 项目-引入 RabbitMQ(七)</a></li></ul><h2 id="今日后端开发过程"><a href="#今日后端开发过程" class="headerlink" title="今日后端开发过程"></a>今日后端开发过程</h2><ul><li><h3 id="系统优化"><a href="#系统优化" class="headerlink" title="系统优化"></a>系统优化</h3><ul><li><h4 id="提出问题"><a href="#提出问题" class="headerlink" title="提出问题"></a>提出问题</h4><ul><li><p>1.如果用户上传一个很大的文件，例如 100G、200G 等超大文件</p></li><li><p>2.用户使用第三方软件进行疯狂提交。</p></li><li><p>3.从前几次 AI 绘制情况来看速度很慢，如果多个用户同时需要生成，给系统造成了巨大的压力，如何不影响用户体验的情况下维护系统的可用性。</p></li></ul></li><li><h4 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h4><ul><li><p>1.如果用户上传很大的文件</p><p>涉及到用户自主上传操作，必须校验文件</p><blockquote><p>校验的角度：</p><ol><li>文件的大小</li><li>文件的后缀</li><li>文件的内容（成本较高）</li><li>文件的合规性（比如敏感内容，建议使用第三方的审核功能来进行）</li></ol></blockquote><p>扩展点：接入腾讯云的图片万象数据审核（COS 对象存储的审核功能）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 文件校验</span></span><br><span class="line"> <span class="type">long</span> <span class="variable">size</span> <span class="operator">=</span> multipartFile.getSize();</span><br><span class="line"> <span class="type">String</span> <span class="variable">originalFilename</span> <span class="operator">=</span> multipartFile.getOriginalFilename();</span><br><span class="line"> ThrowUtils.throwIf(size &gt; MAX_FILE_SIZE, ErrorCode.PARAMS_ERROR, <span class="string">&quot;文件过大不得超过1MB&quot;</span>);</span><br><span class="line"> ThrowUtils.throwIf(!FILE_NAME_LIST.contains(FileUtil.getSuffix(originalFilename)), ErrorCode.PARAMS_ERROR, <span class="string">&quot;不支持此文件&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p>2.数据存储</p><p>目前，AI 分析的原始数据都存储到了一张表中的一个字段（chart 表）</p><blockquote><p>问题：</p><ol><li>用户上传的原始数据量很大，图表日益增多，查询 Chart 表就会很慢。</li><li>对于 BI 平台，用户可以对原始数据进行定制分析，只取一行或者一列进行分析，目前的存储方式只能取出该字段的所有内容</li></ol></blockquote><p>解决方案</p><ul><li><p>分库分表</p><p>把每个图标对应的原始数据单独保存为一个新的数据表，而不存在一个字段里面</p><p>格式 表名+此次分析的 ID 额外在创建一张表</p><blockquote><p>优点：</p><ol><li>存储时，能够分开进行存储，互相不影响，增加了安全性</li><li>查询时，可以使用各种 sql 语句灵活的提取需要的字段，查询性能更快</li></ol></blockquote></li></ul></li></ul></li></ul></li><li><h3 id="分库分表"><a href="#分库分表" class="headerlink" title="分库分表"></a>分库分表</h3><ul><li><h4 id="水平分表"><a href="#水平分表" class="headerlink" title="水平分表"></a>水平分表</h4><p>水平分表是将同一张表中的数据按一定的规则划分到不同的物理存储位置上，以达到分摊单张表的数据及访问压力的目的。对于 SQL 分为两类: id-based 分表和 range-based 分表。</p><blockquote><p>水平分表的优点:</p><ol><li>单个表的数据量减少，查询效率提高</li><li>可以通过增加节点，提高系统的扩展性和容错性</li></ol><p>水平分表的缺点:</p><ol><li>事务并发处理复杂度增加，需要增加分布式事务的管理，性能和复杂度都有所牺牲</li><li>跨节点查询困难，需要设计跨节点的查询模块</li></ol></blockquote></li><li><h4 id="垂直分库"><a href="#垂直分库" class="headerlink" title="垂直分库"></a>垂直分库</h4><p>垂直分库，指的是根据业务模块的不同，将不同的字段或表分到不同的数据库中。垂直分库基于数据库内核支持对应用透明，无需额外的开发代码，易于维护升级。</p><blockquote><p>垂直分库的优点:</p><ol><li>减少单个数据库的数据量，提高系统的查询效率</li><li>增加了系统的可扩展性，比水平分表更容易实现。</li></ol><p>垂直分库的缺点:</p><ol><li>不同数据库之间的维护和同步成本较高</li><li>现有系统的改造存在一定的难度:</li><li>系统的性能会受到数据库之间互相影响的影响</li></ol></blockquote><p>需要根据实际的业务场景和技术架构情况，综合考虑各种因素来选择适合自己的分库分表策略。</p></li></ul></li><li><h3 id="限流"><a href="#限流" class="headerlink" title="限流"></a>限流</h3><ul><li><h4 id="提出问题-1"><a href="#提出问题-1" class="headerlink" title="提出问题"></a>提出问题</h4></li></ul><p>问题：使用系统是需要消耗成本的，用户有可能疯狂刷量，让你破产。</p><p>解决：控制成本，限制用户调用总次数。用户在短时间内疯狂使用，导致服务器资源被占满，其他用户无法使用，需要进行限流。</p><ul><li><h4 id="限流的几种做法"><a href="#限流的几种做法" class="headerlink" title="限流的几种做法"></a>限流的几种做法</h4><p>访问链接：<a href="https://juejin.cn/post/6967742960540581918">https://juejin.cn/post/6967742960540581918</a></p><ol><li><p>固定窗口限流</p><blockquote><p>单位时间内允许部分操作<br>优点：最简单<br>缺点：可能出现流量突刺，产生流量高峰</p></blockquote></li><li><p>滑动窗口限流</p><blockquote><p>单位时间内允许部分操作，但是时间单位是滑动的，需要指定一个滑动单位<br>优点：能够解决流量突刺问题<br>缺点：实现相对复杂，并且与滑动单位有关，滑动单位越小，限流效果越好，但是很难选取到合适的滑动单位</p></blockquote></li><li><p>漏桶窗口限流</p><blockquote><p>以固定的速率处理请求，当请求桶满了之后，拒绝请求<br>优点：能够一定程度上应对流量突刺，能够固定速率处理请求，保证服务器的安全<br>缺点：没有办法迅速处理一批请求，只能一批一批的按顺序来处理</p></blockquote></li><li><p>令牌桶限流（推荐）</p><blockquote><p>管理员在访问钱生成一批令牌，每隔一段时间生成令牌，用户操作之前要先获取领盘才能够执行操作，拿不到令牌的就需要等待<br>优点：能够并发处理请求，并发性能会更高<br>需要考虑：还是会存在时间单位的选取问题</p></blockquote></li></ol></li><li><h4 id="限流的粒度"><a href="#限流的粒度" class="headerlink" title="限流的粒度"></a>限流的粒度</h4><blockquote><ol><li><p>针对某个方法限流，即单位时间内最多允许同时 XX 个操作使用这个方法</p></li><li><p>针对某个用户限流，比如单个用户单位时间内最多执行 XX 次操作</p></li><li><p>针对某个用户 x 方法限流，比如单用户单位时间内最多执行 XX 次这个方法</p></li></ol></blockquote></li><li><h4 id="Redisson-限流的实现"><a href="#Redisson-限流的实现" class="headerlink" title="Redisson 限流的实现"></a>Redisson 限流的实现</h4><ol><li><p>引入 Redisson 的依赖包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.redisson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>redisson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.21.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>创建 RedissonConfig 配置类，用户初始化 RedissonClient 对象单例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;spring.redis&quot;)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedissonConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer database;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String host;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer port;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedissonClient <span class="title function_">redissonClient</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Config</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Config</span>();</span><br><span class="line">        config.useSingleServer()</span><br><span class="line">                .setDatabase(database)</span><br><span class="line">                .setAddress(<span class="string">&quot;redis://&quot;</span> + host + <span class="string">&quot;:&quot;</span> + port);</span><br><span class="line">        <span class="type">RedissonClient</span> <span class="variable">redisson</span> <span class="operator">=</span> Redisson.create(config);</span><br><span class="line">        <span class="keyword">return</span> redisson;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编写 RedisLimiterManager</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 限流操作</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> key 区分不同的限流器，比如不同的用户 id 应该分别统计</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doRateLimit</span><span class="params">(String key)</span> &#123;</span><br><span class="line">    <span class="comment">// 创建一个名称为user_limiter的限流器，每秒最多访问 2 次</span></span><br><span class="line">    <span class="type">RRateLimiter</span> <span class="variable">rateLimiter</span> <span class="operator">=</span> redissonClient.getRateLimiter(key);</span><br><span class="line">    rateLimiter.trySetRate(RateType.OVERALL, <span class="number">2</span>, <span class="number">1</span>, RateIntervalUnit.SECONDS);</span><br><span class="line">    <span class="comment">// 每当一个操作来了后，请求一个令牌</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">canOp</span> <span class="operator">=</span> rateLimiter.tryAcquire(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (!canOp) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(ErrorCode.TOO_MANY_REQUEST);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>完善 AI 对话接口增加代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redisLimiterManager.doRateLimit(<span class="string">&quot;genChartByAI_&quot;</span> + loginUser.getId());</span><br></pre></td></tr></table></figure></li></ol></li></ul></li><li><h3 id="完整的-AI-对话代码"><a href="#完整的-AI-对话代码" class="headerlink" title="完整的 AI 对话代码"></a>完整的 AI 对话代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * AI对话分析</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> multipartFile</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> genChartByAiRequest</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/gen&quot;)</span></span><br><span class="line"><span class="keyword">public</span> BaseResponse&lt;BiResponse&gt; <span class="title function_">genChartByAI</span><span class="params">(<span class="meta">@RequestPart(&quot;file&quot;)</span> MultipartFile multipartFile,</span></span><br><span class="line"><span class="params">                                            GenChartByAiRequest genChartByAiRequest, HttpServletRequest request)</span> &#123;</span><br><span class="line">    <span class="comment">// 第二天内容</span></span><br><span class="line">    <span class="comment">// 参数获取</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">goal</span> <span class="operator">=</span> genChartByAiRequest.getGoal();</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> genChartByAiRequest.getName();</span><br><span class="line">    <span class="type">String</span> <span class="variable">chartType</span> <span class="operator">=</span> genChartByAiRequest.getChartType();</span><br><span class="line">    <span class="comment">// 参数校验</span></span><br><span class="line">    ThrowUtils.throwIf(StringUtils.isEmpty(goal), ErrorCode.PARAMS_ERROR, <span class="string">&quot;目标不能为空&quot;</span>);</span><br><span class="line">    ThrowUtils.throwIf(StringUtils.isEmpty(chartType), ErrorCode.PARAMS_ERROR, <span class="string">&quot;类型不能为空&quot;</span>);</span><br><span class="line">    ThrowUtils.throwIf(StringUtils.isEmpty(name), ErrorCode.PARAMS_ERROR, <span class="string">&quot;图表名称不能为空&quot;</span>);</span><br><span class="line">    <span class="comment">// 文件校验</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">size</span> <span class="operator">=</span> multipartFile.getSize();</span><br><span class="line">    <span class="type">String</span> <span class="variable">originalFilename</span> <span class="operator">=</span> multipartFile.getOriginalFilename();</span><br><span class="line">    ThrowUtils.throwIf(size &gt; MAX_FILE_SIZE, ErrorCode.PARAMS_ERROR, <span class="string">&quot;文件过大不得超过1MB&quot;</span>);</span><br><span class="line">    ThrowUtils.throwIf(!FILE_NAME_LIST.contains(FileUtil.getSuffix(originalFilename)), ErrorCode.PARAMS_ERROR, <span class="string">&quot;不支持此文件&quot;</span>);</span><br><span class="line">    <span class="comment">// 判断是否登录</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">loginUser</span> <span class="operator">=</span> userService.getLoginUser(request);</span><br><span class="line">    ThrowUtils.throwIf(Objects.isNull(loginUser), ErrorCode.NOT_LOGIN_ERROR);</span><br><span class="line">    redisLimiterManager.doRateLimit(<span class="string">&quot;genChartByAI_&quot;</span> + loginUser.getId());</span><br><span class="line">    <span class="comment">// 用户消息拼接</span></span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">userMessageBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">    userMessageBuilder.append(<span class="string">&quot;分析需求:&quot;</span>).append(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">newGoal</span> <span class="operator">=</span> goal + <span class="string">&quot;,请使用&quot;</span> + chartType;</span><br><span class="line">    userMessageBuilder.append(newGoal).append(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    userMessageBuilder.append(<span class="string">&quot;原始数据:&quot;</span>).append(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">dataStr</span> <span class="operator">=</span> ExcelUtils.excelToCsv(multipartFile);</span><br><span class="line">    userMessageBuilder.append(dataStr);</span><br><span class="line">    <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> aiManager.doChat(userMessageBuilder.toString());</span><br><span class="line">    String[] splits = content.split(<span class="string">&quot;【【【【【&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (splits.length != <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;AI 生成错误&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">BiResponse</span> <span class="variable">biResponse</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BiResponse</span>();</span><br><span class="line">    <span class="type">Chart</span> <span class="variable">chart</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Chart</span>();</span><br><span class="line">    chart.setUserId(loginUser.getId());</span><br><span class="line">    chart.setExecMessage(userMessageBuilder.toString());</span><br><span class="line">    chart.setGoal(goal);</span><br><span class="line">    chart.setName(name);</span><br><span class="line">    chart.setChartType(chartType);</span><br><span class="line">    chart.setChartData(dataStr);</span><br><span class="line">    chart.setGenResult(splits[<span class="number">2</span>].trim());</span><br><span class="line">    chart.setGenChart(splits[<span class="number">1</span>].trim());</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">isSave</span> <span class="operator">=</span> chartService.save(chart);</span><br><span class="line">    ThrowUtils.throwIf(!isSave, ErrorCode.SYSTEM_ERROR, <span class="string">&quot;图表保存失败！&quot;</span>);</span><br><span class="line">    biResponse.setGenChart(splits[<span class="number">1</span>].trim());</span><br><span class="line">    biResponse.setGenResult(splits[<span class="number">2</span>].trim());</span><br><span class="line">    biResponse.setChartId(chart.getId());</span><br><span class="line">    <span class="keyword">return</span> ResultUtils.success(biResponse);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h3 id="后端收获"><a href="#后端收获" class="headerlink" title="后端收获"></a>后端收获</h3><p>数据的分库分表存储，使用的场景以及对于数据的处理。对接口进行限流，学习了四种的分流算法，主要推荐令牌桶限流，效果好，代码实现不复杂。</p></li></ul><h2 id="今日前端开发过程"><a href="#今日前端开发过程" class="headerlink" title="今日前端开发过程"></a>今日前端开发过程</h2><ul><li><h3 id="添加路由，创建页面"><a href="#添加路由，创建页面" class="headerlink" title="添加路由，创建页面"></a>添加路由，创建页面</h3><p><img src="https://cdn.jsdelivr.net/gh/keependeavour/picgo/img/5db5b53ed56562cb81e6ddd4a6c6a89.png" alt="路由"></p></li><li><h3 id="对接后端接口，发送请求加载数据"><a href="#对接后端接口，发送请求加载数据" class="headerlink" title="对接后端接口，发送请求加载数据"></a>对接后端接口，发送请求加载数据</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line">const myChart: React.FC = () =&gt; &#123;</span><br><span class="line">    const &#123; initialState &#125; = useModel(&#x27;@@initialState&#x27;);</span><br><span class="line">    const &#123; currentUser &#125; = initialState || &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    const [loading, setLoading] = useState<span class="tag">&lt;<span class="name">boolean</span>&gt;</span>();</span><br><span class="line"></span><br><span class="line">    const initialSearchParams = &#123;</span><br><span class="line">        current: 1,</span><br><span class="line">        pageSize: 6,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    const [searchParams, setSearchParams] = useState<span class="tag">&lt;<span class="name">API.ChartQueryRequest</span>&gt;</span>(&#123;</span><br><span class="line">        ...initialSearchParams,</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    const [chartList, setChartList] = useState&lt;API.Chart[]&gt;();</span><br><span class="line"></span><br><span class="line">    const [total, setTotal] = useState<span class="tag">&lt;<span class="name">number</span>&gt;</span>();</span><br><span class="line"></span><br><span class="line">    const loadTableData = async () =&gt; &#123;</span><br><span class="line">        setLoading(true);</span><br><span class="line">        try &#123;</span><br><span class="line">        const res = await listChartByPageUsingPOST(searchParams);</span><br><span class="line">        if (res.data?.records) &#123;</span><br><span class="line">            const teChartList: API.Chart[] = [];</span><br><span class="line">            res.data?.records.forEach((element: API.Chart) =&gt; &#123;</span><br><span class="line">            if (element.genChart) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                const genChartParse = JSON.parse(element.genChart);</span><br><span class="line">                if (genChartParse?.title) &#123;</span><br><span class="line">                    genChartParse.title = undefined;</span><br><span class="line">                    element.genChart = JSON.stringify(genChartParse);</span><br><span class="line">                &#125;</span><br><span class="line">                teChartList.push(element);</span><br><span class="line">                &#125; catch (e) &#123;</span><br><span class="line">                message.error(element.name + &#x27;图表,数据有误！&#x27;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            setChartList(teChartList);</span><br><span class="line">            setTotal(res.data?.total ?? 0);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            message.error(&#x27;获取我的图表失败&#x27;);</span><br><span class="line">        &#125;</span><br><span class="line">        &#125; catch (e: any) &#123;</span><br><span class="line">        message.error(&#x27;21321获取我的图表失败:&#x27; + e.message);</span><br><span class="line">        &#125;</span><br><span class="line">        setLoading(false);</span><br><span class="line">    &#125;;</span><br><span class="line">    // searchParams发生变化时候进行调用</span><br><span class="line">    useEffect(() =&gt; &#123;</span><br><span class="line">        const use = loadTableData();</span><br><span class="line">    &#125;, [searchParams]);</span><br><span class="line">    return (</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;my-chart&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Search</span></span></span><br><span class="line"><span class="tag">            <span class="attr">placeholder</span>=<span class="string">&quot;请输入图表名称&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">enterButton</span></span></span><br><span class="line"><span class="tag">            <span class="attr">onSearch</span>=<span class="string">&#123;(value)</span> =&gt;</span> &#123;</span><br><span class="line">                setSearchParams(&#123;</span><br><span class="line">                ...initialSearchParams,</span><br><span class="line">                name: value,</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;&#125;</span><br><span class="line">            loading=&#123;loading&#125;</span><br><span class="line">            style=&#123;&#123; width: 200 &#125;&#125;</span><br><span class="line">            /&gt;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">List</span></span></span><br><span class="line"><span class="tag">            <span class="attr">itemLayout</span>=<span class="string">&quot;vertical&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">loading</span>=<span class="string">&#123;loading&#125;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">pagination</span>=<span class="string">&#123;&#123;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">onChange:</span> (<span class="attr">page</span>, <span class="attr">pageSize</span>) =&gt;</span> &#123;</span><br><span class="line">                setSearchParams(&#123;</span><br><span class="line">                ...searchParams,</span><br><span class="line">                current: page,</span><br><span class="line">                pageSize: pageSize,</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;,</span><br><span class="line">            current: searchParams.current,</span><br><span class="line">            pageSize: searchParams.pageSize,</span><br><span class="line">            total: total,</span><br><span class="line">            &#125;&#125;</span><br><span class="line">            dataSource=&#123;chartList&#125;</span><br><span class="line">            renderItem=&#123;(item) =&gt; (</span><br><span class="line">            <span class="tag">&lt;<span class="name">Card</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">marginTop:</span> &#x27;<span class="attr">20px</span>&#x27; &#125;&#125;&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">List.Item</span></span></span><br><span class="line"><span class="tag">                <span class="attr">key</span>=<span class="string">&#123;item.id&#125;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">extra</span>=<span class="string">&#123;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">item.genChart</span> &amp;&amp; (</span></span><br><span class="line"><span class="tag">                    &lt;<span class="attr">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">width:</span> &#x27;<span class="attr">600px</span>&#x27;, <span class="attr">height:</span> &#x27;<span class="attr">300px</span>&#x27;, <span class="attr">marginTop:</span> &#x27;<span class="attr">20px</span>&#x27; &#125;&#125;&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">ReactECharts</span> <span class="attr">option</span>=<span class="string">&#123;JSON.parse(item.genChart)&#125;</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    )</span><br><span class="line">                &#125;</span><br><span class="line">                &gt;</span><br><span class="line">                <span class="tag">&lt;<span class="name">List.Item.Meta</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">avatar</span>=<span class="string">&#123;</span>&lt;<span class="attr">Avatar</span> <span class="attr">src</span>=<span class="string">&#123;currentUser?.userAvatar&#125;</span> /&gt;</span>&#125;</span><br><span class="line">                    title=&#123;currentUser?.userName&#125;</span><br><span class="line">                    description=&#123;&#x27;图表类型:&#x27; + item.chartType&#125;</span><br><span class="line">                /&gt;</span><br><span class="line">                图表名称: &#123;item.name&#125;</span><br><span class="line">                <span class="tag">&lt;<span class="name">Divider</span>&gt;</span><span class="tag">&lt;/<span class="name">Divider</span>&gt;</span></span><br><span class="line">                分析目标: &#123;item.goal&#125;</span><br><span class="line">                <span class="tag">&lt;<span class="name">Divider</span>&gt;</span><span class="tag">&lt;/<span class="name">Divider</span>&gt;</span></span><br><span class="line">                分析结果: &#123;item.genResult&#125;</span><br><span class="line">                <span class="tag">&lt;/<span class="name">List.Item</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Card</span>&gt;</span></span><br><span class="line">            )&#125;</span><br><span class="line">        /&gt;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><h3 id="优化-UI-界面，添加-CSS-布局效果如下"><a href="#优化-UI-界面，添加-CSS-布局效果如下" class="headerlink" title="优化 UI 界面，添加 CSS 布局效果如下:"></a>优化 UI 界面，添加 CSS 布局效果如下:</h3><p><img src="https://cdn.jsdelivr.net/gh/keependeavour/picgo/img/93d4c28e64ea58aace3ccd8aad068a0.png" alt="效果图"></p></li><li><h3 id="其他优化"><a href="#其他优化" class="headerlink" title="其他优化"></a>其他优化</h3><ul><li><p>添加列表的 loading 加载，可以采用弱网测试来进行模拟加载过程</p></li><li><p>分页组件的使用</p></li><li><p>使用 List 组件进行渲染</p></li></ul></li><li><h3 id="添加了搜索按钮，指定搜索图表的名称"><a href="#添加了搜索按钮，指定搜索图表的名称" class="headerlink" title="添加了搜索按钮，指定搜索图表的名称"></a>添加了搜索按钮，指定搜索图表的名称</h3><p><img src="https://cdn.jsdelivr.net/gh/keependeavour/picgo/img/d41212380362f3d099cbe3d8ee07086.png" alt="搜索框"></p></li><li><h3 id="前端收获"><a href="#前端收获" class="headerlink" title="前端收获"></a>前端收获</h3><blockquote><p>如何渲染 list 组件，布局，以及指定搜索条件进行分页数据的获取，熟悉对 ant design 组件库的使用。扩展点，支持用户查看原始数据，支持跳转到图标编辑页面，去编辑图表信息重新进行 AI 分析绘制。</p></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> 项目经验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 智能BI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>智能BI项目-AI接口调用(四)</title>
      <link href="/2023/08/24/%E9%A1%B9%E7%9B%AE%E7%BB%8F%E9%AA%8C/%E6%99%BA%E8%83%BDBI/%E6%99%BA%E8%83%BDBI%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91-4/"/>
      <url>/2023/08/24/%E9%A1%B9%E7%9B%AE%E7%BB%8F%E9%AA%8C/%E6%99%BA%E8%83%BDBI/%E6%99%BA%E8%83%BDBI%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91-4/</url>
      
        <content type="html"><![CDATA[<h2 id="往期开发-已经完成"><a href="#往期开发-已经完成" class="headerlink" title="往期开发(已经完成)"></a>往期开发(已经完成)</h2><ul><li><a href="/2023/08/21/项目经验/智能BI/智能BI项目开发-1/">智能 BI 项目-介绍(一)</a></li><li><a href="/2023/08/22/项目经验/智能BI/智能BI项目开发-2/">智能 BI 项目-初始化(二)</a></li><li><a href="/2023/08/23/项目经验/智能BI/智能BI项目开发-3/">智能 BI 项目-初学 AI 分析(三)</a></li><li><a href="/2023/08/24/项目经验/智能BI/智能BI项目开发-4/">智能 BI 项目-AI 接口调用(四)</a></li><li><a href="/2023/08/25/项目经验/智能BI/智能BI项目开发-5/">智能 BI 项目-接口优化(五)</a></li><li><a href="/2023/08/26/项目经验/智能BI/智能BI项目开发-6/">智能 BI 项目-接口的异步化(六)</a></li><li><a href="/2023/08/28/项目经验/智能BI/智能BI项目开发-7/">智能 BI 项目-引入 RabbitMQ(七)</a></li></ul><h2 id="今日后端开发过程"><a href="#今日后端开发过程" class="headerlink" title="今日后端开发过程"></a>今日后端开发过程</h2><ul><li><h3 id="完善-AI-接口代码"><a href="#完善-AI-接口代码" class="headerlink" title="完善 AI 接口代码"></a>完善 AI 接口代码</h3><ul><li><h4 id="使用-AI-的-SDK"><a href="#使用-AI-的-SDK" class="headerlink" title="使用 AI 的 SDK"></a>使用 AI 的 SDK</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * AI 对话</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">doChat</span><span class="params">(String message)</span> &#123;</span><br><span class="line">    <span class="type">DevChatRequest</span> <span class="variable">devChatRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DevChatRequest</span>();</span><br><span class="line">    devChatRequest.setModelId(<span class="number">1659171950288818178L</span>);</span><br><span class="line">    devChatRequest.setMessage(message);</span><br><span class="line">    BaseResponse&lt;DevChatResponse&gt; response = yuCongMingClient.doChat(devChatRequest);</span><br><span class="line">    <span class="keyword">if</span> (response == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(ErrorCode.SYSTEM_ERROR, <span class="string">&quot;AI 响应错误&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> response.getData().getContent();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="AI-消息的发送"><a href="#AI-消息的发送" class="headerlink" title="AI 消息的发送"></a>AI 消息的发送</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> aiManager.doChat(userMessageBuilder.toString());</span><br><span class="line">String[] splits = content.split(<span class="string">&quot;【【【【【&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (splits.length != <span class="number">3</span>) &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;AI 生成错误&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="AI-消息的结果获取以及封装和存入"><a href="#AI-消息的结果获取以及封装和存入" class="headerlink" title="AI 消息的结果获取以及封装和存入"></a>AI 消息的结果获取以及封装和存入</h4><pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">BiResponse</span> <span class="variable">biResponse</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BiResponse</span>();</span><br><span class="line"><span class="type">Chart</span> <span class="variable">chart</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Chart</span>();</span><br><span class="line">chart.setUserId(loginUser.getId());</span><br><span class="line">chart.setExecMessage(userMessageBuilder.toString());</span><br><span class="line">chart.setGoal(goal);</span><br><span class="line">chart.setName(name);</span><br><span class="line">chart.setChartType(chartType);</span><br><span class="line">chart.setChartData(dataStr);</span><br><span class="line">chart.setGenResult(splits[<span class="number">2</span>].trim());</span><br><span class="line">chart.setGenChart(splits[<span class="number">1</span>].trim());</span><br><span class="line"><span class="type">boolean</span> <span class="variable">isSave</span> <span class="operator">=</span> chartService.save(chart);</span><br><span class="line">ThrowUtils.throwIf(!isSave, ErrorCode.SYSTEM_ERROR, <span class="string">&quot;图表保存失败！&quot;</span>);</span><br><span class="line">biResponse.setGenChart(splits[<span class="number">1</span>].trim());</span><br><span class="line">biResponse.setGenResult(splits[<span class="number">2</span>].trim());</span><br><span class="line">biResponse.setChartId(chart.getId());</span><br><span class="line"></span><br></pre></td></tr></table></figure></code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- #### 最终的代码效果</span><br><span class="line"></span><br><span class="line">  ```java</span><br><span class="line">      /**</span><br><span class="line">       * AI对话分析</span><br><span class="line">      *</span><br><span class="line">      * @param multipartFile</span><br><span class="line">      * @param genChartByAiRequest</span><br><span class="line">      * @param request</span><br><span class="line">      * @return</span><br><span class="line">      */</span><br><span class="line">      @PostMapping(&quot;/gen&quot;)</span><br><span class="line">      public BaseResponse&lt;BiResponse&gt; genChartByAI(@RequestPart(&quot;file&quot;) MultipartFile multipartFile,</span><br><span class="line">                                                  GenChartByAiRequest genChartByAiRequest, HttpServletRequest request) &#123;</span><br><span class="line">          // 第二天内容</span><br><span class="line">          // 参数获取</span><br><span class="line">          String goal = genChartByAiRequest.getGoal();</span><br><span class="line">          String name = genChartByAiRequest.getName();</span><br><span class="line">          String chartType = genChartByAiRequest.getChartType();</span><br><span class="line">          // 参数校验</span><br><span class="line">          ThrowUtils.throwIf(StringUtils.isEmpty(goal), ErrorCode.PARAMS_ERROR, &quot;目标不能为空&quot;);</span><br><span class="line">          ThrowUtils.throwIf(StringUtils.isEmpty(chartType), ErrorCode.PARAMS_ERROR, &quot;类型不能为空&quot;);</span><br><span class="line">          ThrowUtils.throwIf(StringUtils.isEmpty(name), ErrorCode.PARAMS_ERROR, &quot;图表名称不能为空&quot;);</span><br><span class="line">          // 判断是否登录</span><br><span class="line">          User loginUser = userService.getLoginUser(request);</span><br><span class="line">          ThrowUtils.throwIf(Objects.isNull(loginUser), ErrorCode.NOT_LOGIN_ERROR);</span><br><span class="line">          // 用户消息拼接</span><br><span class="line">          StringBuilder userMessageBuilder = new StringBuilder();</span><br><span class="line">          userMessageBuilder.append(&quot;分析需求:&quot;).append(&quot;\n&quot;);</span><br><span class="line">          String newGoal = goal + &quot;,请使用&quot; + chartType;</span><br><span class="line">          userMessageBuilder.append(newGoal).append(&quot;\n&quot;);</span><br><span class="line">          userMessageBuilder.append(&quot;原始数据:&quot;).append(&quot;\n&quot;);</span><br><span class="line">          String dataStr = ExcelUtils.excelToCsv(multipartFile);</span><br><span class="line">          userMessageBuilder.append(dataStr);</span><br><span class="line">          String content = aiManager.doChat(userMessageBuilder.toString());</span><br><span class="line">          String[] splits = content.split(&quot;【【【【【&quot;);</span><br><span class="line">          if (splits.length != 3) &#123;</span><br><span class="line">              throw new RuntimeException(&quot;AI 生成错误&quot;);</span><br><span class="line">          &#125;</span><br><span class="line">          BiResponse biResponse = new BiResponse();</span><br><span class="line">          Chart chart = new Chart();</span><br><span class="line">          chart.setUserId(loginUser.getId());</span><br><span class="line">          chart.setExecMessage(userMessageBuilder.toString());</span><br><span class="line">          chart.setGoal(goal);</span><br><span class="line">          chart.setName(name);</span><br><span class="line">          chart.setChartType(chartType);</span><br><span class="line">          chart.setChartData(dataStr);</span><br><span class="line">          chart.setGenResult(splits[2].trim());</span><br><span class="line">          chart.setGenChart(splits[1].trim());</span><br><span class="line">          boolean isSave = chartService.save(chart);</span><br><span class="line">          ThrowUtils.throwIf(!isSave, ErrorCode.SYSTEM_ERROR, &quot;图表保存失败！&quot;);</span><br><span class="line">          biResponse.setGenChart(splits[1].trim());</span><br><span class="line">          biResponse.setGenResult(splits[2].trim());</span><br><span class="line">          biResponse.setChartId(chart.getId());</span><br><span class="line">          return ResultUtils.success(biResponse);</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><h3 id="今天后端收获"><a href="#今天后端收获" class="headerlink" title="今天后端收获"></a>今天后端收获</h3></li></ul><blockquote><p>初次使用 AI 进行对数据的智能分析，并封装 AI 返回的结果，进行包装后返回给前端进行渲染，但存在一个比较严重的问题就是接口调用 AI 响应时间长，用户体验差，存在的问题可以再进行优化，自行感觉可以使用异步的方法来加快多个用户同时访问时候的响应速度问题。</p></blockquote><h2 id="今日前端开发过程"><a href="#今日前端开发过程" class="headerlink" title="今日前端开发过程"></a>今日前端开发过程</h2><ul><li><p>1.昨天已经设计好表单数据，后端已经初步完成智能分析的过程。重新使用前端的 openAPI 功能重构 service 代码</p></li><li><p>2.对接后端的接口代码如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">onFinish</span> = <span class="keyword">async</span> (<span class="params">values: any</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (submitting) <span class="keyword">return</span>;</span><br><span class="line">    <span class="title function_">setSubmitting</span>(<span class="literal">true</span>);</span><br><span class="line">    <span class="title function_">setChartResult</span>(<span class="literal">undefined</span>);</span><br><span class="line">    <span class="title function_">setChartData</span>(<span class="literal">undefined</span>);</span><br><span class="line">    <span class="keyword">const</span> params = &#123;</span><br><span class="line">    ...values,</span><br><span class="line">    <span class="attr">file</span>: <span class="literal">undefined</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">genChartByAIUsingPOST</span>(params, &#123;&#125;, values?.<span class="property">file</span>[<span class="number">0</span>]?.<span class="property">originFileObj</span>);</span><br><span class="line">    <span class="keyword">if</span> (res?.<span class="property">data</span>) &#123;</span><br><span class="line">        message.<span class="title function_">success</span>(<span class="string">&#x27;分析成功!&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (res.<span class="property">data</span>?.<span class="property">genChart</span>) &#123;</span><br><span class="line">        <span class="title function_">setChartData</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(res.<span class="property">data</span>?.<span class="property">genChart</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">setChartResult</span>(res.<span class="property">data</span>?.<span class="property">genResult</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        message.<span class="title function_">error</span>(<span class="string">&#x27;AI分析错误!&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (<span class="attr">e</span>: any) &#123;</span><br><span class="line">    message.<span class="title function_">error</span>(<span class="string">&#x27;分析失败！&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">setSubmitting</span>(<span class="literal">false</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>3.输入数据之后，点击智能分析，效果图如下：</p><p><img src="https://cdn.jsdelivr.net/gh/keependeavour/picgo/img/e9518cf3d0db81b6eedde2884b26747.png" alt="效果图"></p></li><li><p>4.等待一分钟过后渲染到页面上，效果图如下:</p><p><img src="https://cdn.jsdelivr.net/gh/keependeavour/picgo/img/07829d06cb07824c2a57ff1b6ef5e8e.png" alt="效果图"></p></li><li><p>5.至此对接渲染已完成</p></li><li><p>6.今日前端收获</p></li></ul><blockquote><p>如何使用 ant desgin 进行布局，设计一些细节加载过程，增加用户体验，但存在一个很大的问题，分析速度慢，当多个人同时点击时候，后端可能造成堵塞，响应速度很慢，也有可能多次点击，造成多次重复的分析。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 项目经验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 智能BI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>智能BI项目-初学AI分析(三)</title>
      <link href="/2023/08/23/%E9%A1%B9%E7%9B%AE%E7%BB%8F%E9%AA%8C/%E6%99%BA%E8%83%BDBI/%E6%99%BA%E8%83%BDBI%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91-3/"/>
      <url>/2023/08/23/%E9%A1%B9%E7%9B%AE%E7%BB%8F%E9%AA%8C/%E6%99%BA%E8%83%BDBI/%E6%99%BA%E8%83%BDBI%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91-3/</url>
      
        <content type="html"><![CDATA[<h2 id="往期开发-已经完成"><a href="#往期开发-已经完成" class="headerlink" title="往期开发(已经完成)"></a>往期开发(已经完成)</h2><ul><li><a href="/2023/08/21/项目经验/智能BI/智能BI项目开发-1/">智能 BI 项目-介绍(一)</a></li><li><a href="/2023/08/22/项目经验/智能BI/智能BI项目开发-2/">智能 BI 项目-初始化(二)</a></li><li><a href="/2023/08/23/项目经验/智能BI/智能BI项目开发-3/">智能 BI 项目-初学 AI 分析(三)</a></li><li><a href="/2023/08/24/项目经验/智能BI/智能BI项目开发-4/">智能 BI 项目-AI 接口调用(四)</a></li><li><a href="/2023/08/25/项目经验/智能BI/智能BI项目开发-5/">智能 BI 项目-接口优化(五)</a></li><li><a href="/2023/08/26/项目经验/智能BI/智能BI项目开发-6/">智能 BI 项目-接口的异步化(六)</a></li><li><a href="/2023/08/28/项目经验/智能BI/智能BI项目开发-7/">智能 BI 项目-引入 RabbitMQ(七)</a></li></ul><h2 id="今日后端开发流程"><a href="#今日后端开发流程" class="headerlink" title="今日后端开发流程"></a>今日后端开发流程</h2><ul><li><h3 id="AI-数据接口的设计"><a href="#AI-数据接口的设计" class="headerlink" title="AI 数据接口的设计"></a>AI 数据接口的设计</h3><ul><li><h4 id="接口参数的设计"><a href="#接口参数的设计" class="headerlink" title="接口参数的设计"></a>接口参数的设计</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> BaseResponse&lt;string&gt; <span class="title function_">genChartByAI</span><span class="params">(<span class="meta">@RequestPart(&quot;file&quot;)</span> MultipartFile multipartFile,</span></span><br><span class="line"><span class="params">                                                GenChartByAiRequest genChartByAiRequest, HttpServletRequest request)</span>&#123;&#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="接口的实现过程"><a href="#接口的实现过程" class="headerlink" title="接口的实现过程"></a>接口的实现过程</h4><ul><li><p>参数的获取和校验</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 参数获取</span></span><br><span class="line"><span class="type">String</span> <span class="variable">goal</span> <span class="operator">=</span> genChartByAiRequest.getGoal();</span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> genChartByAiRequest.getName();</span><br><span class="line"><span class="type">String</span> <span class="variable">chartType</span> <span class="operator">=</span> genChartByAiRequest.getChartType();</span><br><span class="line"><span class="comment">// 参数校验 throwUtils 异常工具类</span></span><br><span class="line">ThrowUtils.throwIf(StringUtils.isEmpty(goal), ErrorCode.PARAMS_ERROR, <span class="string">&quot;目标不能为空&quot;</span>);</span><br><span class="line">ThrowUtils.throwIf(StringUtils.isEmpty(chartType), ErrorCode.PARAMS_ERROR, <span class="string">&quot;类型不能为空&quot;</span>);</span><br><span class="line">ThrowUtils.throwIf(StringUtils.isEmpty(name), ErrorCode.PARAMS_ERROR, <span class="string">&quot;图表名称不能为空&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p>用户的鉴权</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断是否登录</span></span><br><span class="line"><span class="type">User</span> <span class="variable">loginUser</span> <span class="operator">=</span> userService.getLoginUser(request);</span><br><span class="line">ThrowUtils.throwIf(Objects.isNull(loginUser), ErrorCode.NOT_LOGIN_ERROR);</span><br></pre></td></tr></table></figure></li><li><p>用户的 AI 消息拼接</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用户消息拼接</span></span><br><span class="line"> <span class="type">StringBuilder</span> <span class="variable">userMessageBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line"> userMessageBuilder.append(<span class="string">&quot;分析需求:&quot;</span>).append(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"> <span class="type">String</span> <span class="variable">newGoal</span> <span class="operator">=</span> goal + <span class="string">&quot;,请使用&quot;</span> + chartType;</span><br><span class="line"> userMessageBuilder.append(newGoal).append(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"> userMessageBuilder.append(<span class="string">&quot;原始数据:&quot;</span>).append(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"> <span class="type">String</span> <span class="variable">dataStr</span> <span class="operator">=</span> ExcelUtils.excelToCsv(multipartFile);</span><br><span class="line"> userMessageBuilder.append(dataStr);</span><br><span class="line"> <span class="keyword">return</span> ResultUtils.success(userMessageBuilder.toString());</span><br></pre></td></tr></table></figure></li></ul></li><li><h3 id="最终具体的代码"><a href="#最终具体的代码" class="headerlink" title="最终具体的代码"></a>最终具体的代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * AI对话分析</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> multipartFile</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> genChartByAiRequest</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="meta">@PostMapping(&quot;/gen&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> BaseResponse&lt;string&gt; <span class="title function_">genChartByAI</span><span class="params">(<span class="meta">@RequestPart(&quot;file&quot;)</span> MultipartFile multipartFile,</span></span><br><span class="line"><span class="params">                                              GenChartByAiRequest genChartByAiRequest, HttpServletRequest request)</span> &#123;</span><br><span class="line">      <span class="comment">// 第二天内容</span></span><br><span class="line">      <span class="comment">// 参数获取</span></span><br><span class="line">      <span class="type">String</span> <span class="variable">goal</span> <span class="operator">=</span> genChartByAiRequest.getGoal();</span><br><span class="line">      <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> genChartByAiRequest.getName();</span><br><span class="line">      <span class="type">String</span> <span class="variable">chartType</span> <span class="operator">=</span> genChartByAiRequest.getChartType();</span><br><span class="line">      <span class="comment">// 参数校验</span></span><br><span class="line">      ThrowUtils.throwIf(StringUtils.isEmpty(goal), ErrorCode.PARAMS_ERROR, <span class="string">&quot;目标不能为空&quot;</span>);</span><br><span class="line">      ThrowUtils.throwIf(StringUtils.isEmpty(chartType), ErrorCode.PARAMS_ERROR, <span class="string">&quot;类型不能为空&quot;</span>);</span><br><span class="line">      ThrowUtils.throwIf(StringUtils.isEmpty(name), ErrorCode.PARAMS_ERROR, <span class="string">&quot;图表名称不能为空&quot;</span>);</span><br><span class="line">      <span class="comment">// 判断是否登录</span></span><br><span class="line">      <span class="type">User</span> <span class="variable">loginUser</span> <span class="operator">=</span> userService.getLoginUser(request);</span><br><span class="line">      ThrowUtils.throwIf(Objects.isNull(loginUser), ErrorCode.NOT_LOGIN_ERROR);</span><br><span class="line">      <span class="comment">// 用户消息拼接</span></span><br><span class="line">      <span class="type">StringBuilder</span> <span class="variable">userMessageBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">      userMessageBuilder.append(<span class="string">&quot;分析需求:&quot;</span>).append(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">      <span class="type">String</span> <span class="variable">newGoal</span> <span class="operator">=</span> goal + <span class="string">&quot;,请使用&quot;</span> + chartType;</span><br><span class="line">      userMessageBuilder.append(newGoal).append(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">      userMessageBuilder.append(<span class="string">&quot;原始数据:&quot;</span>).append(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">      <span class="type">String</span> <span class="variable">dataStr</span> <span class="operator">=</span> ExcelUtils.excelToCsv(multipartFile);</span><br><span class="line">      userMessageBuilder.append(dataStr);</span><br><span class="line">      <span class="keyword">return</span> ResultUtils.success(userMessageBuilder.toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><h3 id="今天后端收获"><a href="#今天后端收获" class="headerlink" title="今天后端收获"></a>今天后端收获</h3><p>主要是学习了 AI 如何进行训练，AI 对话的系统预设，AI 的关键字提取，指定 AI 的输入和输出，并要求按照具体的格式进行回答。构建 AI 消息，压缩用户上传的文件信息。</p></li></ul><h2 id="今日前端开发流程"><a href="#今日前端开发流程" class="headerlink" title="今日前端开发流程"></a>今日前端开发流程</h2><ul><li><p>1.用户填写分析目标，制定此次分析的名称，以及生成图表的类型。</p></li><li><p>2.上传用户的原始数据</p></li><li><p>3.提交给后端接口</p></li><li><p>4.使用 ant design 提供的组件库 进行前端页面的构建</p><ul><li><p>构件图如下:</p><p><img src="https://cdn.jsdelivr.net/gh/keependeavour/picgo/img/ac75dae5435432606103623b428cea6.png" alt="智能分析"></p></li></ul></li><li><p>5.今天前端收获<br>如何使用 ant design 的组件库，搭建前端的表单信息。初次使用 react 进行构建，通过官方文档来进行一些组件的使用和定制。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 项目经验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 智能BI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>智能BI项目-初始化(二)</title>
      <link href="/2023/08/22/%E9%A1%B9%E7%9B%AE%E7%BB%8F%E9%AA%8C/%E6%99%BA%E8%83%BDBI/%E6%99%BA%E8%83%BDBI%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91-2/"/>
      <url>/2023/08/22/%E9%A1%B9%E7%9B%AE%E7%BB%8F%E9%AA%8C/%E6%99%BA%E8%83%BDBI/%E6%99%BA%E8%83%BDBI%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91-2/</url>
      
        <content type="html"><![CDATA[<h2 id="往期开发-已经完成"><a href="#往期开发-已经完成" class="headerlink" title="往期开发(已经完成)"></a>往期开发(已经完成)</h2><ul><li><a href="/2023/08/21/项目经验/智能BI/智能BI项目开发-1/">智能 BI 项目-介绍(一)</a></li><li><a href="/2023/08/22/项目经验/智能BI/智能BI项目开发-2/">智能 BI 项目-初始化(二)</a></li><li><a href="/2023/08/23/项目经验/智能BI/智能BI项目开发-3/">智能 BI 项目-初学 AI 分析(三)</a></li><li><a href="/2023/08/24/项目经验/智能BI/智能BI项目开发-4/">智能 BI 项目-AI 接口调用(四)</a></li><li><a href="/2023/08/25/项目经验/智能BI/智能BI项目开发-5/">智能 BI 项目-接口优化(五)</a></li><li><a href="/2023/08/26/项目经验/智能BI/智能BI项目开发-6/">智能 BI 项目-接口的异步化(六)</a></li><li><a href="/2023/08/28/项目经验/智能BI/智能BI项目开发-7/">智能 BI 项目-引入 RabbitMQ(七)</a></li></ul><h2 id="后端初始化"><a href="#后端初始化" class="headerlink" title="后端初始化"></a>后端初始化</h2><ul><li><h3 id="1-后端框架的搭建"><a href="#1-后端框架的搭建" class="headerlink" title="1.后端框架的搭建"></a>1.后端框架的搭建</h3><ul><li>拉取自己提前写好的 springboot 基础整合，项目文件结构如下:</li></ul><p><img src="https://cdn.jsdelivr.net/gh/keependeavour/picgo/img/0338549fa104bbf41a97159f34f5b68.png" alt="项目文件结构图"></p><ul><li>使用 Mybatis-X 生成基础代码，移动 entity，service，mapper 等文件到指定目录</li></ul></li><li><h3 id="2-设计数据库以及表"><a href="#2-设计数据库以及表" class="headerlink" title="2.设计数据库以及表"></a>2.设计数据库以及表</h3><ul><li>执行如下 sql 进行库和表的创建:</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">-- 创建库</span><br><span class="line">create database if not exists bi;</span><br><span class="line"></span><br><span class="line">-- 切换库</span><br><span class="line">use bi;</span><br><span class="line"></span><br><span class="line">-- 用户表</span><br><span class="line">create table if not exists user</span><br><span class="line">(</span><br><span class="line">    id           bigint auto_increment comment &#x27;id&#x27; primary key,</span><br><span class="line">    userAccount  varchar(256)                           not null comment &#x27;账号&#x27;,</span><br><span class="line">    userPassword varchar(512)                           not null comment &#x27;密码&#x27;,</span><br><span class="line">    userName     varchar(256)                           null comment &#x27;用户昵称&#x27;,</span><br><span class="line">    userAvatar   varchar(1024)                          null comment &#x27;用户头像&#x27;,</span><br><span class="line">    userRole     varchar(256) default &#x27;user&#x27;            not null comment &#x27;用户角色：user/admin&#x27;,</span><br><span class="line">    createTime   datetime     default CURRENT_TIMESTAMP not null comment &#x27;创建时间&#x27;,</span><br><span class="line">    updateTime   datetime     default CURRENT_TIMESTAMP not null on update CURRENT_TIMESTAMP comment &#x27;更新时间&#x27;,</span><br><span class="line">    isDelete     tinyint      default 0                 not null comment &#x27;是否删除&#x27;,</span><br><span class="line">    index idx_userAccount (userAccount)</span><br><span class="line">    ) comment &#x27;用户&#x27; collate = utf8mb4_unicode_ci;</span><br><span class="line"></span><br><span class="line">-- 图表表</span><br><span class="line">create table if not exists chart</span><br><span class="line">(</span><br><span class="line">    id           bigint auto_increment comment &#x27;id&#x27; primary key,</span><br><span class="line">    goal text  null comment &#x27;分析目标&#x27;,</span><br><span class="line">    `name`               varchar(128) null comment &#x27;图表名称&#x27;,</span><br><span class="line">    chartData    text  null comment &#x27;图表数据&#x27;,</span><br><span class="line">    chartType   varchar(128) null comment &#x27;图表类型&#x27;,</span><br><span class="line">    genChart text null comment &#x27;生成的图表数据&#x27;,</span><br><span class="line">    genResult text null comment &#x27;生成的分析结论&#x27;,</span><br><span class="line">    status       varchar(128) not null default &#x27;wait&#x27; comment &#x27;wait,running,succeed,failed&#x27;,</span><br><span class="line">    execMessage  text   null comment &#x27;执行信息&#x27;,</span><br><span class="line">    userId       bigint null comment &#x27;创建用户 id&#x27;,</span><br><span class="line">    createTime   datetime     default CURRENT_TIMESTAMP not null comment &#x27;创建时间&#x27;,</span><br><span class="line">    updateTime   datetime     default CURRENT_TIMESTAMP not null on update CURRENT_TIMESTAMP comment &#x27;更新时间&#x27;,</span><br><span class="line">    isDelete     tinyint      default 0                 not null comment &#x27;是否删除&#x27;</span><br><span class="line">) comment &#x27;图表信息表&#x27; collate = utf8mb4_unicode_ci;</span><br></pre></td></tr></table></figure><ul><li><p>使用 idea 中的 database 连接 mysql 数据源查看执行 sql 后生成的表格如下：</p><p><img src="https://cdn.jsdelivr.net/gh/keependeavour/picgo/img/22fa6131ea6190962758ebd18cef109.png" alt="表"></p></li></ul></li><li><h3 id="封装通用类以及异常"><a href="#封装通用类以及异常" class="headerlink" title="封装通用类以及异常"></a>封装通用类以及异常</h3><ul><li><p>封装统一的返回结果包装类</p><p><img src="https://cdn.jsdelivr.net/gh/keependeavour/picgo/img/e75af99c2456fe6d6e61bf21f32e7c4.png" alt="返回类"></p></li><li><p>封装全局异常类</p><p><img src="https://cdn.jsdelivr.net/gh/keependeavour/picgo/img/e9c8a57f83b6fb79f24064042535b33.png" alt="异常类"></p></li><li><p>配置类</p><p><img src="https://cdn.jsdelivr.net/gh/keependeavour/picgo/img/8b0a7b86c821bc33c93fb348842d7bc.png" alt="配置类"></p></li><li><p>manager 通用 service</p><p><img src="https://cdn.jsdelivr.net/gh/keependeavour/picgo/img/7c44081b0b106e3f22519f0af382c08.png" alt="manager"></p></li></ul></li><li><h3 id="定义-controller-继承基础整合中的正删改查"><a href="#定义-controller-继承基础整合中的正删改查" class="headerlink" title="定义 controller 继承基础整合中的正删改查"></a>定义 controller 继承基础整合中的正删改查</h3><ul><li>ChartController 的基础接口代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> chartAddRequest</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/add&quot;)</span></span><br><span class="line"><span class="keyword">public</span> BaseResponse&lt;Long&gt; <span class="title function_">addChart</span><span class="params">(<span class="meta">@RequestBody</span> ChartAddRequest chartAddRequest, HttpServletRequest request)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (chartAddRequest == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(ErrorCode.PARAMS_ERROR);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">Chart</span> <span class="variable">chart</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Chart</span>();</span><br><span class="line">    BeanUtils.copyProperties(chartAddRequest, chart);</span><br><span class="line">    <span class="type">User</span> <span class="variable">loginUser</span> <span class="operator">=</span> userService.getLoginUser(request);</span><br><span class="line">    chart.setUserId(loginUser.getId());</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> chartService.save(chart);</span><br><span class="line">    ThrowUtils.throwIf(!result, ErrorCode.OPERATION_ERROR);</span><br><span class="line">    <span class="type">long</span> <span class="variable">newChartId</span> <span class="operator">=</span> chart.getId();</span><br><span class="line">    <span class="keyword">return</span> ResultUtils.success(newChartId);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> deleteRequest</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/delete&quot;)</span></span><br><span class="line"><span class="keyword">public</span> BaseResponse&lt;Boolean&gt; <span class="title function_">deleteChart</span><span class="params">(<span class="meta">@RequestBody</span> DeleteRequest deleteRequest, HttpServletRequest request)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (deleteRequest == <span class="literal">null</span> || deleteRequest.getId() &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(ErrorCode.PARAMS_ERROR);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.getLoginUser(request);</span><br><span class="line">    <span class="type">long</span> <span class="variable">id</span> <span class="operator">=</span> deleteRequest.getId();</span><br><span class="line">    <span class="comment">// 判断是否存在</span></span><br><span class="line">    <span class="type">Chart</span> <span class="variable">oldChart</span> <span class="operator">=</span> chartService.getById(id);</span><br><span class="line">    ThrowUtils.throwIf(oldChart == <span class="literal">null</span>, ErrorCode.NOT_FOUND_ERROR);</span><br><span class="line">    <span class="comment">// 仅本人或管理员可删除</span></span><br><span class="line">    <span class="keyword">if</span> (!oldChart.getUserId().equals(user.getId()) &amp;&amp; !userService.isAdmin(request)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(ErrorCode.NO_AUTH_ERROR);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> chartService.removeById(id);</span><br><span class="line">    <span class="keyword">return</span> ResultUtils.success(b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 更新（仅管理员）</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> chartUpdateRequest</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/update&quot;)</span></span><br><span class="line"><span class="meta">@AuthCheck(mustRole = UserConstant.ADMIN_ROLE)</span></span><br><span class="line"><span class="keyword">public</span> BaseResponse&lt;Boolean&gt; <span class="title function_">updateChart</span><span class="params">(<span class="meta">@RequestBody</span> ChartUpdateRequest chartUpdateRequest)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (chartUpdateRequest == <span class="literal">null</span> || chartUpdateRequest.getId() &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(ErrorCode.PARAMS_ERROR);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">Chart</span> <span class="variable">chart</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Chart</span>();</span><br><span class="line">    BeanUtils.copyProperties(chartUpdateRequest, chart);</span><br><span class="line">    <span class="type">long</span> <span class="variable">id</span> <span class="operator">=</span> chartUpdateRequest.getId();</span><br><span class="line">    <span class="comment">// 判断是否存在</span></span><br><span class="line">    <span class="type">Chart</span> <span class="variable">oldChart</span> <span class="operator">=</span> chartService.getById(id);</span><br><span class="line">    ThrowUtils.throwIf(oldChart == <span class="literal">null</span>, ErrorCode.NOT_FOUND_ERROR);</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> chartService.updateById(chart);</span><br><span class="line">    <span class="keyword">return</span> ResultUtils.success(result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据 id 获取</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/get&quot;)</span></span><br><span class="line"><span class="keyword">public</span> BaseResponse&lt;Chart&gt; <span class="title function_">getChartById</span><span class="params">(<span class="type">long</span> id, HttpServletRequest request)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (id &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(ErrorCode.PARAMS_ERROR);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">Chart</span> <span class="variable">chart</span> <span class="operator">=</span> chartService.getById(id);</span><br><span class="line">    <span class="keyword">if</span> (chart == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(ErrorCode.NOT_FOUND_ERROR);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ResultUtils.success(chart);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分页获取列表（封装类）</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> chartQueryRequest</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/list/page&quot;)</span></span><br><span class="line"><span class="keyword">public</span> BaseResponse&lt;Page&lt;Chart&gt;&gt; <span class="title function_">listChartByPage</span><span class="params">(<span class="meta">@RequestBody</span> ChartQueryRequest chartQueryRequest,</span></span><br><span class="line"><span class="params">                                                HttpServletRequest request)</span> &#123;</span><br><span class="line">    <span class="type">long</span> <span class="variable">current</span> <span class="operator">=</span> chartQueryRequest.getCurrent();</span><br><span class="line">    <span class="type">long</span> <span class="variable">size</span> <span class="operator">=</span> chartQueryRequest.getPageSize();</span><br><span class="line">    <span class="comment">// 限制爬虫</span></span><br><span class="line">    ThrowUtils.throwIf(size &gt; <span class="number">20</span>, ErrorCode.PARAMS_ERROR);</span><br><span class="line">    Page&lt;Chart&gt; chartPage = chartService.page(<span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(current, size),</span><br><span class="line">            getQueryWrapper(chartQueryRequest));</span><br><span class="line">    <span class="keyword">return</span> ResultUtils.success(chartPage);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分页获取当前用户创建的资源列表</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> chartQueryRequest</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/my/list/page&quot;)</span></span><br><span class="line"><span class="keyword">public</span> BaseResponse&lt;Page&lt;Chart&gt;&gt; <span class="title function_">listMyChartByPage</span><span class="params">(<span class="meta">@RequestBody</span> ChartQueryRequest chartQueryRequest,</span></span><br><span class="line"><span class="params">                                                HttpServletRequest request)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (chartQueryRequest == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(ErrorCode.PARAMS_ERROR);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">User</span> <span class="variable">loginUser</span> <span class="operator">=</span> userService.getLoginUser(request);</span><br><span class="line">    chartQueryRequest.setUserId(loginUser.getId());</span><br><span class="line">    <span class="type">long</span> <span class="variable">current</span> <span class="operator">=</span> chartQueryRequest.getCurrent();</span><br><span class="line">    <span class="type">long</span> <span class="variable">size</span> <span class="operator">=</span> chartQueryRequest.getPageSize();</span><br><span class="line">    <span class="comment">// 限制爬虫</span></span><br><span class="line">    ThrowUtils.throwIf(size &gt; <span class="number">20</span>, ErrorCode.PARAMS_ERROR);</span><br><span class="line">    Page&lt;Chart&gt; chartPage = chartService.page(<span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(current, size),</span><br><span class="line">            getQueryWrapper(chartQueryRequest));</span><br><span class="line">    <span class="keyword">return</span> ResultUtils.success(chartPage);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// endregion</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 编辑（用户）</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> chartEditRequest</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/edit&quot;)</span></span><br><span class="line"><span class="keyword">public</span> BaseResponse&lt;Boolean&gt; <span class="title function_">editChart</span><span class="params">(<span class="meta">@RequestBody</span> ChartEditRequest chartEditRequest, HttpServletRequest request)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (chartEditRequest == <span class="literal">null</span> || chartEditRequest.getId() &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(ErrorCode.PARAMS_ERROR);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">Chart</span> <span class="variable">chart</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Chart</span>();</span><br><span class="line">    BeanUtils.copyProperties(chartEditRequest, chart);</span><br><span class="line">    <span class="type">User</span> <span class="variable">loginUser</span> <span class="operator">=</span> userService.getLoginUser(request);</span><br><span class="line">    <span class="type">long</span> <span class="variable">id</span> <span class="operator">=</span> chartEditRequest.getId();</span><br><span class="line">    <span class="comment">// 判断是否存在</span></span><br><span class="line">    <span class="type">Chart</span> <span class="variable">oldChart</span> <span class="operator">=</span> chartService.getById(id);</span><br><span class="line">    ThrowUtils.throwIf(oldChart == <span class="literal">null</span>, ErrorCode.NOT_FOUND_ERROR);</span><br><span class="line">    <span class="comment">// 仅本人或管理员可编辑</span></span><br><span class="line">    <span class="keyword">if</span> (!oldChart.getUserId().equals(loginUser.getId()) &amp;&amp; !userService.isAdmin(loginUser)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(ErrorCode.NO_AUTH_ERROR);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> chartService.updateById(chart);</span><br><span class="line">    <span class="keyword">return</span> ResultUtils.success(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>该代码中将每个请求体进行了单独的封装，以便为了前端能够更好地进行参数的传递。到此后端的基础初始化已经结束。</li></ul></li></ul><h2 id="前端初始化"><a href="#前端初始化" class="headerlink" title="前端初始化"></a>前端初始化</h2><ul><li><p>安装 ant desgin pro 脚手架</p></li><li><p>创建一个文件夹，打开 cmd 执行命令 pro create bi-frontend 创建项目</p></li><li><p>创建完成之后，执行 package.json 中的相关删除指令(遇到 bug 到 github 上 issue 中查找)，删除用不到的功能，减少项目的负重。</p></li><li><p>找到 config 文件夹 中的 config.ts 修改以下代码:<br><img src="https://cdn.jsdelivr.net/gh/keependeavour/picgo/img/b416c3c3dd4eef5ca2a1ba3f9151b71.png" alt="config"></p><p>生成后端文档接口的信息，自动生成 service 接口信息。</p></li><li><p>修改 app.tsx 中信息，添加 baseURL 改为自己的后端接口地址。至此前端的初始化完成。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 项目经验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 智能BI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>智能BI项目-介绍(一)</title>
      <link href="/2023/08/21/%E9%A1%B9%E7%9B%AE%E7%BB%8F%E9%AA%8C/%E6%99%BA%E8%83%BDBI/%E6%99%BA%E8%83%BDBI%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91-1/"/>
      <url>/2023/08/21/%E9%A1%B9%E7%9B%AE%E7%BB%8F%E9%AA%8C/%E6%99%BA%E8%83%BDBI/%E6%99%BA%E8%83%BDBI%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91-1/</url>
      
        <content type="html"><![CDATA[<h2 id="往期开发-已经完成"><a href="#往期开发-已经完成" class="headerlink" title="往期开发(已经完成)"></a>往期开发(已经完成)</h2><ul><li><a href="/2023/08/21/项目经验/智能BI/智能BI项目开发-1/">智能 BI 项目-介绍(一)</a></li><li><a href="/2023/08/22/项目经验/智能BI/智能BI项目开发-2/">智能 BI 项目-初始化(二)</a></li><li><a href="/2023/08/23/项目经验/智能BI/智能BI项目开发-3/">智能 BI 项目-初学 AI 分析(三)</a></li><li><a href="/2023/08/24/项目经验/智能BI/智能BI项目开发-4/">智能 BI 项目-AI 接口调用(四)</a></li><li><a href="/2023/08/25/项目经验/智能BI/智能BI项目开发-5/">智能 BI 项目-接口优化(五)</a></li><li><a href="/2023/08/26/项目经验/智能BI/智能BI项目开发-6/">智能 BI 项目-接口的异步化(六)</a></li><li><a href="/2023/08/28/项目经验/智能BI/智能BI项目开发-7/">智能 BI 项目-引入 RabbitMQ(七)</a></li></ul><h2 id="一、项目简介"><a href="#一、项目简介" class="headerlink" title="一、项目简介"></a>一、项目简介</h2><blockquote><ul><li><p>基于 React + Spring Boot + MQ + AIGC 的智能数据分析平台</p></li><li><p>区别于早期传统的 BI 平台，用户只需要导入原始数据集，并输入分析诉求，就可以自动化生成可视化图表以及分析结论，实现数据分析的降本增效</p></li></ul></blockquote><h2 id="二、项目特点"><a href="#二、项目特点" class="headerlink" title="二、项目特点"></a>二、项目特点</h2><blockquote><ul><li><p>不同于网上泛滥的管理系统、博客、商城这些已经层出不穷的项目。此项目结合当下最火的 AIGC 技术 + 企业级 BI 业务场景的综合实战项目，紧跟时代的潮流！</p></li><li><p>此项目中采用前后端高效开发方式，AIGC 应用开发、AI 提问技巧、系统优化、分布式限流、线程池、异步化、消息队列等一系列重点知识。</p></li></ul></blockquote><h2 id="三、技术选型"><a href="#三、技术选型" class="headerlink" title="三、技术选型"></a>三、技术选型</h2><ul><li><h3 id="前端技术栈"><a href="#前端技术栈" class="headerlink" title="前端技术栈"></a>前端技术栈</h3><blockquote><ul><li>React 18</li><li>Ant Desgin Pro 5.x 脚手架</li><li>Umi 4 前端框架</li><li>Ant Design 组件库</li><li>Echarts 可视化库</li><li>OpenApI 前端接口代码生成</li></ul></blockquote></li><li><h3 id="后端技术栈"><a href="#后端技术栈" class="headerlink" title="后端技术栈"></a>后端技术栈</h3><blockquote><ul><li>Java Spring boot 基础整合框架</li><li>MySQL 数据库</li><li>MyBatis-Plus 持久层框架 MyBatis-X 生成实体 Mapper 接口</li><li>Redis + Redisson 限流</li><li>RabbitMQ 消息队列</li><li>鱼聪明 AI SDK(来自鱼皮大大的 AI 技术)</li><li>JDK 线程池异步优化</li><li>Easy Excel 表格数据处理</li><li>Swagger + knife4J 接口文档生成</li></ul></blockquote></li></ul><h2 id="四、从项目中学习到的实践知识"><a href="#四、从项目中学习到的实践知识" class="headerlink" title="四、从项目中学习到的实践知识"></a>四、从项目中学习到的实践知识</h2><blockquote><ul><li>1.跟随鱼皮大大全程直播听讲，参与项目完整的开发流程，能够独立开发上线项目。</li><li>2.熟悉企业主流前后端开发技术的应用(如 SpringBoot、react、Redisson 等)。</li><li>3.熟悉 AIGC、AI 工具、AI 编程的玩法和技巧，开拓编程思维。</li><li>4.熟悉最新版本前后端开发脚手架的使用，掌握快速生成基础代码，前后端协作的方法，提高数倍开发效率</li><li>5.熟悉系统优化、分布式限流、线程池、异步化、消息队列等一系列重要知识，提升系统设计能力</li><li>6.熟悉项目开发过程中，调试、优化技巧。如开发工具技巧、抽象封装、问题定位、性能优化等等。</li><li>7.大大带领读文档，掌握阅读官方文档的方法和技巧，提高自学能力。</li><li>8.所有的 BUG 和问题，能够自行查阅资料进行解决。</li></ul></blockquote><h2 id="五、个人对项目见解"><a href="#五、个人对项目见解" class="headerlink" title="五、个人对项目见解"></a>五、个人对项目见解</h2><blockquote><ul><li>个人对于此项目比较感兴趣，也跟紧时代的步伐，能够学习到新的知识，也能巩固以前所学知识，比如 Spring boot 基础框架整合，此次前端 react 第一次接触，使用鱼皮大大推荐的 ant design pro 脚手架。前端最早使用的是 vue + element-ui 组件库 + axios 请求库完成基本的页面搭建。经此次学习定会对 react 进行初了解使用，后端的 rabbitMQ 学过一阵子，不常用，借此机会进行巩固和再学习，异步队列，线程池这些难点。</li><li>此项目由鱼皮大大所提供学习，未经本人允许严谨转载本文章</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 项目经验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 智能BI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试题复习-后端常用指令集(二)</title>
      <link href="/2023/08/18/%E9%9D%A2%E8%AF%95/%E9%9D%A2%E8%AF%95%E6%80%BB%E5%A4%8D%E4%B9%A0(%E4%BA%8C)/"/>
      <url>/2023/08/18/%E9%9D%A2%E8%AF%95/%E9%9D%A2%E8%AF%95%E6%80%BB%E5%A4%8D%E4%B9%A0(%E4%BA%8C)/</url>
      
        <content type="html"><![CDATA[<h2 id="一、Maven中常用的命令集"><a href="#一、Maven中常用的命令集" class="headerlink" title="一、Maven中常用的命令集"></a>一、Maven中常用的命令集</h2><ul><li>打包package: mvn package</li><li>编译compile: mvn compile</li><li>清空clean: mvn clean</li><li>下载install: mvn install</li><li>测试test: mvn test</li></ul><h2 id="二、git中常用命令集"><a href="#二、git中常用命令集" class="headerlink" title="二、git中常用命令集"></a>二、git中常用命令集</h2><ul><li>克隆分支: git clone -b &lt;指定分支名&gt; &lt;远程仓库地址&gt;</li><li>查看分支: git branch</li><li>查看所有分支: git branch -a</li><li>切换分支: git checkout &lt;指定分支名&gt;</li><li>拉取代码: git pull</li><li>提交到缓存 <ul><li>git add . 提交新文件和修改文件 不包含删除文件</li><li>git add -u 提交被修改和删除文件 不包含新文件</li><li>git add -A 提交所有修改文件</li></ul></li><li>提交代码: git commit -m “注释”</li><li>推送代码：git push</li><li>初始化仓库: git init</li><li>添加文件到缓冲区: git add filename</li></ul><h2 id="三、Linux常用命令（老是忘记，大部分时候是看笔记操作）"><a href="#三、Linux常用命令（老是忘记，大部分时候是看笔记操作）" class="headerlink" title="三、Linux常用命令（老是忘记，大部分时候是看笔记操作）"></a>三、Linux常用命令（老是忘记，大部分时候是看笔记操作）</h2><ul><li>目录操作<br>  cd,pwd,ls,mkdir,rmdir,du<br>  <img src="https://cdn.jsdelivr.net/gh/keependeavour/picgo/img/e90cd23fb124c02808bf40770dfdb08.png" alt="目录命令图"></li><li>文件操作<br>  which、touch、cp、mv、rm、file<br>  <img src="https://cdn.jsdelivr.net/gh/keependeavour/picgo/img/47af5242cfd2a118d5e809495f82edf.png" alt="文件命令图"></li><li>系统管理<br>  shutdown、reboot、lscpu<br>  <img src="https://cdn.jsdelivr.net/gh/keependeavour/picgo/img/aaccacb20c27eb61aa27f72a6409ade.png" alt="文件命令图"></li></ul>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试题复习-java线程(一)</title>
      <link href="/2023/08/17/%E9%9D%A2%E8%AF%95/%E9%9D%A2%E8%AF%95%E6%80%BB%E5%A4%8D%E4%B9%A0(%E4%B8%80)/"/>
      <url>/2023/08/17/%E9%9D%A2%E8%AF%95/%E9%9D%A2%E8%AF%95%E6%80%BB%E5%A4%8D%E4%B9%A0(%E4%B8%80)/</url>
      
        <content type="html"><![CDATA[<h2 id="一、java-线程的创建方式"><a href="#一、java-线程的创建方式" class="headerlink" title="一、java 线程的创建方式"></a>一、java 线程的创建方式</h2><ul><li><p>1.继承Thread类</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Demo</span>().start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                System.out.println(<span class="number">11</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>2.实现runnable接口</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Demo</span>()).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                System.out.println(<span class="number">11</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>3.使用lambda表达式（比较推荐这种方式）</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                        System.out.println(<span class="number">11</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                    System.out.println(<span class="number">11</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>4.实现callable接口（可以拿到任务的结果）</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> <span class="keyword">implements</span> <span class="title class_">Callable</span>&lt;Integer&gt; &#123;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">             <span class="comment">// 创建FutureTask任务 优点可以拿到执行的结果</span></span><br><span class="line">             FutureTask&lt;Integer&gt; futureTask = <span class="keyword">new</span> <span class="title class_">FutureTask</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">Demo</span>());</span><br><span class="line">             <span class="comment">// 将FutureTask传给线程</span></span><br><span class="line">             <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(futureTask);</span><br><span class="line">             thread.start();</span><br><span class="line">             System.out.println(futureTask.get());</span><br><span class="line">         &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">             e.printStackTrace();</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="meta">@Override</span></span><br><span class="line">     <span class="keyword">public</span> Integer <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li><p>5.使用线程池创建线程</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">executorService</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line">        executorService.execute(<span class="keyword">new</span> <span class="title class_">Demo</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                    System.out.println(<span class="number">11</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>为什么不建议使用Executors来创建线程池<br>  Executors的newFixedThreadPool构造方法如下:</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title function_">newFixedThreadPool</span><span class="params">(<span class="type">int</span> nThreads)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(nThreads, nThreads,</span><br><span class="line">                                <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                                <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;Runnable&gt;());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  发现创建的队列为LinkedBlockingQueue，是一个无界阻塞队列，如果使用该线程池执行任务如果任务过多就会不断的添加到队列中，任务越多占用的内存就越多，最终可能耗尽内存，导致OOM。—OOM内存被使用完<br>  对于 Executors的newSingleThreadExecutor构造方法如下:</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title function_">newSingleThreadExecutor</span><span class="params">(ThreadFactory threadFactory)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">FinalizableDelegatedExecutorService</span></span><br><span class="line">        (<span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">1</span>, <span class="number">1</span>,</span><br><span class="line">                                <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                                <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;Runnable&gt;(),</span><br><span class="line">                                threadFactory));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  同样也是LinkedBlockingQueue队列,会造成OOM内存消耗殆尽的事故</p></li><li><p>总结<br>除开有可能造成OOM之外，我们使用Executors来创建线程池也不能自定义现成的名字，不利于排查问题，所以建议直接使用ThreadPoolExecutor来定义线程池，可以灵活的来控制线程。</p></li></ul></li></ul><h2 id="二、线程池有那些状态"><a href="#二、线程池有那些状态" class="headerlink" title="二、线程池有那些状态"></a>二、线程池有那些状态</h2><ul><li><p>RUNNING</p><p>  Accept new tasks and process queued tasks<br>  表示线程池正常运行，既能够接受新的任务，也会正常处理队列中的任务。</p></li><li><p>SHUTDOWN</p><p>  Don’t accept new tasks,but process queued tasks<br>  当调用线程池的shutdown()方法时，线程池就会进入SHUTDOWN状态，表示线程池处于正在关闭状态，此状态下线程池不会接受新的任务，但是会继续把队列中的任务处理完毕。</p></li><li><p>STOP</p><p>  Don’t accept new tasks, don’t process queued tasks, and interrupt in-progress tasks<br>  当调用线程池的shutdownnow()方法时，线程池就进入STOP状态，表示线程池处于正在停止状态，此状态下线程池既不会接受新任务了，也不会处理队列中的任务，并且正在运行的线程也会被中断</p></li><li><p>TIDYING</p><p>  All tasks have terminated, workerCount is zero, the thread transitioning to state TIDYINGwill run the terminated0 hook method<br>  线程池中没有线程在运行后，线程池的状态就会自动变为TIDYING，并且会调用terminated0,该方法是空方法，留给程序员进行扩展。</p></li><li><p>TERMINATED</p><p>  terminated() has completed<br>  terminated()方法执行完之后，线程池状态就会变为TERMINATED</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法-双指针(快慢指针)</title>
      <link href="/2023/08/03/%E7%AE%97%E6%B3%95/pointer-%E5%BF%AB%E6%85%A2%E6%8C%87%E9%92%88/"/>
      <url>/2023/08/03/%E7%AE%97%E6%B3%95/pointer-%E5%BF%AB%E6%85%A2%E6%8C%87%E9%92%88/</url>
      
        <content type="html"><![CDATA[<h2 id="一、算法描述"><a href="#一、算法描述" class="headerlink" title="一、算法描述"></a>一、算法描述</h2><p>双指针，常用于处理数组类型的数据，通过俩个指针来指向不位置所代表的值也可以是相同位置的数值。</p><h2 id="二、算法实质"><a href="#二、算法实质" class="headerlink" title="二、算法实质"></a>二、算法实质</h2><p>双指针，通过操作俩个指针的指向来完成对于数据的处理。</p><h2 id="三、算法思想"><a href="#三、算法思想" class="headerlink" title="三、算法思想"></a>三、算法思想</h2><p>双指针指的是在遍历对象的过程中，不是普通的使用单个指针进行访问，而是使用两个相同方向（<strong>快慢指针</strong>）或者相反方向（<strong>对撞指针</strong>）的指针进行扫描，从而达到相应的目的。</p><p>过程图解：</p><p><img src="https://cdn.jsdelivr.net/gh/keependeavour/picgo/img/image-20230803122447583.png" alt="image-20230803122447583"></p><h2 id="四、快慢指针使用条件"><a href="#四、快慢指针使用条件" class="headerlink" title="四、快慢指针使用条件"></a>四、快慢指针使用条件</h2><ul><li>在一个序列里边，用两个指针维护一段区间</li><li>在两个序列里边，一个指针指向其中一个序列，另外一个指针指向另外一个序列，来维护某种次序</li></ul><h2 id="五、案例"><a href="#五、案例" class="headerlink" title="五、案例"></a>五、案例</h2><ul><li><h3 id="删除排序数组中的重复项"><a href="#删除排序数组中的重复项" class="headerlink" title="删除排序数组中的重复项"></a>删除排序数组中的重复项</h3><ul><li><h4 id="题目-链接-https-leetcode-cn-problems-remove-duplicates-from-sorted-array-description"><a href="#题目-链接-https-leetcode-cn-problems-remove-duplicates-from-sorted-array-description" class="headerlink" title="题目 链接:https://leetcode.cn/problems/remove-duplicates-from-sorted-array/description/"></a>题目 链接:<a href="https://leetcode.cn/problems/remove-duplicates-from-sorted-array/description/">https://leetcode.cn/problems/remove-duplicates-from-sorted-array/description/</a></h4><p>给你一个 <strong>升序排列</strong> 的数组 <code>nums</code> ，请你<strong><a href="http://baike.baidu.com/item/原地算法"> 原地</a></strong> 删除重复出现的元素，使每个元素 <strong>只出现一次</strong> ，返回删除后数组的新长度。元素的 <strong>相对顺序</strong> 应该保持 <strong>一致</strong> 。然后返回 <code>nums</code> 中唯一元素的个数。</p></li><li><h4 id="判题标准"><a href="#判题标准" class="headerlink" title="判题标准"></a>判题标准</h4><p>系统会用下面的代码来测试你的题解:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] nums = [...]; <span class="comment">// 输入数组</span></span><br><span class="line"><span class="type">int</span>[] expectedNums = [...]; <span class="comment">// 长度正确的期望答案</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> removeDuplicates(nums); <span class="comment">// 调用</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> k == expectedNums.length;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">    <span class="keyword">assert</span> nums[i] == expectedNums[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果所有断言都通过，那么您的题解将被 <strong>通过</strong>。</p></li><li><h4 id="算法思路"><a href="#算法思路" class="headerlink" title="算法思路"></a>算法思路</h4><ul><li>第一种情况 给定数组num长度为0 || 1不包含任何元素 直接返回0 || 1</li><li>第二种情况 在删除重复元素后至少剩下一个元素  保留nums[0] 删除后续元素</li><li>第三种情况，当nums大于0且删除重复元素后仍有其他元素，则定义两个指针一个快指针 fast 一个慢指针 slow，快指针标识遍历数组到达的下标位置，慢指针标识下一个不同元素要填入的下标位置，初始时两个指针都指向下标1，假设数组nums的长度为n，将快指针fast一次遍历从1到n-1的位置，对于每个位置如果nums[fast] != nums[fast-1] 说明nums[fast]和之前的元素都不同，因此将nums[fast]的值复制到nums[slow]，然后将slow的值+1即为指向下一个位置。遍历结束之后从nums[0]到nums[slow-1]的每个元素都不相同且包含原数组中的每个不同元素，因此新的长度即为slow返回slow即可。</li></ul></li><li><h4 id="官方代码"><a href="#官方代码" class="headerlink" title="官方代码"></a>官方代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">removeDuplicates</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">fast</span> <span class="operator">=</span> <span class="number">1</span>, slow = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (fast &lt; n) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[fast] != nums[fast - <span class="number">1</span>]) &#123;</span><br><span class="line">                nums[slow] = nums[fast];</span><br><span class="line">                ++slow;</span><br><span class="line">            &#125;</span><br><span class="line">            ++fast;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slow;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>复杂度</p><ul><li>时间复杂度:O(n)，其中n为数组的长度。快慢指针最多各移动n次</li><li>空间复杂度:O(1)，只需要使用常数额外空间</li></ul></li></ul></li></ul><h2 id="六、个人见解"><a href="#六、个人见解" class="headerlink" title="六、个人见解"></a>六、个人见解</h2><ul><li><h3 id="个人解题代码"><a href="#个人解题代码" class="headerlink" title="个人解题代码"></a>个人解题代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">removeDuplicates</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(nums.length == <span class="number">1</span>) <span class="keyword">return</span> result;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>; j &lt; nums.length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[i] != nums[j]) &#123;</span><br><span class="line">                    nums[result] = nums[j];</span><br><span class="line">                    i = j - <span class="number">1</span>;</span><br><span class="line">                    result++;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (result != nums.length) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> result; i &lt; nums.length; i++) &#123;</span><br><span class="line">                nums[i] = -<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h3 id="个人解题见解"><a href="#个人解题见解" class="headerlink" title="个人解题见解"></a>个人解题见解</h3><p>个人采用的是暴力解法，每次遍历到与该数值不相同的就进行交换，交换的位置为result的长度，每次交换后将i的数值等于j-1的位置继续开始，枚举出所有的情况，将所有不重复升序的数值提前，最后处理特别情况，如果result的长度不等于nums的长度就将后续值全部替换为-1等于是排除数组中全是1出现n+1次的情况。</p></li><li><h3 id="对于快慢指针的见解"><a href="#对于快慢指针的见解" class="headerlink" title="对于快慢指针的见解"></a>对于快慢指针的见解</h3><p>采用双指针的方式，可以很直观的解决数组中此类的问题，慢指针为条件下的位置，快指针通常为遍历数组寻找特定条件，当快指针越界时候为结束的条件。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法-递归</title>
      <link href="/2023/08/02/%E7%AE%97%E6%B3%95/recursion-%E9%80%92%E5%BD%92/"/>
      <url>/2023/08/02/%E7%AE%97%E6%B3%95/recursion-%E9%80%92%E5%BD%92/</url>
      
        <content type="html"><![CDATA[<h2 id="一、算法描述"><a href="#一、算法描述" class="headerlink" title="一、算法描述"></a>一、算法描述</h2><p>递归算法是一种直接或者间接调用自身函数或者方法的算法。说简单了就是程序自身的调用。</p><h2 id="二、算法实质"><a href="#二、算法实质" class="headerlink" title="二、算法实质"></a>二、算法实质</h2><p>递归算法就是将原问题不断分解为规模缩小的子问题，然后递归调用方法来表示 问题的解。（用同一个方法去解决规模不同的问题）</p><h2 id="三、算法思想"><a href="#三、算法思想" class="headerlink" title="三、算法思想"></a>三、算法思想</h2><p>递归算法，顾名思义就是有两个大的阶段：递和归，即就是有去（递去）有回（归来）。</p><ul><li>递去：将递归问题分解为若干个规模较小，与原问题形式相同的子问题，这些子问题可以用相同的解题思路来解决</li><li>归来：当你将问题不断缩小规模递去的时候，必须有一个明确的结束递去的临界点（递归出口），一旦达到这个临界点即就从该点原路返回到原点，最终问题得到解决。</li></ul><p>过程图解：</p><p><img src="https://cdn.jsdelivr.net/gh/keependeavour/picgo/img/20200607172648138.jpg" alt="递归图解"></p><h2 id="四、递归算法使用条件"><a href="#四、递归算法使用条件" class="headerlink" title="四、递归算法使用条件"></a>四、递归算法使用条件</h2><ul><li>明确递归的终止条件</li><li>提取重复的逻辑，缩小问题的规模不断递去</li><li>给出递归终止时的处理办法</li></ul><h2 id="五、案例"><a href="#五、案例" class="headerlink" title="五、案例"></a>五、案例</h2><ul><li><h3 id="阶乘"><a href="#阶乘" class="headerlink" title="阶乘"></a>阶乘</h3>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">recursion</span><span class="params">(<span class="type">int</span> number)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (number == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> number * recursion(number - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h3 id="力扣（合并两个有序链表）"><a href="#力扣（合并两个有序链表）" class="headerlink" title="力扣（合并两个有序链表）"></a>力扣（合并两个有序链表）</h3><h4 id="题目-链接-https-leetcode-cn-problems-merge-two-sorted-lists-description"><a href="#题目-链接-https-leetcode-cn-problems-merge-two-sorted-lists-description" class="headerlink" title="题目 链接: https://leetcode.cn/problems/merge-two-sorted-lists/description/"></a>题目 链接: <a href="https://leetcode.cn/problems/merge-two-sorted-lists/description/">https://leetcode.cn/problems/merge-two-sorted-lists/description/</a></h4><p>  将两个升序链表合并为一个新的 <strong>升序</strong> 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 </p><p>  <img src="https://cdn.jsdelivr.net/gh/keependeavour/picgo/img/merge_ex1.jpg" alt="题目"></p><h4 id="算法思路"><a href="#算法思路" class="headerlink" title="算法思路"></a>算法思路</h4><p>  采用递归算法，若l1 || l2 开始即为空链表，不需要操作返回非空链表，否则判断那个链表的头节点对应的值更小，然后递归，决定下一个添加到结果里的节点，如果后续递归中两个链表有一个为空递归结束。</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ListNode <span class="title function_">mergeTwoLists</span><span class="params">(ListNode l1, ListNode l2)</span> &#123;</span><br><span class="line">       <span class="keyword">if</span> (l1 == <span class="literal">null</span>) &#123;</span><br><span class="line">           <span class="keyword">return</span> l2;</span><br><span class="line">       &#125; <span class="keyword">else</span> <span class="keyword">if</span> (l2 == <span class="literal">null</span>) &#123;</span><br><span class="line">           <span class="keyword">return</span> l1;</span><br><span class="line">       <span class="comment">// 排除非空集合</span></span><br><span class="line">       &#125; <span class="keyword">else</span> <span class="keyword">if</span> (l1.val &lt;= l2.val) &#123;</span><br><span class="line">           <span class="comment">// 寻找最小头节点 每次递归节点 寻找插入的位置 每次更新链表 直到有一个值为空 就跳出递归</span></span><br><span class="line">           l1.next = mergeTwoLists(l1.next, l2);</span><br><span class="line">           <span class="keyword">return</span> l1;</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           l2.next = mergeTwoLists(l2.next, l1);</span><br><span class="line">           <span class="keyword">return</span> l2;</span><br><span class="line">       &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h4 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><ul><li>时间复杂度：O(n+m)，其中 n 和 m 分别为两个链表的长度。因为每次调用递归都会去掉 l1 或者 l2 的头节点（直到至少有一个链表为空），函数 mergeTwoList 至多只会递归调用每个节点一次。因此，时间复杂度取决于合并后的链表长度，O(n+m)。</li><li>空间复杂度：O(n+m)，其中 n和 m分别为两个链表的长度。递归调mergeTwoLists 函数时需要消耗栈空间，栈空间的大小取决于递归调用的深度。结束递归调用时 mergeTwoLists 函数最多调用 n+m次，因此空间复杂度为 O(n+m)。</li></ul></li></ul><h2 id="六、个人对于递归的理解-己见"><a href="#六、个人对于递归的理解-己见" class="headerlink" title="六、个人对于递归的理解(己见)"></a>六、个人对于递归的理解(己见)</h2><p>每次递归都会缩小范围，例如阶乘递归每次程序调用本身时参数就减一，从大规模逐渐减少到最后小规模的结束条件，输入5，每次递归减一 最终返回就是5 <em> 4 </em> 3 <em> 2 </em> 1 = 120（最后结束时候返回的结果），缩小到最小范围时候开始计算返回结果，也就是递归终止条件。</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
