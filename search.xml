<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>智能BI项目-初始化(二)</title>
      <link href="/2023/08/22/%E9%A1%B9%E7%9B%AE%E7%BB%8F%E9%AA%8C/%E6%99%BA%E8%83%BDBI/%E6%99%BA%E8%83%BDBI%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91(%E4%BA%8C)/"/>
      <url>/2023/08/22/%E9%A1%B9%E7%9B%AE%E7%BB%8F%E9%AA%8C/%E6%99%BA%E8%83%BDBI/%E6%99%BA%E8%83%BDBI%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91(%E4%BA%8C)/</url>
      
        <content type="html"><![CDATA[<h2 id="后端初始化"><a href="#后端初始化" class="headerlink" title="后端初始化"></a>后端初始化</h2><ul><li><p>拉取自己提前写好的 springboot 基础整合,项目文件结构如下:</p><p><img src="https://cdn.jsdelivr.net/gh/keependeavour/picgo/img/0338549fa104bbf41a97159f34f5b68.png" alt="项目文件结构图"></p></li><li><p>使用 Mybatis-X 生成代码，生成 generate 文件目录，移动其中的 entity，service，mapper 等文件到指定地方</p></li><li><p>设计表结构，执行的 sql 如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">-- 创建库</span><br><span class="line">create database if not exists bi;</span><br><span class="line"></span><br><span class="line">-- 切换库</span><br><span class="line">use bi;</span><br><span class="line"></span><br><span class="line">-- 用户表</span><br><span class="line">create table if not exists user</span><br><span class="line">(</span><br><span class="line">    id           bigint auto_increment comment &#x27;id&#x27; primary key,</span><br><span class="line">    userAccount  varchar(256)                           not null comment &#x27;账号&#x27;,</span><br><span class="line">    userPassword varchar(512)                           not null comment &#x27;密码&#x27;,</span><br><span class="line">    userName     varchar(256)                           null comment &#x27;用户昵称&#x27;,</span><br><span class="line">    userAvatar   varchar(1024)                          null comment &#x27;用户头像&#x27;,</span><br><span class="line">    userRole     varchar(256) default &#x27;user&#x27;            not null comment &#x27;用户角色：user/admin&#x27;,</span><br><span class="line">    createTime   datetime     default CURRENT_TIMESTAMP not null comment &#x27;创建时间&#x27;,</span><br><span class="line">    updateTime   datetime     default CURRENT_TIMESTAMP not null on update CURRENT_TIMESTAMP comment &#x27;更新时间&#x27;,</span><br><span class="line">    isDelete     tinyint      default 0                 not null comment &#x27;是否删除&#x27;,</span><br><span class="line">    index idx_userAccount (userAccount)</span><br><span class="line">    ) comment &#x27;用户&#x27; collate = utf8mb4_unicode_ci;</span><br><span class="line"></span><br><span class="line">-- 图表表</span><br><span class="line">create table if not exists chart</span><br><span class="line">(</span><br><span class="line">    id           bigint auto_increment comment &#x27;id&#x27; primary key,</span><br><span class="line">    goal text  null comment &#x27;分析目标&#x27;,</span><br><span class="line">    `name`               varchar(128) null comment &#x27;图表名称&#x27;,</span><br><span class="line">    chartData    text  null comment &#x27;图表数据&#x27;,</span><br><span class="line">    chartType   varchar(128) null comment &#x27;图表类型&#x27;,</span><br><span class="line">    genChart text null comment &#x27;生成的图表数据&#x27;,</span><br><span class="line">    genResult text null comment &#x27;生成的分析结论&#x27;,</span><br><span class="line">    status       varchar(128) not null default &#x27;wait&#x27; comment &#x27;wait,running,succeed,failed&#x27;,</span><br><span class="line">    execMessage  text   null comment &#x27;执行信息&#x27;,</span><br><span class="line">    userId       bigint null comment &#x27;创建用户 id&#x27;,</span><br><span class="line">    createTime   datetime     default CURRENT_TIMESTAMP not null comment &#x27;创建时间&#x27;,</span><br><span class="line">    updateTime   datetime     default CURRENT_TIMESTAMP not null on update CURRENT_TIMESTAMP comment &#x27;更新时间&#x27;,</span><br><span class="line">    isDelete     tinyint      default 0                 not null comment &#x27;是否删除&#x27;</span><br><span class="line">) comment &#x27;图表信息表&#x27; collate = utf8mb4_unicode_ci;</span><br></pre></td></tr></table></figure><p>使用 idea 中的 database 连接 mysql 数据源查看执行 sql 后生成的表格如下：</p><p><img src="https://cdn.jsdelivr.net/gh/keependeavour/picgo/img/22fa6131ea6190962758ebd18cef109.png" alt="表"></p></li><li><p>封装统一的返回类，全局异常，配置跨域，配置接口文档信息，mappper 组件扫描等各种已经重复做过很多次的代码逻辑。封装完后，创建 ChartController、UserController 实现主要逻辑。</p></li><li><p>将本来进行基础整合时候的用户增删改查代码进行修改，写好基础的逻辑如下图:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> chartAddRequest</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/add&quot;)</span></span><br><span class="line"><span class="keyword">public</span> BaseResponse&lt;Long&gt; <span class="title function_">addChart</span><span class="params">(<span class="meta">@RequestBody</span> ChartAddRequest chartAddRequest, HttpServletRequest request)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (chartAddRequest == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(ErrorCode.PARAMS_ERROR);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">Chart</span> <span class="variable">chart</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Chart</span>();</span><br><span class="line">    BeanUtils.copyProperties(chartAddRequest, chart);</span><br><span class="line">    <span class="type">User</span> <span class="variable">loginUser</span> <span class="operator">=</span> userService.getLoginUser(request);</span><br><span class="line">    chart.setUserId(loginUser.getId());</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> chartService.save(chart);</span><br><span class="line">    ThrowUtils.throwIf(!result, ErrorCode.OPERATION_ERROR);</span><br><span class="line">    <span class="type">long</span> <span class="variable">newChartId</span> <span class="operator">=</span> chart.getId();</span><br><span class="line">    <span class="keyword">return</span> ResultUtils.success(newChartId);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> deleteRequest</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/delete&quot;)</span></span><br><span class="line"><span class="keyword">public</span> BaseResponse&lt;Boolean&gt; <span class="title function_">deleteChart</span><span class="params">(<span class="meta">@RequestBody</span> DeleteRequest deleteRequest, HttpServletRequest request)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (deleteRequest == <span class="literal">null</span> || deleteRequest.getId() &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(ErrorCode.PARAMS_ERROR);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.getLoginUser(request);</span><br><span class="line">    <span class="type">long</span> <span class="variable">id</span> <span class="operator">=</span> deleteRequest.getId();</span><br><span class="line">    <span class="comment">// 判断是否存在</span></span><br><span class="line">    <span class="type">Chart</span> <span class="variable">oldChart</span> <span class="operator">=</span> chartService.getById(id);</span><br><span class="line">    ThrowUtils.throwIf(oldChart == <span class="literal">null</span>, ErrorCode.NOT_FOUND_ERROR);</span><br><span class="line">    <span class="comment">// 仅本人或管理员可删除</span></span><br><span class="line">    <span class="keyword">if</span> (!oldChart.getUserId().equals(user.getId()) &amp;&amp; !userService.isAdmin(request)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(ErrorCode.NO_AUTH_ERROR);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> chartService.removeById(id);</span><br><span class="line">    <span class="keyword">return</span> ResultUtils.success(b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 更新（仅管理员）</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> chartUpdateRequest</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/update&quot;)</span></span><br><span class="line"><span class="meta">@AuthCheck(mustRole = UserConstant.ADMIN_ROLE)</span></span><br><span class="line"><span class="keyword">public</span> BaseResponse&lt;Boolean&gt; <span class="title function_">updateChart</span><span class="params">(<span class="meta">@RequestBody</span> ChartUpdateRequest chartUpdateRequest)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (chartUpdateRequest == <span class="literal">null</span> || chartUpdateRequest.getId() &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(ErrorCode.PARAMS_ERROR);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">Chart</span> <span class="variable">chart</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Chart</span>();</span><br><span class="line">    BeanUtils.copyProperties(chartUpdateRequest, chart);</span><br><span class="line">    <span class="type">long</span> <span class="variable">id</span> <span class="operator">=</span> chartUpdateRequest.getId();</span><br><span class="line">    <span class="comment">// 判断是否存在</span></span><br><span class="line">    <span class="type">Chart</span> <span class="variable">oldChart</span> <span class="operator">=</span> chartService.getById(id);</span><br><span class="line">    ThrowUtils.throwIf(oldChart == <span class="literal">null</span>, ErrorCode.NOT_FOUND_ERROR);</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> chartService.updateById(chart);</span><br><span class="line">    <span class="keyword">return</span> ResultUtils.success(result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据 id 获取</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/get&quot;)</span></span><br><span class="line"><span class="keyword">public</span> BaseResponse&lt;Chart&gt; <span class="title function_">getChartById</span><span class="params">(<span class="type">long</span> id, HttpServletRequest request)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (id &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(ErrorCode.PARAMS_ERROR);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">Chart</span> <span class="variable">chart</span> <span class="operator">=</span> chartService.getById(id);</span><br><span class="line">    <span class="keyword">if</span> (chart == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(ErrorCode.NOT_FOUND_ERROR);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ResultUtils.success(chart);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分页获取列表（封装类）</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> chartQueryRequest</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/list/page&quot;)</span></span><br><span class="line"><span class="keyword">public</span> BaseResponse&lt;Page&lt;Chart&gt;&gt; <span class="title function_">listChartByPage</span><span class="params">(<span class="meta">@RequestBody</span> ChartQueryRequest chartQueryRequest,</span></span><br><span class="line"><span class="params">                                                HttpServletRequest request)</span> &#123;</span><br><span class="line">    <span class="type">long</span> <span class="variable">current</span> <span class="operator">=</span> chartQueryRequest.getCurrent();</span><br><span class="line">    <span class="type">long</span> <span class="variable">size</span> <span class="operator">=</span> chartQueryRequest.getPageSize();</span><br><span class="line">    <span class="comment">// 限制爬虫</span></span><br><span class="line">    ThrowUtils.throwIf(size &gt; <span class="number">20</span>, ErrorCode.PARAMS_ERROR);</span><br><span class="line">    Page&lt;Chart&gt; chartPage = chartService.page(<span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(current, size),</span><br><span class="line">            getQueryWrapper(chartQueryRequest));</span><br><span class="line">    <span class="keyword">return</span> ResultUtils.success(chartPage);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分页获取当前用户创建的资源列表</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> chartQueryRequest</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/my/list/page&quot;)</span></span><br><span class="line"><span class="keyword">public</span> BaseResponse&lt;Page&lt;Chart&gt;&gt; <span class="title function_">listMyChartByPage</span><span class="params">(<span class="meta">@RequestBody</span> ChartQueryRequest chartQueryRequest,</span></span><br><span class="line"><span class="params">                                                HttpServletRequest request)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (chartQueryRequest == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(ErrorCode.PARAMS_ERROR);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">User</span> <span class="variable">loginUser</span> <span class="operator">=</span> userService.getLoginUser(request);</span><br><span class="line">    chartQueryRequest.setUserId(loginUser.getId());</span><br><span class="line">    <span class="type">long</span> <span class="variable">current</span> <span class="operator">=</span> chartQueryRequest.getCurrent();</span><br><span class="line">    <span class="type">long</span> <span class="variable">size</span> <span class="operator">=</span> chartQueryRequest.getPageSize();</span><br><span class="line">    <span class="comment">// 限制爬虫</span></span><br><span class="line">    ThrowUtils.throwIf(size &gt; <span class="number">20</span>, ErrorCode.PARAMS_ERROR);</span><br><span class="line">    Page&lt;Chart&gt; chartPage = chartService.page(<span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(current, size),</span><br><span class="line">            getQueryWrapper(chartQueryRequest));</span><br><span class="line">    <span class="keyword">return</span> ResultUtils.success(chartPage);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// endregion</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 编辑（用户）</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> chartEditRequest</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/edit&quot;)</span></span><br><span class="line"><span class="keyword">public</span> BaseResponse&lt;Boolean&gt; <span class="title function_">editChart</span><span class="params">(<span class="meta">@RequestBody</span> ChartEditRequest chartEditRequest, HttpServletRequest request)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (chartEditRequest == <span class="literal">null</span> || chartEditRequest.getId() &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(ErrorCode.PARAMS_ERROR);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">Chart</span> <span class="variable">chart</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Chart</span>();</span><br><span class="line">    BeanUtils.copyProperties(chartEditRequest, chart);</span><br><span class="line">    <span class="type">User</span> <span class="variable">loginUser</span> <span class="operator">=</span> userService.getLoginUser(request);</span><br><span class="line">    <span class="type">long</span> <span class="variable">id</span> <span class="operator">=</span> chartEditRequest.getId();</span><br><span class="line">    <span class="comment">// 判断是否存在</span></span><br><span class="line">    <span class="type">Chart</span> <span class="variable">oldChart</span> <span class="operator">=</span> chartService.getById(id);</span><br><span class="line">    ThrowUtils.throwIf(oldChart == <span class="literal">null</span>, ErrorCode.NOT_FOUND_ERROR);</span><br><span class="line">    <span class="comment">// 仅本人或管理员可编辑</span></span><br><span class="line">    <span class="keyword">if</span> (!oldChart.getUserId().equals(loginUser.getId()) &amp;&amp; !userService.isAdmin(loginUser)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(ErrorCode.NO_AUTH_ERROR);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> chartService.updateById(chart);</span><br><span class="line">    <span class="keyword">return</span> ResultUtils.success(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该代码中将每个请求体进行了单独的封装，以便为了前端能够更好地进行参数的传递。<br>到此前端的基础初始化已经结束。</p></li></ul><h2 id="前端初始化"><a href="#前端初始化" class="headerlink" title="前端初始化"></a>前端初始化</h2><ul><li>安装 ant desgin pro 脚手架</li><li>创建一个文件夹，打开 cmd 执行命令 pro create bi-frontend 创建项目</li><li>创建完成之后，执行 package.json 中的相关删除指令(遇到 bug 到 github 上 issue 中查找)，删除用不到的功能，减少项目的负重。</li><li><p>找到 config 文件夹 中的 config.ts 修改以下代码:</p><p><img src="https://cdn.jsdelivr.net/gh/keependeavour/picgo/img/b416c3c3dd4eef5ca2a1ba3f9151b71.png" alt="config"></p><p>生成后端文档接口的信息，自动生成 service 接口信息。</p></li><li><p>修改 app.tsx 中信息，添加 baseURL 改为自己的后端接口地址。至此初始化完成。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 项目经验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 智能BI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>智能BI项目-介绍(一)</title>
      <link href="/2023/08/21/%E9%A1%B9%E7%9B%AE%E7%BB%8F%E9%AA%8C/%E6%99%BA%E8%83%BDBI/%E6%99%BA%E8%83%BDBI%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91(%E4%B8%80)/"/>
      <url>/2023/08/21/%E9%A1%B9%E7%9B%AE%E7%BB%8F%E9%AA%8C/%E6%99%BA%E8%83%BDBI/%E6%99%BA%E8%83%BDBI%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91(%E4%B8%80)/</url>
      
        <content type="html"><![CDATA[<h2 id="一、项目特点"><a href="#一、项目特点" class="headerlink" title="一、项目特点"></a>一、项目特点</h2><ul><li><p>不同于网上泛滥的管理系统、博客、商城这些已经层出不穷的项目。此项目结合当下最火的AIGC技术 + 企业级BI业务场景的综合实战项目，紧跟时代的潮流！</p></li><li><p>此项目中采用前后端高效开发方式，AIGC应用开发、AI提问技巧、系统优化、分布式限流、线程池、异步化、消息队列等一系列重点知识。</p></li></ul><h2 id="二、技术选型"><a href="#二、技术选型" class="headerlink" title="二、技术选型"></a>二、技术选型</h2><ul><li><p>前端</p><ul><li>React 18</li><li>Ant Desgin Pro 5.x 脚手架</li><li>Umi 4 前端框架</li><li>Ant Design 组件库</li><li>Echarts 可视化库</li><li>OpenApI 前端接口代码生成</li></ul></li><li><p>后端</p><ul><li>Java Spring boot 基础整合框架</li><li>MySQL 数据库</li><li>MyBatis-Plus 持久层框架 MyBatis-X 生成实体Mapper接口</li><li>Redis + Redisson 限流</li><li>RabbitMQ 消息队列</li><li>鱼聪明 AI SDK(来自鱼皮大大的AI技术)</li><li>JDK 线程池异步优化</li><li>Easy Excel 表格数据处理</li><li>Swagger + knife4J 接口文档生成</li></ul></li></ul><h2 id="三、从项目中学习到的实践知识"><a href="#三、从项目中学习到的实践知识" class="headerlink" title="三、从项目中学习到的实践知识"></a>三、从项目中学习到的实践知识</h2><ul><li>1.跟随鱼皮大大全程直播听讲，参与项目完整的开发流程，能够独立开发上线项目。</li><li>2.熟悉企业主流前后端开发技术的应用(如SpringBoot、react、Redisson等)。</li><li>3.熟悉AIGC、AI工具、AI编程的玩法和技巧，开拓编程思维。</li><li>4.熟悉最新版本前后端开发脚手架的使用，掌握快速生成基础代码，前后端协作的方法，提高数倍开发效率</li><li>5.熟悉系统优化、分布式限流、线程池、异步化、消息队列等一系列重要知识，提升系统设计能力</li><li>6.熟悉项目开发过程中，调试、优化技巧。如开发工具技巧、抽象封装、问题定位、性能优化等等。</li><li>7.大大带领读文档，掌握阅读官方文档的方法和技巧，提高自学能力。</li><li>8.所有的BUG和问题，能够自行查阅资料进行解决。</li></ul><h2 id="四、个人对项目见解"><a href="#四、个人对项目见解" class="headerlink" title="四、个人对项目见解"></a>四、个人对项目见解</h2><p>个人对于此项目比较感兴趣，也跟紧时代的步伐，能够学习到新的知识，也能巩固以前所学知识，比如Spring boot基础框架整合，此次前端react第一次接触，使用鱼皮大大推荐的ant design pro脚手架。前端最早使用的是vue + element-ui组件库 + axios请求库完成基本的页面搭建。经此次学习定会对react进行初步了解使用，后端的rabbitMQ学过一阵子，不常用，借此机会进行巩固和再学习，异步队列，线程池这些难点。<br>（此项目由鱼皮大大所提供学习，未经本人允许严谨转载本文章）</p>]]></content>
      
      
      <categories>
          
          <category> 项目经验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 智能BI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试题复习-后端常用指令集(二)</title>
      <link href="/2023/08/18/%E9%9D%A2%E8%AF%95/%E9%9D%A2%E8%AF%95%E6%80%BB%E5%A4%8D%E4%B9%A0(%E4%BA%8C)/"/>
      <url>/2023/08/18/%E9%9D%A2%E8%AF%95/%E9%9D%A2%E8%AF%95%E6%80%BB%E5%A4%8D%E4%B9%A0(%E4%BA%8C)/</url>
      
        <content type="html"><![CDATA[<h2 id="一、Maven中常用的命令集"><a href="#一、Maven中常用的命令集" class="headerlink" title="一、Maven中常用的命令集"></a>一、Maven中常用的命令集</h2><ul><li>打包package: mvn package</li><li>编译compile: mvn compile</li><li>清空clean: mvn clean</li><li>下载install: mvn install</li><li>测试test: mvn test</li></ul><h2 id="二、git中常用命令集"><a href="#二、git中常用命令集" class="headerlink" title="二、git中常用命令集"></a>二、git中常用命令集</h2><ul><li>克隆分支: git clone -b &lt;指定分支名&gt; &lt;远程仓库地址&gt;</li><li>查看分支: git branch</li><li>查看所有分支: git branch -a</li><li>切换分支: git checkout &lt;指定分支名&gt;</li><li>拉取代码: git pull</li><li>提交到缓存 <ul><li>git add . 提交新文件和修改文件 不包含删除文件</li><li>git add -u 提交被修改和删除文件 不包含新文件</li><li>git add -A 提交所有修改文件</li></ul></li><li>提交代码: git commit -m “注释”</li><li>推送代码：git push</li><li>初始化仓库: git init</li><li>添加文件到缓冲区: git add filename</li></ul><h2 id="三、Linux常用命令（老是忘记，大部分时候是看笔记操作）"><a href="#三、Linux常用命令（老是忘记，大部分时候是看笔记操作）" class="headerlink" title="三、Linux常用命令（老是忘记，大部分时候是看笔记操作）"></a>三、Linux常用命令（老是忘记，大部分时候是看笔记操作）</h2><ul><li>目录操作<br>  cd,pwd,ls,mkdir,rmdir,du<br>  <img src="https://cdn.jsdelivr.net/gh/keependeavour/picgo/img/e90cd23fb124c02808bf40770dfdb08.png" alt="目录命令图"></li><li>文件操作<br>  which、touch、cp、mv、rm、file<br>  <img src="https://cdn.jsdelivr.net/gh/keependeavour/picgo/img/47af5242cfd2a118d5e809495f82edf.png" alt="文件命令图"></li><li>系统管理<br>  shutdown、reboot、lscpu<br>  <img src="https://cdn.jsdelivr.net/gh/keependeavour/picgo/img/aaccacb20c27eb61aa27f72a6409ade.png" alt="文件命令图"></li></ul>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试题复习-java线程(一)</title>
      <link href="/2023/08/17/%E9%9D%A2%E8%AF%95/%E9%9D%A2%E8%AF%95%E6%80%BB%E5%A4%8D%E4%B9%A0(%E4%B8%80)/"/>
      <url>/2023/08/17/%E9%9D%A2%E8%AF%95/%E9%9D%A2%E8%AF%95%E6%80%BB%E5%A4%8D%E4%B9%A0(%E4%B8%80)/</url>
      
        <content type="html"><![CDATA[<h2 id="一、java-线程的创建方式"><a href="#一、java-线程的创建方式" class="headerlink" title="一、java 线程的创建方式"></a>一、java 线程的创建方式</h2><ul><li><p>1.继承Thread类</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Demo</span>().start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                System.out.println(<span class="number">11</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>2.实现runnable接口</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Demo</span>()).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                System.out.println(<span class="number">11</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>3.使用lambda表达式（比较推荐这种方式）</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                        System.out.println(<span class="number">11</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                    System.out.println(<span class="number">11</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>4.实现callable接口（可以拿到任务的结果）</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> <span class="keyword">implements</span> <span class="title class_">Callable</span>&lt;Integer&gt; &#123;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">             <span class="comment">// 创建FutureTask任务 优点可以拿到执行的结果</span></span><br><span class="line">             FutureTask&lt;Integer&gt; futureTask = <span class="keyword">new</span> <span class="title class_">FutureTask</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">Demo</span>());</span><br><span class="line">             <span class="comment">// 将FutureTask传给线程</span></span><br><span class="line">             <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(futureTask);</span><br><span class="line">             thread.start();</span><br><span class="line">             System.out.println(futureTask.get());</span><br><span class="line">         &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">             e.printStackTrace();</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="meta">@Override</span></span><br><span class="line">     <span class="keyword">public</span> Integer <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li><p>5.使用线程池创建线程</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">executorService</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line">        executorService.execute(<span class="keyword">new</span> <span class="title class_">Demo</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                    System.out.println(<span class="number">11</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>为什么不建议使用Executors来创建线程池<br>  Executors的newFixedThreadPool构造方法如下:</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title function_">newFixedThreadPool</span><span class="params">(<span class="type">int</span> nThreads)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(nThreads, nThreads,</span><br><span class="line">                                <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                                <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;Runnable&gt;());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  发现创建的队列为LinkedBlockingQueue，是一个无界阻塞队列，如果使用该线程池执行任务如果任务过多就会不断的添加到队列中，任务越多占用的内存就越多，最终可能耗尽内存，导致OOM。—OOM内存被使用完<br>  对于 Executors的newSingleThreadExecutor构造方法如下:</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title function_">newSingleThreadExecutor</span><span class="params">(ThreadFactory threadFactory)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">FinalizableDelegatedExecutorService</span></span><br><span class="line">        (<span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">1</span>, <span class="number">1</span>,</span><br><span class="line">                                <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                                <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;Runnable&gt;(),</span><br><span class="line">                                threadFactory));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  同样也是LinkedBlockingQueue队列,会造成OOM内存消耗殆尽的事故</p></li><li><p>总结<br>除开有可能造成OOM之外，我们使用Executors来创建线程池也不能自定义现成的名字，不利于排查问题，所以建议直接使用ThreadPoolExecutor来定义线程池，可以灵活的来控制线程。</p></li></ul></li></ul><h2 id="二、线程池有那些状态"><a href="#二、线程池有那些状态" class="headerlink" title="二、线程池有那些状态"></a>二、线程池有那些状态</h2><ul><li><p>RUNNING</p><p>  Accept new tasks and process queued tasks<br>  表示线程池正常运行，既能够接受新的任务，也会正常处理队列中的任务。</p></li><li><p>SHUTDOWN</p><p>  Don’t accept new tasks,but process queued tasks<br>  当调用线程池的shutdown()方法时，线程池就会进入SHUTDOWN状态，表示线程池处于正在关闭状态，此状态下线程池不会接受新的任务，但是会继续把队列中的任务处理完毕。</p></li><li><p>STOP</p><p>  Don’t accept new tasks, don’t process queued tasks, and interrupt in-progress tasks<br>  当调用线程池的shutdownnow()方法时，线程池就进入STOP状态，表示线程池处于正在停止状态，此状态下线程池既不会接受新任务了，也不会处理队列中的任务，并且正在运行的线程也会被中断</p></li><li><p>TIDYING</p><p>  All tasks have terminated, workerCount is zero, the thread transitioning to state TIDYINGwill run the terminated0 hook method<br>  线程池中没有线程在运行后，线程池的状态就会自动变为TIDYING，并且会调用terminated0,该方法是空方法，留给程序员进行扩展。</p></li><li><p>TERMINATED</p><p>  terminated() has completed<br>  terminated()方法执行完之后，线程池状态就会变为TERMINATED</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法-双指针(快慢指针)</title>
      <link href="/2023/08/03/%E7%AE%97%E6%B3%95/pointer-%E5%BF%AB%E6%85%A2%E6%8C%87%E9%92%88/"/>
      <url>/2023/08/03/%E7%AE%97%E6%B3%95/pointer-%E5%BF%AB%E6%85%A2%E6%8C%87%E9%92%88/</url>
      
        <content type="html"><![CDATA[<h2 id="一、算法描述"><a href="#一、算法描述" class="headerlink" title="一、算法描述"></a>一、算法描述</h2><p>双指针，常用于处理数组类型的数据，通过俩个指针来指向不位置所代表的值也可以是相同位置的数值。</p><h2 id="二、算法实质"><a href="#二、算法实质" class="headerlink" title="二、算法实质"></a>二、算法实质</h2><p>双指针，通过操作俩个指针的指向来完成对于数据的处理。</p><h2 id="三、算法思想"><a href="#三、算法思想" class="headerlink" title="三、算法思想"></a>三、算法思想</h2><p>双指针指的是在遍历对象的过程中，不是普通的使用单个指针进行访问，而是使用两个相同方向（<strong>快慢指针</strong>）或者相反方向（<strong>对撞指针</strong>）的指针进行扫描，从而达到相应的目的。</p><p>过程图解：</p><p><img src="https://cdn.jsdelivr.net/gh/keependeavour/picgo/img/image-20230803122447583.png" alt="image-20230803122447583"></p><h2 id="四、快慢指针使用条件"><a href="#四、快慢指针使用条件" class="headerlink" title="四、快慢指针使用条件"></a>四、快慢指针使用条件</h2><ul><li>在一个序列里边，用两个指针维护一段区间</li><li>在两个序列里边，一个指针指向其中一个序列，另外一个指针指向另外一个序列，来维护某种次序</li></ul><h2 id="五、案例"><a href="#五、案例" class="headerlink" title="五、案例"></a>五、案例</h2><ul><li><h3 id="删除排序数组中的重复项"><a href="#删除排序数组中的重复项" class="headerlink" title="删除排序数组中的重复项"></a>删除排序数组中的重复项</h3><ul><li><h4 id="题目-链接-https-leetcode-cn-problems-remove-duplicates-from-sorted-array-description"><a href="#题目-链接-https-leetcode-cn-problems-remove-duplicates-from-sorted-array-description" class="headerlink" title="题目 链接:https://leetcode.cn/problems/remove-duplicates-from-sorted-array/description/"></a>题目 链接:<a href="https://leetcode.cn/problems/remove-duplicates-from-sorted-array/description/">https://leetcode.cn/problems/remove-duplicates-from-sorted-array/description/</a></h4><p>给你一个 <strong>升序排列</strong> 的数组 <code>nums</code> ，请你<strong><a href="http://baike.baidu.com/item/原地算法"> 原地</a></strong> 删除重复出现的元素，使每个元素 <strong>只出现一次</strong> ，返回删除后数组的新长度。元素的 <strong>相对顺序</strong> 应该保持 <strong>一致</strong> 。然后返回 <code>nums</code> 中唯一元素的个数。</p></li><li><h4 id="判题标准"><a href="#判题标准" class="headerlink" title="判题标准"></a>判题标准</h4><p>系统会用下面的代码来测试你的题解:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] nums = [...]; <span class="comment">// 输入数组</span></span><br><span class="line"><span class="type">int</span>[] expectedNums = [...]; <span class="comment">// 长度正确的期望答案</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> removeDuplicates(nums); <span class="comment">// 调用</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> k == expectedNums.length;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">    <span class="keyword">assert</span> nums[i] == expectedNums[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果所有断言都通过，那么您的题解将被 <strong>通过</strong>。</p></li><li><h4 id="算法思路"><a href="#算法思路" class="headerlink" title="算法思路"></a>算法思路</h4><ul><li>第一种情况 给定数组num长度为0 || 1不包含任何元素 直接返回0 || 1</li><li>第二种情况 在删除重复元素后至少剩下一个元素  保留nums[0] 删除后续元素</li><li>第三种情况，当nums大于0且删除重复元素后仍有其他元素，则定义两个指针一个快指针 fast 一个慢指针 slow，快指针标识遍历数组到达的下标位置，慢指针标识下一个不同元素要填入的下标位置，初始时两个指针都指向下标1，假设数组nums的长度为n，将快指针fast一次遍历从1到n-1的位置，对于每个位置如果nums[fast] != nums[fast-1] 说明nums[fast]和之前的元素都不同，因此将nums[fast]的值复制到nums[slow]，然后将slow的值+1即为指向下一个位置。遍历结束之后从nums[0]到nums[slow-1]的每个元素都不相同且包含原数组中的每个不同元素，因此新的长度即为slow返回slow即可。</li></ul></li><li><h4 id="官方代码"><a href="#官方代码" class="headerlink" title="官方代码"></a>官方代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">removeDuplicates</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">fast</span> <span class="operator">=</span> <span class="number">1</span>, slow = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (fast &lt; n) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[fast] != nums[fast - <span class="number">1</span>]) &#123;</span><br><span class="line">                nums[slow] = nums[fast];</span><br><span class="line">                ++slow;</span><br><span class="line">            &#125;</span><br><span class="line">            ++fast;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slow;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>复杂度</p><ul><li>时间复杂度:O(n)，其中n为数组的长度。快慢指针最多各移动n次</li><li>空间复杂度:O(1)，只需要使用常数额外空间</li></ul></li></ul></li></ul><h2 id="六、个人见解"><a href="#六、个人见解" class="headerlink" title="六、个人见解"></a>六、个人见解</h2><ul><li><h3 id="个人解题代码"><a href="#个人解题代码" class="headerlink" title="个人解题代码"></a>个人解题代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">removeDuplicates</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(nums.length == <span class="number">1</span>) <span class="keyword">return</span> result;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>; j &lt; nums.length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[i] != nums[j]) &#123;</span><br><span class="line">                    nums[result] = nums[j];</span><br><span class="line">                    i = j - <span class="number">1</span>;</span><br><span class="line">                    result++;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (result != nums.length) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> result; i &lt; nums.length; i++) &#123;</span><br><span class="line">                nums[i] = -<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h3 id="个人解题见解"><a href="#个人解题见解" class="headerlink" title="个人解题见解"></a>个人解题见解</h3><p>个人采用的是暴力解法，每次遍历到与该数值不相同的就进行交换，交换的位置为result的长度，每次交换后将i的数值等于j-1的位置继续开始，枚举出所有的情况，将所有不重复升序的数值提前，最后处理特别情况，如果result的长度不等于nums的长度就将后续值全部替换为-1等于是排除数组中全是1出现n+1次的情况。</p></li><li><h3 id="对于快慢指针的见解"><a href="#对于快慢指针的见解" class="headerlink" title="对于快慢指针的见解"></a>对于快慢指针的见解</h3><p>采用双指针的方式，可以很直观的解决数组中此类的问题，慢指针为条件下的位置，快指针通常为遍历数组寻找特定条件，当快指针越界时候为结束的条件。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法-递归</title>
      <link href="/2023/08/02/%E7%AE%97%E6%B3%95/recursion-%E9%80%92%E5%BD%92/"/>
      <url>/2023/08/02/%E7%AE%97%E6%B3%95/recursion-%E9%80%92%E5%BD%92/</url>
      
        <content type="html"><![CDATA[<h2 id="一、算法描述"><a href="#一、算法描述" class="headerlink" title="一、算法描述"></a>一、算法描述</h2><p>递归算法是一种直接或者间接调用自身函数或者方法的算法。说简单了就是程序自身的调用。</p><h2 id="二、算法实质"><a href="#二、算法实质" class="headerlink" title="二、算法实质"></a>二、算法实质</h2><p>递归算法就是将原问题不断分解为规模缩小的子问题，然后递归调用方法来表示 问题的解。（用同一个方法去解决规模不同的问题）</p><h2 id="三、算法思想"><a href="#三、算法思想" class="headerlink" title="三、算法思想"></a>三、算法思想</h2><p>递归算法，顾名思义就是有两个大的阶段：递和归，即就是有去（递去）有回（归来）。</p><ul><li>递去：将递归问题分解为若干个规模较小，与原问题形式相同的子问题，这些子问题可以用相同的解题思路来解决</li><li>归来：当你将问题不断缩小规模递去的时候，必须有一个明确的结束递去的临界点（递归出口），一旦达到这个临界点即就从该点原路返回到原点，最终问题得到解决。</li></ul><p>过程图解：</p><p><img src="https://cdn.jsdelivr.net/gh/keependeavour/picgo/img/20200607172648138.jpg" alt="递归图解"></p><h2 id="四、递归算法使用条件"><a href="#四、递归算法使用条件" class="headerlink" title="四、递归算法使用条件"></a>四、递归算法使用条件</h2><ul><li>明确递归的终止条件</li><li>提取重复的逻辑，缩小问题的规模不断递去</li><li>给出递归终止时的处理办法</li></ul><h2 id="五、案例"><a href="#五、案例" class="headerlink" title="五、案例"></a>五、案例</h2><ul><li><h3 id="阶乘"><a href="#阶乘" class="headerlink" title="阶乘"></a>阶乘</h3>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">recursion</span><span class="params">(<span class="type">int</span> number)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (number == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> number * recursion(number - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h3 id="力扣（合并两个有序链表）"><a href="#力扣（合并两个有序链表）" class="headerlink" title="力扣（合并两个有序链表）"></a>力扣（合并两个有序链表）</h3><h4 id="题目-链接-https-leetcode-cn-problems-merge-two-sorted-lists-description"><a href="#题目-链接-https-leetcode-cn-problems-merge-two-sorted-lists-description" class="headerlink" title="题目 链接: https://leetcode.cn/problems/merge-two-sorted-lists/description/"></a>题目 链接: <a href="https://leetcode.cn/problems/merge-two-sorted-lists/description/">https://leetcode.cn/problems/merge-two-sorted-lists/description/</a></h4><p>  将两个升序链表合并为一个新的 <strong>升序</strong> 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 </p><p>  <img src="https://cdn.jsdelivr.net/gh/keependeavour/picgo/img/merge_ex1.jpg" alt="题目"></p><h4 id="算法思路"><a href="#算法思路" class="headerlink" title="算法思路"></a>算法思路</h4><p>  采用递归算法，若l1 || l2 开始即为空链表，不需要操作返回非空链表，否则判断那个链表的头节点对应的值更小，然后递归，决定下一个添加到结果里的节点，如果后续递归中两个链表有一个为空递归结束。</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ListNode <span class="title function_">mergeTwoLists</span><span class="params">(ListNode l1, ListNode l2)</span> &#123;</span><br><span class="line">       <span class="keyword">if</span> (l1 == <span class="literal">null</span>) &#123;</span><br><span class="line">           <span class="keyword">return</span> l2;</span><br><span class="line">       &#125; <span class="keyword">else</span> <span class="keyword">if</span> (l2 == <span class="literal">null</span>) &#123;</span><br><span class="line">           <span class="keyword">return</span> l1;</span><br><span class="line">       <span class="comment">// 排除非空集合</span></span><br><span class="line">       &#125; <span class="keyword">else</span> <span class="keyword">if</span> (l1.val &lt;= l2.val) &#123;</span><br><span class="line">           <span class="comment">// 寻找最小头节点 每次递归节点 寻找插入的位置 每次更新链表 直到有一个值为空 就跳出递归</span></span><br><span class="line">           l1.next = mergeTwoLists(l1.next, l2);</span><br><span class="line">           <span class="keyword">return</span> l1;</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           l2.next = mergeTwoLists(l2.next, l1);</span><br><span class="line">           <span class="keyword">return</span> l2;</span><br><span class="line">       &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h4 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><ul><li>时间复杂度：O(n+m)，其中 n 和 m 分别为两个链表的长度。因为每次调用递归都会去掉 l1 或者 l2 的头节点（直到至少有一个链表为空），函数 mergeTwoList 至多只会递归调用每个节点一次。因此，时间复杂度取决于合并后的链表长度，O(n+m)。</li><li>空间复杂度：O(n+m)，其中 n和 m分别为两个链表的长度。递归调mergeTwoLists 函数时需要消耗栈空间，栈空间的大小取决于递归调用的深度。结束递归调用时 mergeTwoLists 函数最多调用 n+m次，因此空间复杂度为 O(n+m)。</li></ul></li></ul><h2 id="六、个人对于递归的理解-己见"><a href="#六、个人对于递归的理解-己见" class="headerlink" title="六、个人对于递归的理解(己见)"></a>六、个人对于递归的理解(己见)</h2><p>每次递归都会缩小范围，例如阶乘递归每次程序调用本身时参数就减一，从大规模逐渐减少到最后小规模的结束条件，输入5，每次递归减一 最终返回就是5 <em> 4 </em> 3 <em> 2 </em> 1 = 120（最后结束时候返回的结果），缩小到最小范围时候开始计算返回结果，也就是递归终止条件。</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
